.. include:: /pentest_links.txt


*************
Internet data
*************

This section follows Python's `Internet Data Handling <https://docs.python.org/3/library/netdata.html>`_.

email
=====

This section follows `email â€” An email and MIME handling package <https://docs.python.org/3/library/email.html>`_.


Get your own :file:`example01.eml` raw email message
----------------------------------------------------

We use example email message :file:`example01.eml` to illustrate how the Python email software can be used to manipulate email. You can do the same with your own email by downloading the raw email text. For example, the raw contents of a Gmail message can be downloaded from any browser by selecting "Show original" from the menu immediately to the right of the reply button. That capability is not unique to Gmail.

Use Python ``email`` for recon on email
---------------------------------------

To understand Python's ``EmailMessage`` class see `email.message: Representing an email message <https://docs.python.org/3/library/email.message.html#module-email.message>`_. Here we first carve through the email to get an idea of it's structure:

.. code-block:: pycon
  :emphasize-lines: 1,4-6,12,15,19,24-27,35-39

  python3

  # Packages
  import email
  import mimetypes
  from email.policy import default


  # Read in the email message.
  msgfile = 'example01.eml'
  with open(msgfile, 'rb') as fp:
    msg = email.message_from_binary_file(fp, policy=default)

  # Get email header field names.
  print(msg.keys())
  # From this we see the email uses  SPF, DKIM, and DMARC

  # Let's see the message Content-Type from the header.
  print(msg.get('Content-Type', failobj='no Content-Type'))

  # The message is Content-Type multipart/mixed, so let's get the message structure.

  # Get the email body structure.
  for part in msg.walk():
    print(part.get_content_type(), part.get_boundary('(no boundary)'),
      '(is attachment:', str(part.is_attachment()) + ')'
      ' (filename', part.get_filename(failobj='None')+')')

  # The message has a multipart/alternative ...
  # The first is text/plain, likely the message body in plain text.
  # The second is text/html, likely th emessage body in html.
  # The last multipart is the attached file 'plaintext.txt'.

  # If the attachment is text/plain, print it out.
  for part in msg.iter_attachments():
    if part.get_content_type() == 'text/plain':
      print(part.get_content())
    else:
      print('Attachment', part.get_filename(failobj='None'), 'is', part.get_content_type())


  # We got all this without even looking at the email.

Looking at the actual message text
----------------------------------

See `Message Headers <https://www.iana.org/assignments/message-headers/message-headers.xhtml>`_ for RFC definition of the fields.

Message headers are added on top by successive servers, so the first `Received:` is actually from the last server to receive the message.

You'll notice lots of header fields "X-\*:" that were used for unstandardized parameters (not in any RFC). That has since been deprecated by `IETF RFC 6648 Deprecating the "X-" Prefix and Similar Constructs in Application Protocols <https://tools.ietf.org/html/rfc6648>`_.

Header Delivered-To, Received, X-Received
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Delivered-To:` is not in an RFC but is added upon delivery to a mailbox.

`Received:` is the last SMTP server involved in the email. Note the private RFC 1918 10.0.0.0/8 address range, indicating an internal Google email server.

`X-Received:` is a non-standard received header field.

.. code-block:: text
  :emphasize-lines: 1,2,4

  Delivered-To: bill.gates@gmail.com
  Received: by 10.74.36.76 with SMTP id v12csp1554687oov;
          Wed, 12 Jul 2017 18:36:16 -0700 (PDT)
  X-Received: by 10.55.201.202 with SMTP id m71mr1960875qkl.140.1499909776939;
          Wed, 12 Jul 2017 18:36:16 -0700 (PDT)


Header ARC-*
^^^^^^^^^^^^

From `Authenticated Received Chain <https://en.wikipedia.org/wiki/Authenticated_Received_Chain>`_:

  DMARC allows a sender's domain to indicate that their emails are protected by SPF and/or DKIM, and tells a receiver what to do if neither of those authentication methods passes - such as to reject the message. However, a strict DMARC policy may block legitimate emails sent through a mailing list or forwarder, as the SPF check will fail due to the unapproved sender and the DKIM signature will be invalidated if the message is modified, such as by adding a subject tag or footer.

  ARC solves the problem of the SPF and DKIM signatures being invalidated by giving the intermediate server a way to sign the original message's validation results. Even if the SPF and DKIM validation fail, the recipient can choose to validate the ARC. If the ARC indicates that the original message passed the SPF and DKIM checks and the only modifications were made by well-reputed intermediaries, the recipient may choose to ignore the failed SPF, DKIM, or DMARC validation.

For a good, short introduction see `How to Explain Authenticated Received Chain (ARC) in Plain English <https://blog.returnpath.com/how-to-explain-authenticated-received-chain-arc-in-plain-english-2/>`_


.. code-block:: text
  :emphasize-lines: 1,9,19

  ARC-Seal: i=1; a=rsa-sha256; t=1499909776; cv=none;
          d=google.com; s=arc-20160816;
          b=SioX8HnlJ470WDafra8Cy+lEmpJJlILS4N+onXzANGMH+nKDPLKkRc10MCNNFWWQ0X
           XEyZXji6Tz97bH0pTbqMP24Fa0ouuHYrKSygUOny4ZpUQeOA7fSIXQZFSMN8Ink7xCZ8
           kUPKFxgO6HJXAhKaYjY1jgGpvHVI/DLSDq0avy9n9rh20OmyXnS6DbaPnt3dL90JFiNE
           S/iGR9JDHHN3wOwuikiE/7g6i8tVUV0mRYaH2DMgySw0DdzyiI684BSdC7q9yZjto65c
           CFT3+ugGGHC1tNm2quLXcBf8CGckWy5rPFwTFNmXBIhGq/RByiCfpCM+dlaIqj3esiIH
           xFgQ==
  ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
          h=to:subject:message-id:date:from:mime-version:dkim-signature
           :arc-authentication-results;
          bh=vG6RGxkmpfoWe3CB+2hKOkcbosxM2LUiMwk6+y6JxTc=;
          b=AgbPQkRPboCsPbDyysQjf2EJE2U2r/ewnh+6kFnkcyqqlc+9B8JcOPDrNBCzYa5NNt
           3jw41ExvjSVC29m7EFLXCxu+7wc//MFGeuKqAM40vt8cnWJMIX6UQqeIW2LGF2PD2u/r
           OpdmonZ/wsgDX3uko53SEJWsctfZBaygb6nMAJ/Se6dHdZVkUsV5fL6aWecOmAeEXXno
           9fb6c/aaSPuJ/wAWg1+Uccc39S0zGSiVXJTDmNPZJ6grFnGGXeyIYcpVEv4Q7xrZtsYy
           jd9OUdLT5H4lQAdKgISFzevkWRmke97W+LKfEN46jObpWCT49oA7iyjekWwQOBrDK0Ms
           9MTQ==
  ARC-Authentication-Results: i=1; mx.google.com;
         dkim=pass header.i=@bitbender.org header.b=Vsm2nbdE;
         spf=pass (google.com: domain of bill.gates@bitbender.org designates 2607:f8b0:400d:c09::22f as permitted sender) smtp.mailfrom=bill.gates@bitbender.org;
         dmarc=pass (p=REJECT sp=REJECT dis=NONE) header.from=bitbender.org


Header Return-Path, Received
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From `RFC 5321 <https://tools.ietf.org/html/rfc5321>`_ "The primary purpose of the Return-path is to designate the address to which messages indicating non-delivery or other mail system failures are to be sent."

There is another `Received:` from an earlier SMTP server.


.. code-block:: text
  :emphasize-lines: 1,2

  Return-Path: <bill.gates@bitbender.org>
  Received: from mail-qk0-x22f.google.com (mail-qk0-x22f.google.com. [2607:f8b0:400d:c09::22f])
          by mx.google.com with ESMTPS id d78si3625566qkc.297.2017.07.12.18.36.16
          for <bill.gates@gmail.com>
          (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
          Wed, 12 Jul 2017 18:36:16 -0700 (PDT)


Header for SPF, DKIM results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here the `Received-SPF:` header field indicates the SPF check passed while the `Authentication-Results:` indicates the DMARC test passed (because the DKIM and SPF tests passed).

There is yet another `Received:` header and the `DKIM-Signature:`.

Note that `X-Google-DKIM-Signature:` is internal to Google and not consumed elsewhere.


.. code-block:: text
  :emphasize-lines: 1,2,6,8,15

  Received-SPF: pass (google.com: domain of bill.gates@bitbender.org designates 2607:f8b0:400d:c09::22f as permitted sender) client-ip=2607:f8b0:400d:c09::22f;
  Authentication-Results: mx.google.com;
         dkim=pass header.i=@bitbender.org header.b=Vsm2nbdE;
         spf=pass (google.com: domain of bill.gates@bitbender.org designates 2607:f8b0:400d:c09::22f as permitted sender) smtp.mailfrom=bill.gates@bitbender.org;
         dmarc=pass (p=REJECT sp=REJECT dis=NONE) header.from=bitbender.org
  Received: by mail-qk0-x22f.google.com with SMTP id 16so38047001qkg.2
          for <bill.gates@gmail.com>; Wed, 12 Jul 2017 18:36:16 -0700 (PDT)
  DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
          d=bitbender.org; s=google;
          h=mime-version:from:date:message-id:subject:to;
          bh=vG6RGxkmpfoWe3CB+2hKOkcbosxM2LUiMwk6+y6JxTc=;
          b=Vsm2nbdEgXeHR3c4y5/0J/neyFrOIjeMU9Cp/4ckE5vjXpx8o0XSGrQac0sLy/WFHz
           2/a3dGCgP+EG0pK7OMCdK92Dndtd96FDSsFWlv6WM0jnP9BT5Z04mPqWvQD8/hJ5JrrA
           sZC/eYNvMW2kLiHCYWpyW5P9Z+nCJZzwvNucM=
  X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
          d=1e100.net; s=20161025;
          h=x-gm-message-state:mime-version:from:date:message-id:subject:to;
          bh=vG6RGxkmpfoWe3CB+2hKOkcbosxM2LUiMwk6+y6JxTc=;
          b=ERrPpfJyoO1AjoyIOfrwZh7+mqWsJyJA/1DX2UvEPX5CNW+L+tQnmuZrI8UHRtX1Yj
           wzy1ajQBUJfyQ1NIred1UT2KdH0Np4/UA717YuCWsxsYk6q56V1ID0XE6nZWwsVw92CF
           tnG9B5ThvKosIg9qLDPUShUHWcMqoINE6VfZs4bSgN3N+2eHF+0ScS58MQTGK5J+jk6Q
           ap1ltGI3VUuI7j2HnTM0/d61yQaGqY0bBYIoav+2G9RBitvD2QDV/zQhP1J4eTO8io47
           aS8JV85pH74MUBb9Zc+HkbM4JXQxRhE1KsRaFhgbpca2HWSm6adE9d32OVZTAtHfP/CV
           U/XA==


Header X-\*, MIME-Version, Received
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`X-Gm-Message-State:` is again another Google-internal header, along with another `X-Received:` & `Received:`.

`MIME-version:` indicates `MIME <https://en.wikipedia.org/wiki/MIME>`_ version 1.0.

.. code-block:: text
  :emphasize-lines: 1,3,5-6

  X-Gm-Message-State: AIVw112nBH2HChFIK7jQ0x/SNhxWIq/i/+cf0k1dk0o+6IuGkP3WLKWH
	  y1ypALWgopPZyiHCaLDTifY6MaFgb4AN3jc=
  X-Received: by 10.55.77.13 with SMTP id a13mr1689023qkb.194.1499909776375;
   Wed, 12 Jul 2017 18:36:16 -0700 (PDT)
  MIME-Version: 1.0
  Received: by 10.12.172.163 with HTTP; Wed, 12 Jul 2017 18:36:15 -0700 (PDT)


Header fields the user can relate to
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: text
  :emphasize-lines: 1-5

  From: "Maki, Jim" <bill.gates@bitbender.org>
  Date: Wed, 12 Jul 2017 18:36:15 -0700
  Message-ID: <CAAyi+zfiRY0G7PgcPkvOkaQtu3qbiYcbjDkkgdM0kpAnq3TF2g@mail.gmail.com>
  Subject: Single test message
  To: Jim Maki <bill.gates@gmail.com>


Message `Content-Type: multipart/mixed`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This indicates an email with multiple parts separated with boundary="001a114a6a106abb89055428f59b".


.. code-block:: text
  :emphasize-lines: 1

  Content-Type: multipart/mixed; boundary="001a114a6a106abb89055428f59b"


Message text/plain and text/html message bodies
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Content-Type: multipart/alternative` indicates there are alternative message body types: here text/plain and text/html.


.. code-block:: text
  :emphasize-lines: 1,3,4,10-12,17

  Content-Type: multipart/alternative; boundary="001a114a6a106abb86055428f599"

  --001a114a6a106abb86055428f599
  Content-Type: text/plain; charset="UTF-8"

  Message body

    Jim

  --001a114a6a106abb86055428f599
  Content-Type: text/html; charset="UTF-8"
  Content-Transfer-Encoding: quoted-printable

  <div dir=3D"ltr">Message body<div><br></div><div>=C2=A0 Jim</div><div><br><=
  /div></div>

  --001a114a6a106abb86055428f599--


Message attachment
^^^^^^^^^^^^^^^^^^

Here the attachment is defined. It's the text/plain file "plaintext.txt" with contents "Test attachment."


.. code-block:: text
  :emphasize-lines: 1,3-4,7-8

  --001a114a6a106abb89055428f59b
  Content-Type: text/plain; charset="US-ASCII"; name="plaintext.txt"
  Content-Disposition: attachment; filename="plaintext.txt"
  Content-Transfer-Encoding: base64
  X-Attachment-Id: f_j51rjvcw0

  VGVzdCBhdHRhY2htZW50LgoK
  --001a114a6a106abb89055428f59b--

It's encoded in base-64, and running the following commands shows that "GVzdCBhdHRhY2htZW50LgoK" converts to "Test attachment."

.. code-block:: console
  :emphasize-lines: 1

  hacker@meetup:~/meetup/email$ echo 'VGVzdCBhdHRhY2htZW50LgoK' | base64 -d
  Test attachment.


Unpacking the eml into a directory
----------------------------------

`unpack.py` sample program
^^^^^^^^^^^^^^^^^^^^^^^^^^

From `email: Examples <https://docs.python.org/3.6/library/email.examples.html>`_:

.. code-block:: python
  :emphasize-lines: 1,6-10,13,24-25,33,39-48,51-52,53,56

  cat > unpack.py <<'EOF'
  #!/usr/bin/env python3

  """Unpack a MIME message into a directory of files."""

  import os
  import email
  import mimetypes
  from email.policy import default
  from argparse import ArgumentParser


  def main():
      parser = ArgumentParser(description="""\
  Unpack a MIME message into a directory of files.
  """)
      parser.add_argument('-d', '--directory', required=True,
                          help="""Unpack the MIME message into the named
                          directory, which will be created if it doesn't already
                          exist.""")
      parser.add_argument('msgfile')
      args = parser.parse_args()

      with open(args.msgfile, 'rb') as fp:
          msg = email.message_from_binary_file(fp, policy=default)

      try:
          os.mkdir(args.directory)
      except FileExistsError:
          pass

      counter = 1
      for part in msg.walk():
          # multipart/* are just containers
          if part.get_content_maintype() == 'multipart':
              continue
          # Applications should really sanitize the given filename so that an
          # email message can't be used to overwrite important files
          filename = part.get_filename()
          if not filename:
              ext = mimetypes.guess_extension(part.get_content_type())
              if not ext:
                  # Use a generic bag-of-bits extension
                  ext = '.bin'
              filename = 'part-%03d%s' % (counter, ext)
          counter += 1
          with open(os.path.join(args.directory, filename), 'wb') as fp:
              fp.write(part.get_payload(decode=True))


  if __name__ == '__main__':
      main()
  EOF

  # unpack eml
  python3 unpack.py -d message_contents example01.eml

Using `unpack.py` to A/V scan attachments
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here we use this simple example to A/V scan a malicious email sample using `loadlibrary` from :ref:`load-library`:

.. code-block:: bash
  :emphasize-lines: 1-2,4-5,9,11-12,15-16,19,36-38

  # Continuing on from the above example
  PYCODE=$PWD

  # Get the ransomware
  AVDIR=~/av/samples/email
  rm -rf $AVDIR
  mkdir -p $AVDIR
  cd $AVDIR
  curl -L -o ransomware.zip http://www.malware-traffic-analysis.net/2017/05/16/2017-05-16-Jaff-ransomware-emails-and-artifacts.zip
  mkdir -p ransomware
  # The password is visible at http://www.malware-traffic-analysis.net/about.html
  PW=XXXXXXXXX
  unzip -P "$PW" ransomware.zip -d ransomware

  # Extract message content
  python3 $PYCODE/unpack.py -d contents ransomware/*.eml
  ls -l contents

  # In case MsMpEng is not already installed
  sudo apt install \
	      libc6-dev-x32 gcc-multilib lib32readline-dev cabextract \
	          gdb libimage-exiftool-perl -y
  cd
  mkdir -p av
  cd av
  git clone https://github.com/taviso/loadlibrary.git
  cd loadlibrary/engine
  curl -L -o mpam-fe.exe 'https://go.microsoft.com/fwlink/?LinkID=121721&arch=x86'
  cabextract mpam-fe.exe
  exiftool mpengine.dll | grep 'Product Version Number'
  # NOTE: bug fixed in 1.1.13903.0
  cd ..
  make
  cd ..

  # Run A/V against Invoice.pdf
  cd ~/av/loadlibrary
  ./mpclient ~/av/samples/email/contents/Invoice.pdf 2>&1 | grep Threat

  cd $PYCODE




Get attachments
---------------

Sample program to get attachments to individual files from `How to read eml file in python? <https://stackoverflow.com/questions/31392361/how-to-read-eml-file-in-python>`_:

.. code-block:: bash
  :emphasize-lines: 1,2-3,8-16,22-26

  cat > detach.py <<'EOF'
  import email
  import os

  path = './'
  listing = os.listdir(path)

  for fle in listing:
      if str.lower(fle[-3:])=="eml":
          msg = email.message_from_file(open(fle))
          attachments=msg.get_payload()
          for attachment in attachments:
              try:
                  fnam=attachment.get_filename()
                  f=open(fnam, 'wb').write(attachment.get_payload(decode=True,))
                  f.close()
              except Exception as detail:
                  #print detail
                  pass
  EOF

  mkdir -p detach
  cp *.eml detach/
  cd detach
  python3 ../detach.py
  cd ..


Checking DKIM signature
-----------------------

We can use application ``dkimverify.py`` from Python package `dkimpy <https://pypi.python.org/pypi/dkimpy>`_ to check DKIM signatures.

On a side note, this is a case where ``conda`` does not have the appropriate package and ``pip`` must be used withing ``conda`` to get the package.

.. code-block:: bash
  :emphasize-lines: 5

  conda create --name email python=3 -y
  source activate email
  conda install pip -y
  pip install -U dkimpy dnspython
  dkimverify.py < example01.eml

  source deactivate
  conda remove --name email --all -y


Data conversion
===============

Base64
------

See `base64(1) - Linux man page <https://linux.die.net/man/1/base64>`_ and `base64 <https://docs.python.org/3/library/base64.html>`_.

bash ``base64``
^^^^^^^^^^^^^^^

Warning - use the right ``echo`` options:

* ``echo -n`` avoids adding "\\n" to the end of the string.

* ``echo -e`` to add special characters ("\\r", "\\n", ...) within the string.

See the following example:


.. code-block:: bash

  # "echo -n" avoids appending "\n". See the difference:
  echo -n "hello" | base64
  echo "hello" | base64

  # "echo -e" to add "\r\n" embedded 3 places:
  echo -ne "GET / HTTP/1.1\r\nHost: localhost:8000\r\n\r\n" | base64


Here's the result of running the above:

.. code-block:: console
  :emphasize-lines: 3,5,9

  hacker@meetup:~$ # "echo -n" avoids appending "\n". See the difference:
  hacker@meetup:~$ echo -n "hello" | base64
  aGVsbG8=
  hacker@meetup:~$ echo "hello" | base64
  aGVsbG8K
  hacker@meetup:~$ 
  hacker@meetup:~$ # "echo -e" to add "\r\n" embedded 3 places:
  hacker@meetup:~$ echo -ne "GET / HTTP/1.1\r\nHost: localhost:8000\r\n\r\n" | base64
  R0VUIC8gSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo4MDAwDQoNCg==

Next, understand the ``base64 -w 0`` command line option. There's only 2 command line options for ``base64`` in bash:

  * ``-d`` does a decode vs the enfault encode.

  * ``-w N`` line wraps the output at N characters vs the default 76. Specifying ``-w 0`` avoids line wrapping.

Here's a look at line wrapping:

.. code-block:: bash

  # 100+ character string with some Unicode at the start
  TEXT="abc 123 Â¾ Â¶"$(printf '1234567890%.0s' {0..9})

  # Line wrap at 76 characters
  echo -n "$TEXT" | base64
  # Line wrap disabled
  echo -n "$TEXT" | base64 -w 0

  # "base64 -d" handles line wrap or no line wrap
  echo -n "$TEXT" | base64 | base64 -d
  echo -n "$TEXT" | base64 -w 0 | base64 -d

Here's the result of running the above:

.. code-block:: console
  :emphasize-lines: 6-7,10,14,16

  hacker@meetup:~$ # 100+ character string with some Unicode at the start
  hacker@meetup:~$ TEXT="abc 123 Â¾ Â¶"$(printf '1234567890%.0s' {0..9})
  hacker@meetup:~$ 
  hacker@meetup:~$ # Line wrap at 76 characters
  hacker@meetup:~$ echo -n "$TEXT" | base64
  YWJjIDEyMyDCviDCtjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0
  NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTA=
  hacker@meetup:~$ # Line wrap disabled
  hacker@meetup:~$ echo -n "$TEXT" | base64 -w 0
  YWJjIDEyMyDCviDCtjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTA=
  hacker@meetup:~$ 
  hacker@meetup:~$ # "base64 -d" handles line wrap or no line wrap
  hacker@meetup:~$ echo -n "$TEXT" | base64 | base64 -d
  abc 123 Â¾ Â¶1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
  hacker@meetup:~$ echo -n "$TEXT" | base64 -w 0 | base64 -d
  abc 123 Â¾ Â¶1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
  hacker@meetup:~$ 


``python3`` ``base64``
^^^^^^^^^^^^^^^^^^^^^^

Translating the bash example above to Python:

.. code-block:: pycon

  python3 -q

  import base64

  TEXT = "abc 123 Â¾ Â¶" + "1234567890"*10  # start with a string
  BYTES = TEXT.encode('utf-8')  # base64 works with bytes, not strings
  base64.b64encode(BYTES)  # BYTES ==> base64
  base64.b64decode(base64.b64encode(BYTES)) # BYTES ==> base64 ==> BYTES
  base64.b64decode(base64.b64encode(BYTES)).decode('utf-8')  # back to string

  exit()

Running this results in:

.. code-block:: pycon
  :emphasize-lines: 8,10,12

  hacker@meetup:~$ python3 -q
  >>>
  >>> import base64
  >>>
  >>> TEXT = "abc 123 Â¾ Â¶" + "1234567890"*10  # start with a string
  >>> BYTES = TEXT.encode('utf-8')  # base64 works with bytes, not strings
  >>> base64.b64encode(BYTES)  # BYTES ==> base64
  b'YWJjIDEyMyDCviDCtjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTA='
  >>> base64.b64decode(base64.b64encode(BYTES)) # BYTES ==> base64 ==> BYTES
  b'abc 123 \xc2\xbe \xc2\xb61234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
  >>> base64.b64decode(base64.b64encode(BYTES)).decode('utf-8')  # back to string
  'abc 123 Â¾ Â¶1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
  >>>
  >>> exit()

Now that you have a bit of background, take a look at `Base64 encoding in Python 3 <https://stackoverflow.com/questions/8908287/base64-encoding-in-python-3>`_.


``python3`` ``binascii``
^^^^^^^^^^^^^^^^^^^^^^^^

``binascii`` is an alternative to ``base64``:

.. code-block:: pycon

  python3 -q

  import binascii

  TEXT = "abc 123 Â¾ Â¶" + "1234567890"*10  # start with a string
  BYTES = TEXT.encode('utf-8')  # binascii works with bytes, not strings
  # In python >= 3.6, next command can be "binascii.b2a_base64(BYTES, newline=False)"
  binascii.b2a_base64(BYTES)[:-1] # BYTES ==> base64
  binascii.a2b_base64(binascii.b2a_base64(BYTES)[:-1]) # BYTES ==> base64 ==> BYTES
  binascii.a2b_base64(binascii.b2a_base64(BYTES)[:-1]).decode('utf-8')  # back to string

  exit()

Running this results in:

.. code-block:: pycon
  :emphasize-lines: 9,11,13

  hacker@meetup:~$ python3 -q
  >>>
  >>> import binascii
  >>>
  >>> TEXT = "abc 123 Â¾ Â¶" + "1234567890"*10  # start with a string
  >>> BYTES = TEXT.encode('utf-8')  # binascii works with bytes, not strings
  >>> # In python >= 3.6, next command can be "binascii.b2a_base64(BYTES, newline=false)"
  ... binascii.b2a_base64(BYTES)[:-1] # BYTES ==> base64
  b'YWJjIDEyMyDCviDCtjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTA='
  >>> binascii.a2b_base64(binascii.b2a_base64(BYTES)[:-1]) # BYTES ==> base64 ==> BYTES
  b'abc 123 \xc2\xbe \xc2\xb61234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
  >>> binascii.a2b_base64(binascii.b2a_base64(BYTES)[:-1]).decode('utf-8')  # back to string
  'abc 123 Â¾ Â¶1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
  >>>
  >>> exit()


Hex <==> ascii
--------------

Here we convert to/from hex.

``bash`` hex using ``xxd``, ``sed``, ``tr``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here we demonstrate how to convert a string to hex formats "0x01,0x02,..." and "\x01\x02...".

.. code-block:: bash
  :emphasize-lines: 1,9,18

  # 100+ character string with some Unicode at the start
  TEXT="abc 123 Â¾ Â¶"$(printf '1234567890%.0s' {0..9})

  # Show xxd output format
  echo -n "$TEXT" | xxd  # default
  echo -n "$TEXT" | xxd -p  # line wrap only
  echo -n "$TEXT" | xxd -p | tr -d '\n'  # single line

  # Hex format "0x01,0x02,..."
  HEX0=$(echo -n "$TEXT" | xxd -p | \
      sed 's#\(..\)#0x\1#g' | tr -d '\n' | sed 's#\(.\)0x#\1,0x#g')
  echo "$HEX0"
  # Back to text
  TEXT2=$(echo -n "$HEX0" | sed "s/^0x//; s/,0x//g" | xxd -r -p)
  echo "$TEXT2"

  # Hex format "\x01\x02..."
  HEX=$(echo -n "$TEXT" | xxd -p | tr -d '\n' | sed 's#\(..\)#\\x\1#g')
  echo "$HEX"
  # Back to text
  TEXT3=$(echo -n "$HEX" | tr -d '\\x' | xxd -r -p)
  echo "$TEXT3"

Running this gives

.. code-block:: console
  :emphasize-lines: 1,21,31

  hacker@meetup:~$ # 100+ character string with some Unicode at the start
  hacker@meetup:~$ TEXT="abc 123 Â¾ Â¶"$(printf '1234567890%.0s' {0..9})
  hacker@meetup:~$ 
  hacker@meetup:~$ # Show xxd output format
  hacker@meetup:~$ echo -n "$TEXT" | xxd  # default
  00000000: 6162 6320 3132 3320 c2be 20c2 b631 3233  abc 123 .. ..123
  00000010: 3435 3637 3839 3031 3233 3435 3637 3839  4567890123456789
  00000020: 3031 3233 3435 3637 3839 3031 3233 3435  0123456789012345
  00000030: 3637 3839 3031 3233 3435 3637 3839 3031  6789012345678901
  00000040: 3233 3435 3637 3839 3031 3233 3435 3637  2345678901234567
  00000050: 3839 3031 3233 3435 3637 3839 3031 3233  8901234567890123
  00000060: 3435 3637 3839 3031 3233 3435 3637 3839  4567890123456789
  00000070: 30                                       0
  hacker@meetup:~$ echo -n "$TEXT" | xxd -p  # line wrap only
  6162632031323320c2be20c2b63132333435363738393031323334353637
  383930313233343536373839303132333435363738393031323334353637
  383930313233343536373839303132333435363738393031323334353637
  3839303132333435363738393031323334353637383930
  hacker@meetup:~$ echo -n "$TEXT" | xxd -p | tr -d '\n'  # single line
  6162632031323320c2be20c2b631323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930hacker@meetup:~$ 
  hacker@meetup:~$ # Hex format "0x01,0x02,..."
  hacker@meetup:~$ HEX0=$(echo -n "$TEXT" | xxd -p | \
  >     sed 's#\(..\)#0x\1#g' | tr -d '\n' | sed 's#\(.\)0x#\1,0x#g')
  hacker@meetup:~$ echo "$HEX0"
  0x61,0x62,0x63,0x20,0x31,0x32,0x33,0x20,0xc2,0xbe,0x20,0xc2,0xb6,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30
  hacker@meetup:~$ # Back to text
  hacker@meetup:~$ TEXT2=$(echo -n "$HEX0" | sed "s/^0x//; s/,0x//g" | xxd -r -p)
  hacker@meetup:~$ echo "$TEXT2"
  abc 123 Â¾ Â¶1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
  hacker@meetup:~$ 
  hacker@meetup:~$ # Hex format "\x01\x02..."
  hacker@meetup:~$ HEX=$(echo -n "$TEXT" | xxd -p | tr -d '\n' | sed 's#\(..\)#\\x\1#g')
  hacker@meetup:~$ # Back to text
  hacker@meetup:~$ TEXT3=$(echo -n "$HEX" | tr -d '\\x' | xxd -r -p)
  hacker@meetup:~$ echo "$TEXT3"
  abc 123 Â¾ Â¶1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890



``python3`` ``binascii.hexlify``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Again the bash examples above translated to Python. First demonstrate ``binascii.hexlify`` and ``binascii.unhexlify``:

.. code-block:: python3

  python3 -q

  import binascii

  TEXT = "abc 123 Â¾ Â¶" + "1234567890"*10  # start with a string
  BYTES = TEXT.encode('utf-8')  # binascii works with bytes, not strings
  binascii.hexlify(BYTES) # BYTES ==> hex
  binascii.unhexlify(binascii.hexlify(BYTES))  # BYTES ==> hex ==> BYTES
  binascii.unhexlify(binascii.hexlify(BYTES)).decode('utf-8')  # back to string

  exit()

Running this gives:

.. code-block:: pycon
  :emphasize-lines: 8,10,12

  hacker@meetup:~$ python3 -q
  >>>
  >>> import binascii
  >>>
  >>> TEXT = "abc 123 Â¾ Â¶" + "1234567890"*10  # start with a string
  >>> BYTES = TEXT.encode('utf-8')  # binascii works with bytes, not strings
  >>> binascii.hexlify(BYTES) # BYTES ==> hex
  b'6162632031323320c2be20c2b631323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930'
  >>> binascii.unhexlify(binascii.hexlify(BYTES))  # BYTES ==> hex ==> BYTES
  b'abc 123 \xc2\xbe \xc2\xb61234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
  >>> binascii.unhexlify(binascii.hexlify(BYTES)).decode('utf-8')  # back to string
  'abc 123 Â¾ Â¶1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
  >>>
  >>> exit()


Now lets actually get hex string outputs (notice the double ``binascii.unhexlify()``):

.. code-block:: python3
  :emphasize-lines: 8,16

  python3 -q

  import binascii

  TEXT = "abc 123 Â¾ Â¶" + "1234567890"*10  # start with a string
  BYTES = TEXT.encode('utf-8')  # binascii works with bytes, not strings

  # 0x01,0x02,0x03,...
  HEX0 = ','.join(list(map(hex,binascii.hexlify(BYTES))))
  print(HEX0)
  # To get back to TEXT
  BYTES2 = binascii.unhexlify(binascii.unhexlify(HEX0[2:].replace(',0x', '')))
  TEXT2 = BYTES2.decode('utf-8')
  print(TEXT2)

  # \x01\x02\x03...
  HEX = '\\' + '\\'.join(list(map(lambda b: b[1:], list(map(hex, binascii.hexlify(BYTES))))))
  print(HEX)
  # To get back to TEXT
  BYTES3 = binascii.unhexlify(binascii.unhexlify(HEX.replace('\\x','')))
  TEXT3 = BYTES3.decode('utf-8')

  exit()

Running this gives:

.. code-block:: pycon
  :emphasize-lines: 8,18

  hacker@meetup:~$ python3 -q
  >>>
  >>> import binascii
  >>>
  >>> TEXT = "abc 123 Â¾ Â¶" + "1234567890"*10  # start with a string
  >>> BYTES = TEXT.encode('utf-8')  # binascii works with bytes, not strings
  >>>
  >>> # 0x01,0x02,0x03,...
  ... HEX0 = ','.join(list(map(hex,binascii.hexlify(BYTES))))
  >>> print(HEX0)
  0x36,0x31,0x36,0x32,0x36,0x33,0x32,0x30,0x33,0x31,0x33,0x32,0x33,0x33,0x32,0x30,0x63,0x32,0x62,0x65,0x32,0x30,0x63,0x32,0x62,0x36,0x33,0x31,0x33,0x32,0x33,0x33,0x33,0x34,0x33,0x35,0x33,0x36,0x33,0x37,0x33,0x38,0x33,0x39,0x33,0x30,0x33,0x31,0x33,0x32,0x33,0x33,0x33,0x34,0x33,0x35,0x33,0x36,0x33,0x37,0x33,0x38,0x33,0x39,0x33,0x30,0x33,0x31,0x33,0x32,0x33,0x33,0x33,0x34,0x33,0x35,0x33,0x36,0x33,0x37,0x33,0x38,0x33,0x39,0x33,0x30,0x33,0x31,0x33,0x32,0x33,0x33,0x33,0x34,0x33,0x35,0x33,0x36,0x33,0x37,0x33,0x38,0x33,0x39,0x33,0x30,0x33,0x31,0x33,0x32,0x33,0x33,0x33,0x34,0x33,0x35,0x33,0x36,0x33,0x37,0x33,0x38,0x33,0x39,0x33,0x30,0x33,0x31,0x33,0x32,0x33,0x33,0x33,0x34,0x33,0x35,0x33,0x36,0x33,0x37,0x33,0x38,0x33,0x39,0x33,0x30,0x33,0x31,0x33,0x32,0x33,0x33,0x33,0x34,0x33,0x35,0x33,0x36,0x33,0x37,0x33,0x38,0x33,0x39,0x33,0x30,0x33,0x31,0x33,0x32,0x33,0x33,0x33,0x34,0x33,0x35,0x33,0x36,0x33,0x37,0x33,0x38,0x33,0x39,0x33,0x30,0x33,0x31,0x33,0x32,0x33,0x33,0x33,0x34,0x33,0x35,0x33,0x36,0x33,0x37,0x33,0x38,0x33,0x39,0x33,0x30,0x33,0x31,0x33,0x32,0x33,0x33,0x33,0x34,0x33,0x35,0x33,0x36,0x33,0x37,0x33,0x38,0x33,0x39,0x33,0x30
  >>> # To get back to TEXT
  ... BYTES2 = binascii.unhexlify(binascii.unhexlify(HEX0[2:].replace(',0x', '')))
  >>> TEXT2 = BYTES2.decode('utf-8')
  >>> print(TEXT2)
  abc 123 Â¾ Â¶1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
  >>>
  >>> # \x01\x02\x03...
  ... HEX = '\\' + '\\'.join(list(map(lambda b: b[1:], list(map(hex, binascii.hexlify(BYTES))))))
  >>> print(HEX)
  \x36\x31\x36\x32\x36\x33\x32\x30\x33\x31\x33\x32\x33\x33\x32\x30\x63\x32\x62\x65\x32\x30\x63\x32\x62\x36\x33\x31\x33\x32\x33\x33\x33\x34\x33\x35\x33\x36\x33\x37\x33\x38\x33\x39\x33\x30\x33\x31\x33\x32\x33\x33\x33\x34\x33\x35\x33\x36\x33\x37\x33\x38\x33\x39\x33\x30\x33\x31\x33\x32\x33\x33\x33\x34\x33\x35\x33\x36\x33\x37\x33\x38\x33\x39\x33\x30\x33\x31\x33\x32\x33\x33\x33\x34\x33\x35\x33\x36\x33\x37\x33\x38\x33\x39\x33\x30\x33\x31\x33\x32\x33\x33\x33\x34\x33\x35\x33\x36\x33\x37\x33\x38\x33\x39\x33\x30\x33\x31\x33\x32\x33\x33\x33\x34\x33\x35\x33\x36\x33\x37\x33\x38\x33\x39\x33\x30\x33\x31\x33\x32\x33\x33\x33\x34\x33\x35\x33\x36\x33\x37\x33\x38\x33\x39\x33\x30\x33\x31\x33\x32\x33\x33\x33\x34\x33\x35\x33\x36\x33\x37\x33\x38\x33\x39\x33\x30\x33\x31\x33\x32\x33\x33\x33\x34\x33\x35\x33\x36\x33\x37\x33\x38\x33\x39\x33\x30\x33\x31\x33\x32\x33\x33\x33\x34\x33\x35\x33\x36\x33\x37\x33\x38\x33\x39\x33\x30
  >>> # To get back to TEXT
  ... BYTES3 = binascii.unhexlify(binascii.unhexlify(HEX.replace('\\x','')))
  >>> TEXT3 = BYTES3.decode('utf-8')
  >>>
  >>> exit()


`JSON <https://en.wikipedia.org/wiki/JSON>`_
============================================

This section follows `json - JSON encoder and decoder <https://docs.python.org/3/library/json.html>`_. See `Encoders and Decoders <https://docs.python.org/3/library/json.html#encoders-and-decoders>`_ for the translation between JSON data and Python data structures. The idea is to allow reading JSON into Python data, manipulate the Python data, then output the Python data as JSON.


Existing examples in this doc
-----------------------------

JSON examples can be found in :ref:`beef-restful-api`.

The key points to remember when using ``curl`` are ``--request POST``, ``--header "Content-Type: application/json"``, and feed it a JSON string ``--data '{ ... }'``. For example:

.. code-block:: bash

  JSON='{"username":"beef", "password":"mySecret"}'
  curl \
      --request POST \
      --header "Content-Type: application/json" \
      --data "$JSON" \
      http://localhost:3000/admin/login

And that something other than bash (like Python) is needed for easily parsing returned JSON data.

Playing with `JSONPlaceholder <https://jsonplaceholder.typicode.com/>`_
-----------------------------------------------------------------------

JSONPlaceholder is a "free online REST service that you can use whenever you need some fake data. It's great for tutorials, faking a server, sharing code examples, ...".

A few examples extracting data. First, a simple example showing how quickly bash can get overwhelmed with a small amount of data by fetching the small user list from JSONPlaceholder:

.. code-block:: bash

  URL_BASE="https://jsonplaceholder.typicode.com"
  curl --silent $URL_BASE/users -o users.json

  grep -c '"id"' users.json  # count the number of users = 10 this time
  wc -l users.json  # count the number of records = 231

  python3 -m json.tool users.json --sort-keys  # prettify and sort JSON data

Do more in Python by listing the users name and zip code:

.. code-block:: bash
  :emphasize-lines: 1,12-13, 15-16

  cat > example_users01.py <<'EOF'

  import json
  from argparse import ArgumentParser

  parser = ArgumentParser(description="""\
  Process JSON data
  """)
  parser.add_argument('jsonfile', help="""Input JSON from the file.""")
  args = parser.parse_args()

  with open(args.jsonfile, 'r', encoding="utf-8") as fp:
      data = json.load(fp)

  for li in data:
      print(li['name'] + ', ' + li['address']['zipcode'])

  exit()
  EOF

  python3 example_users01.py users.json

