.. include:: /pentest_links.txt


***********************************************************************
2017-12-16 Mozilla Observatory
***********************************************************************


Links and updates this week
===========================


Links around the web
--------------------


Cloud links
^^^^^^^^^^^

#. `Trump administration calls for government IT to adopt cloud services <https://www.reuters.com/article/us-usa-trump-technology/trump-administration-calls-for-government-it-to-adopt-cloud-services-idUSKBN1E72RF>`_

#. `Introducing AWS Fargate – Run Containers without Managing Infrastructure <https://aws.amazon.com/blogs/aws/aws-fargate/>`_


Study links
^^^^^^^^^^^

#. `Coding Interview University <https://github.com/jwasham/coding-interview-university>`_

#. `A CEO's Guide to Emacs <https://blog.fugue.co/2015-11-11-guide-to-emacs.html>`_

#. `Around the world with Unicode <https://norasandler.com/2017/11/02/Around-the-with-Unicode.html>`_

#. `High-level Problems with Git and How to Fix Them <https://gregoryszorc.com/blog/2017/12/11/high-level-problems-with-git-and-how-to-fix-them/>`_

#. `Writing a Simple Linux Kernel Module <https://blog.sourcerer.io/writing-a-simple-linux-kernel-module-d9dc3762c234>`_

#. `Why Some Phishing Emails Are Mysteriously Disappearing <https://blog.cloudflare.com/combatting-phishing-with-dns/>`_


Legal links
^^^^^^^^^^^

#. `Evidence That Ethiopia Is Spying on Journalists Shows Commercial Spyware Is Out of Control <https://www.wired.com/story/evidence-that-ethiopia-is-spying-on-journalists-shows-commercial-spyware-is-out-of-control/>`_

#. `Hacking Back Makes a Comeback—But It’s Still a Really Bad Idea <https://www.technologyreview.com/s/609555/hacking-back-makes-a-comeback-but-its-still-a-really-bad-idea/>`_

#. `Mirai IoT Botnet Co-Authors Plead Guilty <https://krebsonsecurity.com/2017/12/mirai-iot-botnet-co-authors-plead-guilty/>`_

#. `Uber used bug bounty program to launder blackmail payment to hacker <https://arstechnica.com/information-technology/2017/12/uber-used-bug-bounty-program-to-launder-blackmail-payment-to-hacker/>`_


ISP misbehavior
^^^^^^^^^^^^^^^

#. `Code injection: A new low for ISPs <https://www.infoworld.com/article/2925839/net-neutrality/code-injection-new-low-isps.html>`_

  Use EFF's `HTTPS Everywhere <https://www.eff.org/HTTPS-EVERYWHERE>`_ to avoid this problem.


Hacking links
^^^^^^^^^^^^^

#. `Traffic to Major Tech Firms Rerouted to Russia <http://www.securityweek.com/traffic-major-tech-firms-rerouted-russia>`_

#. `CVE-2017-11937 <https://nvd.nist.gov/vuln/detail/CVE-2017-11937>`_

   From `Microsoft emergency update: Malware Engine needs, erm, malware protection <https://www.theregister.co.uk/2017/12/07/microsoft_emergency_update_malware_protection_engine_needs_erm_malware_protection/>`_:

     According to Microsoft, the vulnerability can be triggered when the Malware Protection Engine scans a downloaded file to check for threats. In many systems this is set to happen automatically for all new files.

     By exploiting a memory corruption error in the malware scanning tool, the attack file would be able to execute code on the target machine with `LocalSystem <https://msdn.microsoft.com/en-us/library/windows/desktop/ms684190(v=vs.85).aspx>`_ privileges.

#. `Fortinet VPN Client Exposes VPN Creds, Palo Alto Firewalls Allow Remote Attacks <https://www.bleepingcomputer.com/news/security/fortinet-vpn-client-exposes-vpn-creds-palo-alto-firewalls-allow-remote-attacks/>`_

#. `1.4 Billion Clear Text Credentials Discovered in a Single Database <https://medium.com/4iqdelvedeep/1-4-billion-clear-text-credentials-discovered-in-a-single-database-3131d0a1ae14>`_


Email tracking
--------------

From `How Email Open Tracking Quietly Took Over the Web <https://www.wired.com/story/how-email-open-tracking-quietly-took-over-the-web/>`_:

  The tech is pretty simple. Tracking clients embed a line of code in the body of an email—usually in a 1x1 pixel image, so tiny it's invisible, but also in elements like hyperlinks and custom fonts. When a recipient opens the email, the tracking client recognizes that pixel has been downloaded, as well as where and on what device. Newsletter services, marketers, and advertisers have used the technique for years, to collect data about their open rates; major tech companies like Facebook and Twitter followed suit in their ongoing quest to profile and predict our behavior online.

  According to OMC's data, a full 19 percent of all “conversational” email is now tracked. That’s one in five of the emails you get from your friends. And you probably never noticed.

  “Surprisingly, while there is a vast literature on web tracking, email tracking has seen little research,” noted an `October 2017 paper <https://senglehardt.com/papers/pets18_email_tracking.pdf>`_ published by three Princeton computer scientists. All of this means that billions of emails are sent every day to millions of people who have never consented in any way to be tracked, but are being tracked nonetheless.

  “I do not know of a single established sales team in [the online sales industry] that does not use some form of email open tracking,” says John-Henry Scherck, a content marketing pro and the principal consultant at Growth Plays. “I think it will be a matter of time before either everyone uses them,” Scherck says, “or major email providers block them entirely.”
  
  But marketing and online sales—even spammers—are no longer responsible for the bulk of the tracking. "Now, it’s the major tech companies," Seroussi says. "Amazon has been using them a lot, Facebook has been using them. Facebook is the number one tracker besides MailChimp." When Facebook sends you an email notifying you about new activity on your account, "it opens an app in background, and now Facebook knows where you are, the device you’re using, the last picture you’ve taken—they get everything."

  Both Amazon and Facebook "deeplink all of the clickable links within the email to trigger actions on their app running on your device," Seroussi says. "Depending on permissions set by the user, Facebook will have access to almost everything from Camera Roll, location, and many other logs that are hidden. But even if a user has disabled location permission on his device, email tracking will bypass this restriction and still provide Facebook with the user's location."

  This is what worries Bitdefender's Afloarei about malicious spammers who use trackers, too. “As for the dangers of being tracked in spam, one must keep in mind the kind of people that do the tracking, and the fact that they can find out your IP address and therefore your location or workplace,” he says. Just by watching you open your email, Afloarei says spammers can learn your schedule (“based on the time you check your email”), your itinerary (based on how you check mail at home, on the bus, or so on), and personal preferences (based on where they harvested the email; say, a sports forum, or a music fansite).

  There’s one more reason to be wary: Email tracking is evolving. `Research from October <https://senglehardt.com/papers/pets18_email_tracking.pdf>`_ looked at emails from newsletter and mailing list services from the 14,000 most popular websites on the web, and found that 85 percent contained trackers—and 30 percent leak your email addresses to outside corporations, without your consent.

  A host of anti-tracking services have sprung up to combat the rising tide of inbox tracers—from `Ugly Mail <https://uglyemail.com/>`_, to `PixelBlock <https://chrome.google.com/webstore/detail/pixelblock/jmpmfcjnflbcoidlgapblgpgbilinlem?hl=en>`_, to `Senders <https://sende.rs/>`_. `Ugly Mail notifies you <https://www.wired.com/2015/03/ugly-mail/>`_ when an email is carrying a tracking pixel, and PixelBlock prevents it from opening. Senders makes use of a similar product formerly known as Trackbuster, as part of service that displays info (Twitter, LinkedIn account, etc) about the sender of the email you’re reading. Using these services, I spotted more than a few acquaintances and even some contacts I consider friends using tracking in their correspondence.

  But even those methods aren't foolproof. Tracking methods are always evolving and improving, and finding ways around the current crop of track-blockers. “It’s a fight we’re having over the last couple of years,” Seroussi says. “They can’t counter all the methods that we know—so they get around the block by setting up new infrastructures. It’s a chase, they’re doing a job.”

  To prevent third-parties from leaking your email, meanwhile, Princeton’s Englehart says “the only surefire solution right now is to block images by default.” That is, turn on image-blocking in your email client, so you can’t receive any images at all.


Observatory website scanner
---------------------------


Observatory scoring
^^^^^^^^^^^^^^^^^^^

`Mozilla HTTP Observatory <https://github.com/mozilla/http-observatory>`_:

  The Mozilla HTTP Observatory is a set of tools to analyze your website and inform you if you are utilizing the many available methods to secure it.

  It is split into three projects:

  * `http-observatory <https://github.com/mozilla/http-observatory>`_ - scanner/grader
  * `observatory-cli <https://github.com/mozilla/observatory-cli>`_ - command line interface
  * `http-observatory-website <https://github.com/mozilla/http-observatory-website>`_ - web interface

See `HTTP Observatory Scoring Methodology <https://github.com/mozilla/http-observatory/blob/master/httpobs/docs/scoring.md>`_ for how websites are scored from 0 - 130. Also see `Security/Guidelines/Web Security <https://wiki.mozilla.org/Security/Guidelines/Web_Security>`_.


Running Observatory
^^^^^^^^^^^^^^^^^^^

`Mozilla HTTP Observatory <https://github.com/mozilla/http-observatory>`_:

  Sites can be scanned using:

  * `observatory.mozilla.org <https://observatory.mozilla.org/>`_ - the online interface

  * `observatory-cli <https://github.com/mozilla/observatory-cli>`_ - the official node.js command line interface

  * `java-http-observatory-api <https://github.com/stoennies/java-http-observatory-api>`_ - a third party java library and command line interface


Testing SBWASP website
^^^^^^^^^^^^^^^^^^^^^^

Prior to this presentation the 3 website copies of this site were given different degrees of modification to get different scores using Observatory:

#. `SBWASP at GitHub <https://sbwasp.github.io/>`_ scoring 35/100 or "D"

   Left as-is to get worst possible score. Note that adding HTTP headers is not possible, though adding ``<meta http-equiv="" content="" />`` can have a similar effect (which will be demonstrated using Cloudfront/S3).

   It lost the following points:

   #. Content Security Policy = -25 (worst possible -25)

   #. Subresource Integrity = -5 (worst possible -50) with https used to load external scripts (good thing)

   #. X-Content-Type-Options = -5 (worst possible)

   #. X-Frame-Options = -20 (worst possible)

   #. X-XSS-Protection = -10 (worst possible)

#. `SBWASP at Google App Engine <https://pentest-meetup.appspot.com/>`_ scoring 75/100 or "B"

   Google App Engine allows setting HTTP headers, so this was modified to maximize the score, lacking only:

   #. HTTP Content Security Policy = -20 vs +5 possible

      Sphinx requires unsafe-inline for script-src, which loses 25 points from the top score.

   #. HTTP Strict Transport Security = 0 vs +5 possible

      No `HSTS Preload <https://hstspreload.org/>`_ to bump up `HTTP Strict Transport Security <https://wiki.mozilla.org/Security/Guidelines/Web_Security#HTTP_Strict_Transport_Security>`_.

   #. Subresource Integrity = -5 vs +5 possible

      The automatically generated Sphinx code uses HTTPS to load remote scripts but not `Subresource Integrity <https://wiki.mozilla.org/Security/Guidelines/Web_Security#Subresource_Integrity>`_.

#. `SBWASP at AWS CloudFront/S3 <https://pentest-meetup.marengosystems.org/>`_ scoring 40/100 or "D"

   Cannot specify HTTP headers, but HTML modified to include ``<meta http-equiv="" content="" />`` records to mimic HTTP headers. It lost 35 points compared to the GAE version, all due to the meta http-equiv failed to produce the same results as the HTTP header:

   #. HTTP Strict Transport Security = -20 vs +5 possible (lost 20 vs GAE)

   #. X-Content-Type-Options = -5 vs 0 possible (lost 5 vs GAE)

      The meta http-equiv failed to mimic the HTTP header.

   #. X-XSS-Protection = -10 vs 0 (lost 10 vs GAE)

      The meta http-equiv failed to mimic the HTTP header.

Note that AWS CloudFront/S3 scored 90 but is listed as 70.


HTTP headers
^^^^^^^^^^^^

The added security came from HTTP headers, which were available on Google App Engine, but not AWS CloudFront/S3 nor GitHub. The ``<meta http-equiv="" content="" />`` element can specify the equivalent of some (but not all) of those HTTP headers. See `HTML 5.2, 14 December 2017 - 4.2.5.3 <https://www.w3.org/TR/html5/document-metadata.html#pragma-directives>`_ or `HTML 5.3 Editor’s Draft, 15 December 2017 - 4.2.5.3 <https://w3c.github.io/html/document-metadata.html#pragma-directives>`_ for a discussion of the draft HTML 5.3 http-equiv. In there it mentions processing of ``<meta http-equiv="content-security-policy" />``, where the ``report-uri``, ``frame-ancestors``, and ``sandbox`` policy directives are ignored. In fact we noticed the ``X-Content-Type-Options`` and more significantly ``Strict-Transport-Security`` were also ignored.

Here is the :file:`app.yaml` file to enable Google App Engine support for HTTP headers:

.. code-block:: jinja
  :emphasize-lines: 5-12

  handlers:
  - url: /html
    secure: always
    static_dir: html
    http_headers:
      X-Content-Type-Options: nosniff
      X-Frame-Options: deny
      X-XSS-Protection: 1; mode=block
      Referrer-Policy: strict-origin
      Strict-Transport-Security: max-age=31536000; includeSubDomains
      Access-Control-Allow-Origin: '*'
      Content-Security-Policy: default-src 'none'; script-src 'self' https://cdnjs.cloudflare.com 'unsafe-inline'; connect-src 'self'; img-src 'self'; style-src 'self'; font-src 'self'; form-action 'self'; frame-ancestors 'none'; base-uri 'self'

Generating the equivalent http-equiv HTML involves learning how Sphinx and reStructuredText allow http-equiv:

`reStructuredText Directives - Meta <http://docutils.sourceforge.net/docs/ref/rst/directives.html#meta>`_
  Describes the reStructuredText directives for meta http-equiv.

`Sphinx - The build configuration file - rst_prolog <http://www.sphinx-doc.org/en/stable/config.html#confval-rst_prolog>`_
  Describes the ``rst_prolog`` Sphinx directive for adding reStructuredText and the beginning of every source file

Combining these 2 documents we get the Sphinx :file:`conf.py` directive to add meta http-equiv header directives:

.. code-block:: python
  :emphasize-lines: 1-2,4,6,8,10,12,14,16

  # Add meta http-equiv replacements for HTTP headers.
  rst_prolog = """
  .. meta::
     :http-equiv=Content-Security-Policy: default-src 'none'; script-src 'self' https://cdnjs.cloudflare.com 'unsafe-inline'; connect-src 'self'; img-src 'self'; style-src 'self'; font-src 'self'; form-action 'self'; frame-ancestors 'none'; base-uri 'self'
  .. meta::
     :http-equiv=X-Content-Type-Options: nosniff
  .. meta::
     :http-equiv=X-Frame-Options: deny
  .. meta::
     :http-equiv=X-XSS-Protection: 1; mode=block
  .. meta::
     :http-equiv=Referrer-Policy: strict-origin
  .. meta::
     :http-equiv=Strict-Transport-Security: max-age=31536000; includeSubDomains
  .. meta::
     :http-equiv=Access-Control-Allow-Origin: '*'
  """

For more information about CSPs see `Content Security Policy (CSP) Quick Reference Guide <https://content-security-policy.com/>`_.

The actual HTTP headers from SBWASP at Google App Engine are:

.. code-block:: bash
  :emphasize-lines: 1,3,11-17

  hacker@kali:~$ curl -v -o /dev/null https://pentest-meetup.appspot.com/html/index.html
  ###################### SNIP ######################
  > GET /html/index.html HTTP/2
  > Host: pentest-meetup.appspot.com
  > User-Agent: curl/7.57.0
  > Accept: */*
  > 
  { [5 bytes data]
  * Connection state changed (MAX_CONCURRENT_STREAMS updated)!
  } [5 bytes data]
  < HTTP/2 200 
  < access-control-allow-origin: *
  < content-security-policy: default-src 'none'; script-src 'self' https://cdnjs.cloudflare.com 'unsafe-inline'; connect-src 'self'; img-src 'self'; style-src 'self'; font-src 'self'; form-action 'self'; frame-ancestors 'none'; base-uri 'self'
  < referrer-policy: strict-origin
  < strict-transport-security: max-age=31536000; includeSubDomains
  < x-content-type-options: nosniff
  < x-frame-options: deny
  < x-xss-protection: 1; mode=block
  < date: Fri, 15 Dec 2017 20:12:37 GMT
  < expires: Fri, 15 Dec 2017 22:12:37 GMT
  < cache-control: public, max-age=7200
  < etag: "6U-ivg"
  < x-cloud-trace-context: 28f642090e61dc7ced3e1a8ffab3d3f9
  < content-type: text/html
  < server: Google Frontend
  < alt-svc: hq=":443"; ma=2592000; quic=51303431; quic=51303339; quic=51303338; quic=51303337; quic=51303335,quic=":443"; ma=2592000; v="41,39,38,37,35"
  < 
  { [5 bytes data]
  100 23238    0 23238    0     0  23238      0 --:--:-- --:--:-- --:--:--  102k
  * Connection #0 to host pentest-meetup.appspot.com left intact

The meta http-equiv tags from AWS CloudFront/S3 are:

.. code-block:: bash
  :emphasize-lines: 1-

  hacker@kali:~$ curl -s https://pentest-meetup.appspot.com/html/index.html 2>&1 | grep 'http-equiv'
  <meta content="default-src 'none'; script-src 'self' https://cdnjs.cloudflare.com 'unsafe-inline'; connect-src 'self'; img-src 'self'; style-src 'self'; font-src 'self'; form-action 'self'; frame-ancestors 'none'; base-uri 'self'" http-equiv="Content-Security-Policy" />
  <meta content="nosniff" http-equiv="X-Content-Type-Options" />
  <meta content="deny" http-equiv="X-Frame-Options" />
  <meta content="1; mode=block" http-equiv="X-XSS-Protection" />
  <meta content="strict-origin" http-equiv="Referrer-Policy" />
  <meta content="max-age=15768000; includeSubDomains" http-equiv="Strict-Transport-Security" />
  <meta content="'*'" http-equiv="Access-Control-Allow-Origin" />

As noted earlier, not only were ``report-uri``, ``frame-ancestors``, and ``sandbox`` policy directives ignored, we noticed the ``X-Content-Type-Options`` and more significantly ``Strict-Transport-Security`` were also ignored. That caused significantly lower scores for static website hosting lacking HTTP headers.


Exploits this week
==================


Remotely opening a handgun safe
-------------------------------

`Top-selling handgun safe can be remotely opened in seconds—no PIN needed <https://arstechnica.com/information-technology/2017/12/top-selling-handgun-safe-can-be-remotely-opened-in-seconds-no-pin-needed/>`_ is detailed in `BlueSteal: Popping GATT Safes <https://www.twosixlabs.com/bluesteal-popping-gatt-safes/>`_:

    * **The Fun Vulnerability** – The manufacturer’s Android application allows for unlimited pairing attempts with the safe.  The pairing pin code is the same as the unlocking pin code. This allows for an attacker to identify the shared pincode by repeated brute force pairing attempts to the safe.

    * **The Really Fun Vulnerability- CVE-2017-17436** – There is no encryption between the Android phone app and the safe. The application transmits the safe’s pin code in clear text after successfully pairing. The website and marketing materials advertise that this communication channel is encrypted with “Highest Level Bluetooth Encryption” and “Data transmissions are secure via AES256 bit encryption”. However these claims are not true. AES256 bit encryption is not supported in the Bluetooth LE standard and we have not seen evidence of its usage in higher layers.  AES-128 is supported in Bluetooth LE, but the manufacturer is not using that either. This lack of encryption allows an individual to learn the passcode by eavesdropping on the communications between the application and the safe.

    * **The ‘How Does This Even Happen?’ Vulnerability- CVE-2017-17435** – An attacker can remotely unlock any safe in this product line through specially formatted Bluetooth messages, even with no knowledge of the pin code. The phone application requires the valid pin to operate the safe, and there is a field to supply the pin code in an authorization request. However **the safe does not verify the pin code**, so an attacker can obtain authorization and unlock the safe using any arbitrary value as the pin code.


TRITON
------

From `Attackers Deploy New ICS Attack Framework “TRITON” and Cause Operational Disruption to Critical Infrastructure <https://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html>`_:

  `Mandiant <https://www.fireeye.com/services.html>`_ recently responded to an incident at a critical infrastructure organization where an attacker deployed malware designed to manipulate industrial safety systems. The targeted systems provided emergency shutdown capability for industrial processes. We assess with moderate confidence that the attacker was developing the capability to cause physical damage and inadvertently shutdown operations. This malware, which we call TRITON, is an attack framework built to interact with Triconex Safety Instrumented System (SIS) controllers. We have not attributed the incident to a threat actor, though we believe the activity is consistent with a nation state preparing for an attack.

  The attacker deployed TRITON shortly after gaining access to the SIS system, indicating that they had pre-built and tested the tool which would require access to hardware and software that is not widely available. TRITON is also designed to communicate using the proprietary TriStation protocol which is not publicly documented suggesting the adversary independently reverse engineered this protocol.

  The targeting of critical infrastructure to disrupt, degrade, or destroy systems is consistent with numerous attack and reconnaissance activities carried out globally by Russian, Iranian, North Korean, U.S., and Israeli nation state actors. Intrusions of this nature do not necessarily indicate an immediate intent to disrupt targeted systems, and may be preparation for a contingency.

  We assess with moderate confidence that the attacker’s long-term objective was to develop the capability to cause a physical consequence. We base this on the fact that the attacker initially obtained a reliable foothold on the DCS and could have developed the capability to manipulate the process or shutdown the plant, but instead proceeded to compromise the SIS system. Compromising both the DCS and SIS system would enable the attacker to develop and carry out an attack that causes the maximum amount of damage allowed by the physical and mechanical safeguards in place.

Some terms:

DCS
  Distributed Control System

  A Distributed Control System (DCS) provides human operators with the ability to remotely monitor and control an industrial process.

ICS
  Industrial Control System

OT
  Operational Technology

SIS
  Safety Instrumented System

  A SIS is an autonomous control system that independently monitors the status of the process under control. If the process exceeds the parameters that define a hazardous state, the SIS attempts to bring the process back into a safe state or automatically performs a safe shutdown of the process.

Attack methods:

  Attack Option 1: Use the SIS to shutdown the process

  Attack Option 2: Reprogram the SIS to allow an unsafe state

  Attack Option 3: Reprogram the SIS to allow an unsafe state – while using the DCS to create an unsafe state or hazard


The ROBOT Attack
----------------

From `The ROBOT Attack <https://robotattack.org/>`_:

  **The Vulnerability**

  ROBOT is the return of a 19-year-old vulnerability that allows performing RSA decryption and signing operations with the private key of a TLS server.

  In 1998, Daniel Bleichenbacher discovered that the error messages given by SSL servers for errors in the PKCS #1 1.5 padding allowed an adaptive-chosen ciphertext attack; this attack fully breaks the confidentiality of TLS when used with RSA encryption.

  We discovered that by using some slight variations this vulnerability can still be used against many HTTPS hosts in today's Internet.

Facebook was vulnerable as shown by this script:

.. code-block:: bash
  :emphasize-lines: 1,3,5

  echo 799e4353 5a4da709 80fada33 d0fbf51a e60d32c1 115c87ab 29b716b4 9ab06377 33f92fc9 85f280fa 569e41e2 847b09e8 d028c0c2 a42ce5be eb640c10 1d5cf486 cdffc5be 116a2d5b a36e52f4 195498a7 8427982d 50bb7d9d 938ab905 40756535 8b1637d4 6fbb60a9 f4f093fe 58dbd251 2cca70ce 842e74da 078550d8 4e6abc83 ef2d7e72 ec79d7cb 2014e7bd 8debbd1e 313188b6 3a2a6aec 55de6f56 ad49d32a 1201f180 82afe3b4 edf02ad2 a1bce2f5 7104f387 f3b8401c 5a7a8336 c80525b0 b83ec965 89c36768 5205623d 2dcdbe14 66701dff c6e768fb 8af1afdb e0a1a626 54f3fd08 175069b7 b198c471 95b63083 9c663321 dc5ca39a bfb45216 db7ef837 | xxd -r -p > sig

  curl https://crt.sh/?d=F709E83727385F514321D9B2A64E26B1A195751BBCAB16BE2F2F34EBB084F6A9|openssl x509 -noout -pubkey > pubkey.key

  openssl rsautl -verify -pubin -inkey pubkey.key -in sig
