.. include:: /pentest_links.txt


*******************
2017-09-23 nftables
*******************


Links and updates this week
===========================


:program:`nftables`
-------------------

See :ref:`nftables`.


``bash`` complexity and IPv6 routing
------------------------------------

See added sections :ref:`bash-complexity` and :ref:`ipv6-routing`.


Free Electrons
--------------

See `Free Electrons Docs <http://free-electrons.com/docs/>`_ for

  Free training materials and conference presentations from Free Electrons, covering kernel, real-time, Android, embedded Linux system and device driver development.

You can also browse the Linux kernel source, e.g. `Free Electrons linux /include/net/netfilter <http://elixir.free-electrons.com/linux/v4.13.3/source/include/net/netfilter>`_ and `Free Electrons linux /net/netfilter <http://elixir.free-electrons.com/linux/v4.13/source/net/netfilter>`_.


`Lunix Audit <https://linux-audit.com/>`_
-----------------------------------------

Besides the `Beginners Guide to nftables Traffic Filtering <https://linux-audit.com/nftables-beginners-guide-to-traffic-filtering/>`_ they have `Linux Security <https://linux-audit.com/linux-security/>`_ and `Lynis <https://linux-audit.com/lynis/>`_ (their open source Linux, Mac OS X, and Unix system and security auditing tool).


Metasploit Unleashed - Free Ethical Hacking Course
--------------------------------------------------

See `Metasploit Unleashed - Free Ethical Hacking Course <https://www.offensive-security.com/metasploit-unleashed/>`_ ("we ask that you **make a donation** to the Hackers For Charity non-profit 501(c)(3) organization ").


Complexity links
----------------

In the past we've talked about complexity and bad design, especially :ref:`php-mysql-shortcomings`. Note that the PHP language has changed over time, with `php Supported Versions <http://php.net/supported-versions.php>`_ showing the last PHP5 version is 5.6 with active support already ended 19 Jan 2017 and security support ending 31 Dec 2018.

Now we'll add JavaScript to our complexity list:

* PHP

  `PHP: a fractal of bad design <https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/>`_

* MySQL

  `Do Not Pass This Way Again <https://grimoire.ca/mysql/choose-something-else>`_

* JavaScript

  `How it feels to learn JavaScript in 2016 <https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f>`_

  `Why JavaScript Development is Crazy <http://www.planningforaliens.com/blog/2016/04/11/why-js-development-is-crazy/>`_

  `It's The Future <https://circleci.com/blog/its-the-future/>`_.

  Google `javascript fatigue <https://www.google.com/search?q=javascript+fatigue>`_.

  Also see `JavaScript Stack from Scratch <https://github.com/verekia/js-stack-from-scratch>`_, `What are examples of a full stack web developer's "stack"? <https://www.quora.com/What-are-examples-of-a-full-stack-web-developer%E2%80%99s-stack>`_, comment starting with "Grunt > Gulp > Webpack ..." in `Hacker News | Step-by-step tutorial to build a modern JavaScript stack from scratch <https://news.ycombinator.com/item?id=12823937>`_

  On a more positive note see: `State of the JavaScript Landscape: A Map for Newcomers <https://www.infoq.com/articles/state-of-javascript-2016>`_, `The Hitchhiker's Guide to Modern JavaScript Tooling <http://reactkungfu.com/2015/07/the-hitchhikers-guide-to-modern-javascript-tooling/>`_, and `State of the Art JavaScript in 2016 <https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b>`_.


`Penetration Testing Execution Standard`_
-----------------------------------------

From `Penetration Testing Execution Standard - the FAQ`_:

  It is a new standard designed to provide both businesses and security service providers with a common language and scope for performing penetration testing (i.e. Security evaluations). It started early in 2009 following a discussion that sparked between some of the founding members over the value (or lack of) of penetration testing in the industry.

They also provide a `Penetration Testing Execution Standard - mindmap`_ (FreeMind) for the project.

There's an alternative documentation format at `The Penetration Testing Execution Standard - Read the Docs`_.


Exploits this week
==================


CCleanup
--------

From `CCleanup: A Vast Number of Machines at Risk <http://blog.talosintelligence.com/2017/09/avast-distributes-malware.html>`_:

  For a period of time, the legitimate signed version of CCleaner 5.33 being distributed by Avast also contained a multi-stage malware payload that rode on top of the installation of CCleaner. CCleaner boasted over 2 billion total downloads by November of 2016 with a growth rate of 5 million additional users per week.

  ...

  During the installation of CCleaner 5.33, the 32-bit CCleaner binary that was included also contained a malicious payload that featured a Domain Generation Algorithm (DGA) as well as hardcoded Command and Control (C2) functionality. We confirmed that this malicious version of CCleaner was being hosted directly on CCleaner's download server as recently as September 11, 2017.

  ...

  In reviewing the Version History page on the CCleaner download site, it appears that the affected version (5.33) was released on August 15, 2017. On September 12, 2017 version 5.34 was released. The version containing the malicious payload (5.33) was being distributed between these dates.

  ...

  Given the presence of this compilation artifact as well as the fact that the binary was digitally signed using a valid certificate issued to the software developer, it is likely that an external attacker compromised a portion of their development or build environment and leveraged that access to insert malware into the CCleaner build that was released and hosted by the organization. It is also possible that an insider with access to either the development or build environments within the organization intentionally included the malicious code or could have had an account (or similar) compromised which allowed an attacker to include the code.

The article goes into detail on how the malware operates. From a follow-up article `CCleaner Command and Control Causes Concern <http://blog.talosintelligence.com/2017/09/ccleaner-c2-concern.html>`_:

  In analyzing the delivery code from the C2 server, what immediately stands out is a list of organizations, including Cisco, that were specifically targeted through delivery of a second-stage loader. Based on a review of the C2 tracking database, which only covers four days in September, we can confirm that at least 20 victim machines were served specialized secondary payloads. Below is a list of domains the attackers were attempting to target.

  .. code-block:: javascript

    $DomainList = array(
    "singtel.corp.root",
    "htcgroup.corp",
    "samsung-breda",
    "Samsung",
    "SAMSUNG.SEPM",
    "samsung.sk",
    "jp.sony.com",
    "am.sony.com",
    "gg.gauselmann.com",
    "vmware.com",
    "ger.corp.intel.com",
    "amr.corp.intel.com",
    "ntdev.corp.microsoft.com",
    "cisco.com",

    "uk.pri.o2.com",
    "vf-es.internal.vodafone.com",

    "linksys",
    "apo.epson.net",
    "msi.com.tw",
    "infoview2u.dvrdns.org",
    "dfw01.corp.akamai.com",
    "hq.gmail.com",
    "dlink.com",

    "test.com");

The article contains more information about the CC server.


SEC's EDGAR breaches
--------------------

`EDGAR <https://en.wikipedia.org/wiki/EDGAR>`_ "the **Electronic Data Gathering, Analysis, and Retrieval** system, performs automated collection, validation, indexing, acceptance, and forwarding of submissions by companies and others who are required by law to file forms with the `U.S. Securities and Exchange Commission <https://en.wikipedia.org/wiki/U.S._Securities_and_Exchange_Commission>`_ (the "SEC"). The database is freely available to the public via the Internet (HTTPS)."

`U.S. Securities and Exchange Commission - Public Statement - Statement on Cybersecurity <https://www.sec.gov/news/public-statement/statement-clayton-2017-09-20>`_ Section *I. Collection and Use of Data by the Commision* identified the category of data:

  The first category of data includes public-facing data that is transmitted to and accessed through Commission systems. ... In 2017, on a typical day, investors and other market participants access more than 50 million pages of disclosure documents through the EDGAR system, which receives and processes over 1.7 million electronic filings per year.

  ...

  The second category of data the Commission receives, stores and transmits includes nonpublic information, including personally identifiable information, generally related to our supervisory and enforcement functions.

  ...

  The third category of data includes nonpublic data, including personally identifiable information, related to the Commission's internal operations.

`U.S. Securities and Exchange Commission - Public Statement - Statement on Cybersecurity <https://www.sec.gov/news/public-statement/statement-clayton-2017-09-20>`_ Section *II. Management of Internal Cybersecurity Risks* identified several security breaches: 

  In August 2017, the Commission learned that an incident previously detected in 2016 may have provided the basis for illicit gain through trading.  Specifically, a software vulnerability in the test filing component of our EDGAR system, which was patched promptly after discovery, was exploited and resulted in access to nonpublic information.  We believe the intrusion did not result in unauthorized access to personally identifiable information, jeopardize the operations of the Commission, or result in systemic risk.  Our investigation of this matter is ongoing, however, and we are coordinating with appropriate authorities.  As another example, our Division of Enforcement has investigated and filed cases against individuals who we allege placed fake SEC filings on our EDGAR system in an effort to profit from the resulting market movements.[`3 <https://www.sec.gov/news/press-release/2017-107>`_]

  ... a 2014 internal review by the SEC's Office of Inspector General ("OIG"), an independent office within the agency, found that certain SEC laptops that may have contained nonpublic information could not be located.[`4 <https://www.sec.gov/files/524.pdf>`_]  The OIG also has found instances in which SEC personnel have transmitted nonpublic information through non-secure personal email accounts.[`5 <https://www.sec.gov/files/Inspector%20General%27s%20Statement%20on%20the%20SEC%27s%20Management%20and%20Performance%20Challenges.pdf>`_]  We seek to mitigate this risk by requiring all personnel to complete privacy and security training and we have other relevant risk mitigation controls in place.

  

`CVE-2017-9798 <https://nvd.nist.gov/vuln/detail/CVE-2017-9798>`_ Optionsbleed
------------------------------------------------------------------------------

From `Optionsbleed - HTTP OPTIONS method can leak Apache's server memory <https://blog.fuzzing-project.org/60-Optionsbleed-HTTP-OPTIONS-method-can-leak-Apaches-server-memory.html>`_:

  **What's Optionsbleed?**

  Optionsbleed is a use after free error in Apache HTTP that causes a corrupted Allow header to be constructed in response to HTTP OPTIONS requests. This can leak pieces of arbitrary memory from the server process that may contain secrets. The memory pieces change after multiple requests, so for a vulnerable host an arbitrary number of memory chunks can be leaked.

  The bug appears if a webmaster tries to use the "Limit" directive with an invalid HTTP method.

  Example .htaccess:

  .. code-block:: apacheconf

    <Limit abcxyz>
    </Limit>

  **Is this as bad as Heartbleed?**

  No. Although similar in nature, this bug leaks only small chunks of memory and more importantly only affects a small number of hosts by default.

  It's still a pretty bad bug, particularly for shared hosting environments.

See `hannob/optionsbleed <https://github.com/hannob/optionsbleed>`_ for a POC.


Bashware
--------

From `Beware of the Bashware: A New Method for Any Malware to Bypass Security Solutions <https://research.checkpoint.com/beware-bashware-new-method-malware-bypass-security-solutions/>`_:

  Bashware is a generic and cross platform technique that uses WSL in order to allow running both ELF an EXE malicious payloads in a stealthy manner that could bypass most current security solutions.

Bashware has 4 steps:

#. Load WSL (Windows Subsystem for Linux)

#. Enable developer mode (needs local admin)

#. Install Linux via ``Lxrun /install``.

#. Run ``wine``.


   This is exactly what we needed in order to make a Windows malware run from the WSL environment, turning it invisible as well. Bashware uses the Winehq project capabilities and installs a pre-optimized wine project into the WSL Linux environment.
   
  Next, EXE formats need to be converted by Wine, turning its NT syscalls to POSIX syscalls. Later on, the Pico provider (lxcore.sys) will convert these POSIX syscalls back to NT syscalls, turning lxcore to the actual caller of this process. This way, a file running on the Windows OS can execute any known malicious payload from the Linux OS, where it remains hidden from most security products.

  Bashware does not leverate any logic or implementation flaws in WSL's design. In fact, WSL seems to be well designed. What allows Bashware to operate the way it does is the lack of awareness by various security vendors, due to the fact that this technology is relatively new and expands the known borders of the Windows operating system.


`Pytosquatting <https://www.pytosquatting.org/>`_
-------------------------------------------------

Anyone can upload packages to `PyPI <https://pypi.python.org/pypi>`_. While packages can be signed with the uploader's GPG key (or not - see `PyPI Security <https://pypi.python.org/security>`_), that key is not guaranteed to represent any additional security (without a web of trust to validate that key).

Pytosquating includes two types of uploaded packages:

typosquatting
  Upload packages representing misspellings of common packages.

namesquatting
  Upload packages representing packages included in Python (stdlib).


A fix to this problem is being considered. (See the quoted response at the bottom of `Devs unknowingly use "malicious" modules snuck into official Python repository <https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/>`_).


`BlueBorne <http://go.armis.com/hubfs/BlueBorne%20Technical%20White%20Paper.pdf>`_
----------------------------------------------------------------------------------

BlueBorne resulted in 8 CVE's:

#. `CVE-2017-0781 <https://nvd.nist.gov/vuln/detail/CVE-2017-0781>`_ - Android RCE

#. `CVE-2017-0782 <https://nvd.nist.gov/vuln/detail/CVE-2017-0782>`_ - Android RCE

#. `CVE-2017-0783 <https://nvd.nist.gov/vuln/detail/CVE-2017-0783>`_ - Android info disclosure

#. `CVE-2017-0785 <https://nvd.nist.gov/vuln/detail/CVE-2017-0785>`_ - Android info disclosure

#. `CVE-2017-8628 <https://nvd.nist.gov/vuln/detail/CVE-2017-8628>`_ - MS Bluetooth Driver spoofing

#. `CVE-2017-14315 <https://nvd.nist.gov/vuln/detail/CVE-2017-14315>`_ - iOS 7-9 heap overflow

#. `CVE-2017-1000250 <https://nvd.nist.gov/vuln/detail/CVE-2017-1000250>`_ - Linux info disclosure

#. `CVE-2017-1000251 <https://nvd.nist.gov/vuln/detail/CVE-2017-1000251>`_ - Linux kernel RCE

From `BlueBorne <http://go.armis.com/hubfs/BlueBorne%20Technical%20White%20Paper.pdf>`_:

  Bluetooth is complicated. Too complicated. ... Just to illustrate this point: while the WiFi specification (802.11) is only 450 pages long, the Bluetooth specification reaches 2822 pages.

  Bluetooth's complexity kept researchers from auditing its implementations at the same level of scrutiny that other highly exposed protocols, and outward-facing interfaces have been treated with.

The article contains detailed code analysis worthy of further study.

From `Billions of devices imperiled by new clickless Bluetooth attack <https://arstechnica.com/information-technology/2017/09/bluetooth-bugs-open-billions-of-devices-to-attacks-no-clicking-required/>`_:

  Virtually any Android, Linux, or Windows device that hasn't been recently patched and has Bluetooth turned on can be compromised by an attacking device within 32 feet. It doesn't require device users to click on any links, connect to a rogue Bluetooth device, or take any other action, short of leaving Bluetooth on. The exploit process is generally very fast, requiring no more than 10 seconds to complete, and it works even when the targeted device is already connected to another Bluetooth-enabled device.

The Ars Technica article also references 3 attack videos.


aIR-Jumper
----------

From `aIR-Jumper: Covert Air-Gap Exfiltration/Infiltration via Security Cameras & Infrared (IR) <https://arxiv.org/pdf/1709.05742.pdf>`_:

  In this paper, we show how attackers can use surveillance cameras and infrared light to establish bi-directional covert communication between the internal networks of organizations and remote attackers. We present two scenarios: exfiltration (leaking data out of the network) and infiltration (sending data into the network).
  
