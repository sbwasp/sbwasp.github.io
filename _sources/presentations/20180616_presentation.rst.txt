.. include:: /pentest_links.txt


*********************************************
2018-06-16 Links, VMs/Containers, and AES/SHA
*********************************************


Links and updates this week
===========================


Links around the web
--------------------


Cloud
^^^^^

#. `The internet is finally going to be bigger than TV worldwide <https://qz.com/1303375/internet-usage-will-finally-surpass-tv-in-2019-zenith-predicts/>`_


Tech
^^^^

#. `Another day, another Intel CPU security hole: Lazy State <https://www.zdnet.com/article/another-day-another-intel-cpu-security-hole-lazy-state/>`_ and Intel's `Lazy FP state restore <https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00145.html>`_

#. `Microsoft June 2018 Patch Tuesday Pushes 11 Critical Security Updates <https://thehackernews.com/2018/06/microsoft-june-security-patch.html>`_

   `Windows security: Here's why we don't fix some bugs right away, Microsoft reveals <https://www.zdnet.com/article/windows-security-heres-why-we-dont-fix-some-bugs-right-away-microsoft-reveals/>`_ and `Microsoft Security Servicing Commitments <https://msdnshared.blob.core.windows.net/media/2018/06/Microsoft-Security-Servicing-Commitments_SRD.pdf>`_

#. `Google disables inline installation for Chrome extensions <https://venturebeat.com/2018/06/12/google-disables-inline-installation-for-chrome-extensions/>`_ and `Using Inline Installation <https://developer.chrome.com/webstore/inline_installation>`_

#. `Hundreds of Thousands of Windows XP Users Won't Be Able to Use Steam Soon <https://motherboard.vice.com/en_us/article/d3kkmw/steam-on-windows-xp-valve-new-features>`_


Tools
^^^^^

#. `RegExr <https://regexr.com/>`_

#. `House - Dynamic Mobile Analysis Tool <https://github.com/nccgroup/house>`_


Study links
^^^^^^^^^^^

#. `Cookies for dummies: Part 1 basic concepts <https://www.wst.space/understanding-cookies-1/>`_, `Cookies for dummies Part 2: Third-party tracking cookie <https://www.wst.space/understanding-cookies-2/>`_, and `Cookies for dummies Part 3: Understanding security flags – Secure, HttpOnly and SameSite <https://www.wst.space/cookies-samesite-secure-httponly/>`_

#. `Server-Side Spreadsheet Injection – Formula Injection to Remote Code Execution <https://www.bishopfox.com/blog/2018/06/server-side-spreadsheet-injections/>`_

#. `#BugBounty - ” Database hacked of India’s Popular Sports company” - Bypassing Host Header to SQL injection to dumping Database - An unusual case of SQL injection <http://insecureweb.blogspot.com/2018/06/bugbounty-database-hacked-of-indias.html>`_

#. `Reflected Client XSS at Amazon.com <https://medium.com/@jonathanbouman/reflected-client-xss-amazon-com-7b0d3cec787>`_

#. `MysteryBot; a new Android banking Trojan ready for Android 7 and 8 <https://www.threatfabric.com/blogs/mysterybot__a_new_android_banking_trojan_ready_for_android_7_and_8.html>`_

#. `Marshalling to SYSTEM - An analysis of CVE-2018-0824 <https://codewhitesec.blogspot.com/2018/06/cve-2018-0624.html>`_

#. `kubectl-rbac RBAC Walkthrough <https://github.com/octarinesec/kubectl-rbac/blob/master/examples/rbac_walkthrough.md>`_

#. `Siaberry's Command Injection Vulnerability <https://blog.spaceduck.io/siaberry-1/>`_ and `The Many Other Reasons to Avoid Siaberry <https://blog.spaceduck.io/siaberry-2/>`_

#. `phpMyAdmin 4.7.x XSRF/CSRF Vulnerability (PMASA-2017-9) Exploit <http://blog.vulnspy.com/2018/06/12/phpMyAdmin-4-7-x-XSRF-CSRF-vulnerability-PMASA-2017-9-exploit/>`_

#. `Firefox uXSS and CSS XSS <https://leucosite.com/Firefox-uXSS-and-CSS-XSS/>`_

#. `Evil Teacher: Code Injection in Moodle <https://blog.ripstech.com/2018/moodle-remote-code-execution/>`_

#. `The Tale of SettingContent-ms Files <https://posts.specterops.io/the-tale-of-settingcontent-ms-files-f1ea253e4d39?gi=3e665e519c6f>`_

#. `LuckyMouse hits national data center to organize country-level waterholing campaign <https://securelist.com/luckymouse-hits-national-data-center/86083/>`_

#. `Root Bridge — how thousands of internet connected Android devices now have no security, and are being exploited by criminals <https://doublepulsar.com/root-bridge-how-thousands-of-internet-connected-android-devices-now-have-no-security-and-are-b46a68cb0f20?gi=888f645aab9c>`_

#. `Totally Pwning the Tapplock Smart Lock <https://www.pentestpartners.com/security-blog/totally-pwning-the-tapplock-smart-lock/>`_ and `Totally Pwning the Tapplock Smart Lock (the API way) <https://medium.com/@evstykas/totally-pwning-the-tapplock-smart-lock-the-api-way-c8d89915f025>`_

#. `MirageFox: APT15 Resurfaces With New Tools Based On Old Ones <https://www.intezer.com/miragefox-apt15-resurfaces-with-new-tools-based-on-old-ones/>`_

#. `From Secure Messaging to Secure Collaboration <http://martin.kleppmann.com/2018/03/20/security-protocols-workshop.html>`_

#. `Return of the Hidden Number Problem <https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/2018/rohnp-return-of-the-hidden-number-problem.pdf>`_

#. `PENTESTER’S WINDOWS NTFS TRICKS COLLECTION <https://sec-consult.com/en/blog/2018/06/pentesters-windows-ntfs-tricks-collection/>`_

#. `How I Found CVE-2018-8819: Out-of-Band (OOB) XXE in WebCTRL <https://www.coalfire.com/Solutions/Coalfire-Labs/The-Coalfire-LABS-Blog/june-2018/how-i-found-cve-2018-8819-out-of-band-(oob)-xxe>`_

#. `SigSpoof: Spoofing signatures in GnuPG, Enigmail, GPGTools and python-gnupg (CVE-2018-12020) <https://neopg.io/blog/gpg-signature-spoof/>`_ and `Decades-old PGP bug allowed hackers to spoof just about anyone’s signature <https://arstechnica.com/information-technology/2018/06/decades-old-pgp-bug-allowed-hackers-to-spoof-just-about-anyones-signature/>`_ 

#. `Vulnerability disclosure – Cisco Meeting Server (CMS) arbitrary TCP relaying <https://www.immunit.ch/blog/2018/05/31/vulnerability-disclosure-cisco-meeting-server-arbitrary-tcp-relaying/>`_

#. `How Machine Learning Techniques Helped Us Find Massive Certificate Abuse by BrowseFox <https://blog.trendmicro.com/trendlabs-security-intelligence/how-machine-learning-techniques-helped-us-find-massive-certificate-abuse-by-browsefox/>`_


Privacy links
^^^^^^^^^^^^^

#. `FBI recovers WhatsApp, Signal data stored on Michael Cohen’s BlackBerry <https://arstechnica.com/information-technology/2018/06/fbi-recovered-hundreds-of-encrypted-messages-from-michael-cohens-phone/>`_


Cultural/Legal/Political
^^^^^^^^^^^^^^^^^^^^^^^^

#. `Adam Putnam’s office stopped reviewing concealed weapons background checks for a year because it couldn’t log in <http://www.tampabay.com/florida-politics/buzz/2018/06/08/adam-putnams-office-stopped-concealed-weapons-background-checks-for-a-year-because-it-couldnt-log-in/>`_

   The employee in charge of the background checks could not log into the system, the investigator learned. The problem went unresolved until discovered by another worker in March 2017 — meaning that for more than a year applications got approved without the required background check.

#. `In a blow to e-voting critics, Brazil suspends use of all paper ballots <https://arstechnica.com/tech-policy/2018/06/in-a-blow-to-e-voting-critics-brazil-suspends-use-of-all-paper-ballots/>`_

#. `U.S. sanctions Russians over military, intelligence hacking <https://www.reuters.com/article/us-usa-russia-sanctions/u-s-sanctions-russians-over-military-intelligence-hacking-idUSKBN1J71T5>`_

#. `Facebook responds in writing to Congress' questions from Zuckerberg's testimony <https://www.cnet.com/news/facebook-responds-to-congress-questions-from-zuckerbergs-testimony/>`_ and `Facebook response to U.S. Senate Committee on Commerce, Science, and Transportation <https://www.commerce.senate.gov/public/_cache/files/9d8e069d-2670-4530-bcdc-d3a63a8831c4/7C8DE61421D13E86FC6855CC2EA7AEA7.senate-commerce-committee-combined-qfrs-06.11.2018.pdf>`_ (or `Here are 454 pages of Facebook's written follow-up answers to Congress <https://techcrunch.com/2018/06/11/facebook-congress-answers-senate/>`_

#. `Cybercrime is costing Africa’s businesses billions <https://qz.com/1303532/cybercrime-costs-businesses-in-kenya-south-africa-nigeria-billions/>`_

#. `Yahoo! fined £250,000 after systemic failures put customer data at risk <https://ico.org.uk/about-the-ico/news-and-events/news-and-blogs/2018/06/yahoo-fined-250-000-after-systemic-failures-put-customer-data-at-risk/>`_ and `UK! watchdog! slaps! Yahoo! with! £250k! fine! for! 2014! data! breach! <https://www.theregister.co.uk/2018/06/12/yahoo_250k_ico_fine/>`_

#. `74 Arrested in Coordinated International Enforcement Operation Targeting Hundreds of Individuals in Business Email Compromise Schemes <https://www.justice.gov/opa/pr/74-arrested-coordinated-international-enforcement-operation-targeting-hundreds-individuals>`_


Hacking links
^^^^^^^^^^^^^

#. `Backdoored images downloaded 5 million times finally removed from Docker Hub <https://arstechnica.com/information-technology/2018/06/backdoored-images-downloaded-5-million-times-finally-removed-from-docker-hub/>`_ and `Cryptojacking invades cloud. How modern containerization trend is exploited by attackers <https://kromtech.com/blog/security-center/cryptojacking-invades-cloud-how-modern-containerization-trend-is-exploited-by-attackers>`_

#. `Bitcoin’s Price Was Artificially Inflated, Fueling Skyrocketing Value, Researchers Say <https://www.nytimes.com/2018/06/13/technology/bitcoin-price-manipulation.html>`_

#. `Cortana Hack Lets You Change Passwords on Locked PCs <https://www.bleepingcomputer.com/news/security/cortana-hack-lets-you-change-passwords-on-locked-pcs/>`_

#. `Android Malware Worm that mines Cryptocurrency is infecting Amazon Fire TV and Fire TV Stick devices <http://www.aftvnews.com/android-malware-worm-that-mines-cryptocurrency-is-infecting-amazon-fire-tv-and-fire-tv-stick-devices/>`_

#. `For almost 11 years, hackers could easily bypass 3rd-party macOS signature checks <https://arstechnica.com/information-technology/2018/06/simple-technique-bypassed-macos-signature-checks-by-third-party-tools/>`_

#. `Cryptocurrencies Lose $42 Billion After South Korean Bourse Hack <https://www.bloomberg.com/news/articles/2018-06-10/bitcoin-tumbles-most-in-two-weeks-amid-south-korea-exchange-hack>`_

#. `Hackers Crashed a Bank’s Computers While Attempting a SWIFT Hack <https://www.bleepingcomputer.com/news/security/hackers-crashed-a-bank-s-computers-while-attempting-a-swift-hack/>`_

#. `Hackers Stole Over $20 Million From Misconfigured Ethereum Clients <https://www.bleepingcomputer.com/news/security/hackers-stole-over-20-million-from-misconfigured-ethereum-clients/>`_

#. `Dixons Carphone suffers two major security breaches exposing customers' bank card details and personal information <https://betanews.com/2018/06/13/dixons-carphone-security-breach/>`_


Study this week
===============


Choosing a VM
-------------


VM options
^^^^^^^^^^

We looked at the following options:

.. list-table:: VM Options
   :widths: auto
   :header-rows: 1

   *
     - Virtual Machine
     - GB Memory
     - CPU
     - Monthly Cost
     - Hourly Cost
     - Min Cost
     - Cost Resolution
   *
     - Google Cloud Shell g1-small
     - 1.7
     - 0.5
     - free
     - free
     - free
     - free
   *
     - GCE f1-micro
     - 0.5
     - 0.2
     - $3.88
     - $0.0076
     - minute
     - second
   *
     - Linode g6-nanode-1
     - 1
     - 1
     - $5.00
     - $0.0075
     - hour
     - hour
   *
     - Linode g6-standard-2
     - 4
     - 2
     - $20.00
     - $0.03
     - hour
     - hour
   *
     - GCE n1-standard-1
     - 4
     - 1
     - $24.27
     - $0.0475
     - minute
     - second

Since the `Google Cloud Shell <https://cloud.google.com/shell/>`_ is probably the least-known, we'll provide more information on it. It's free for anyone with a Google mail account at `Google Cloud Shell for gmail users <https://console.cloud.google.com/cloudshell/editor?supportedpurview=project&shellonly=true>`_. The shell runs in the browser with 5 GB of persistent home directory storage. The VM has these `Cloud Shell Features <https://cloud.google.com/shell/docs/features>`_ and `Cloud Shell Limitations <https://cloud.google.com/shell/docs/limitations>`_:

* Debian Stretch (currently 9.4)

* 1.7 GB memory (g1-small)

* 5 GB disk

* Lots of apps already installed: ``docker``, ``vim``, ``emacs``, ``java``, ``git``, ``hg``, ``dot``, ...

* Significant limitations

  - Termination - only $HOME persists, modifications outside $HOME are not persisted

  - Intended for interactive use only - non-interactive sessions ended automatically

  - Prolonged usage or computational or network intensive processes are not supported and may result in session termination without a warning

  - Home disk deleted after 120 days of non-access, but get warning email to avoid via access

See also `Cloud Shell Documentation <https://cloud.google.com/shell/docs/>`_ including `Cloud Shell Examples <https://cloud.google.com/shell/docs/examples>`_, `Quickstart for Docker <https://cloud.google.com/container-builder/docs/quickstart-docker>`_, `Cloud Shell - Using Web Preview <https://cloud.google.com/shell/docs/using-web-preview>`_, 


Performance loads
^^^^^^^^^^^^^^^^^

We tested using these 2 loads:

* Sphinx

  Build this website's HTML and EPUB, a mix of file I/O and document processing

* UniFi Controller

  Compact the mongodb database used by the web app

For these loads also looked at:

* Local disk vs block storage

* Non-docker vs docker execution (for Sphinx, UniFi Controller is always Docker)


Sphinx load results
"""""""""""""""""""

The key takeaways from the Sphinx load tests:

GCE 512 MB VM was 3x slower
  All the other VMs using local disk took between 1m2s - 1m18s with the GCE 512 MB taking 3m44s - 3m46s.

  The GCE 512 MB VM is only recommended when free VM, and only for very light processing. It is much slower than the Google Cloud Console.

Near identical performance for local disk and block storage
  Block storage is a viable option for this workload (though not for database usage as we will soon see).

Docker was 62% - 71% slower
  Sphinx processing took 1m46s - 2m7s using Docker vs 1m2s - 1m18s, or about 62% - 71% slower.

Google Cloud Console was the best value
  It is a free version of GCE g1-small with performance equaling the best of the alternatives for Sphinx processing. It does have significant restrictions.

Linode 1 G VM is the best server value
  The larger 4 G VMs did not provide better performance leaving the $5/month Linode 1 G VM as the least expensive functional VM. However, for intermittent use, GCE has the advantage in minimum 1 minute (vs 1 hour) cost, with to the second (vs hour) pricing.


UniFi Controller load results
"""""""""""""""""""""""""""""

The key takeaways from the UniFi Controller load tests:

Google Cloud Console and GCE 512 MB VMs were not viable options
  The GCC was not designed to be a general server, and the GCE 512 MB had too little memory.

1 GB Linode VM was the best value
  It matched the performance of the 4 GB VMs (even with 2 CPUs).

Block storage was not a viable option
  Compacting the database went from 3s-4s for local disk up to 31s-32s and 1m6s-1m12s for block storage, approximately 10x slower.


Additional comments
"""""""""""""""""""

Price is not the only consideration
  Skill set expansion and capability difference can lead to selecting a different provider. For example, AWS has the largest market share and likely the most job prospects. GCE provides live migration. Some providers price to the second vs hour.

Learn more than 1 cloud provider
  AWS is has the largest market share and should be a priority to learn, though your work may require GCP or Azure. Learning a second cloud provider can provide backup redundancy and knowledge to compare cloud providers.

IPv6 can result in significant delays
  Some Linux ``apt`` and ``git`` network delay issues go away when IPv6 is disabled (or avoided): ``sudo apt -o Acquire::ForceIPv4=true update``.

Time of day and/or server congestion can affect results
  Linode 4 G ran slightly slower than Linode 1 G, likely due to running at a different time on a different server.

Docker performance can vary due to different OS
  From `Why is the alpine Docker image over 50% slower than the ubuntu image? <https://superuser.com/questions/1219609/why-is-the-alpine-docker-image-over-50-slower-than-the-ubuntu-image#1234279>`_ run on the Google Cloud Console showing a 33% slowdown using Alpine:

  .. code-block:: bash
    :emphasize-lines: 1-8

    BENCHMARK="import timeit; print(timeit.timeit('import json; json.dumps(list(range(10000)))', number=5000))"
    docker run --rm python:3-slim python --version
    docker run --rm python:3-slim python -c "$BENCHMARK"
    # 6.571638233000158
    docker run --rm python:3-alpine3.6 python --version
    docker run --rm python:3-alpine3.6 python -c "$BENCHMARK"
    # 8.767991486000028
    # 8.768/6.571 ~ 1.33 or 33% more time using alpine

    # Clean up - this deletes all containers and images!
    docker stop $(docker ps -aq)  # stop all running containters
    docker rm $(docker ps -aq)  # remove all containers
    docker rmi $(docker images -q)


AES and SHA
-----------


FIPS and AES
^^^^^^^^^^^^

The `Federal Information Processing Standards <https://en.wikipedia.org/wiki/Federal_Information_Processing_Standards>`_ " are publicly announced standards developed by the United States federal government for use in computer systems by non-military government agencies and government contractors." FIPS 197, or the `Advanced Encryption Standard <https://en.wikipedia.org/wiki/Advanced_Encryption_Standard>`_ "is a specification for the encryption of electronic data established by the U.S. National Institute of Standards and Technology (NIST) in 2001."

From the `Advanced Encryption Standard process <https://en.wikipedia.org/wiki/Advanced_Encryption_Standard_process>`_:

  The Advanced Encryption Standard (AES), the symmetric block cipher ratified as a standard by National Institute of Standards and Technology of the United States (NIST), was chosen using a process lasting from 1997 to 2000 that was markedly more open and transparent than its predecessor, the Data Encryption Standard (DES). This process won praise from the open cryptographic community, and helped to increase confidence in the security of the winning algorithm from those who were suspicious of backdoors in the predecessor, DES.

Continuing from the `Advanced Encryption Standard <https://en.wikipedia.org/wiki/Advanced_Encryption_Standard>`_:

  For AES, NIST selected three members of the Rijndael family, each with a block size of 128 bits, but three different key lengths: 128, 192 and 256 bits.

  AES has been adopted by the U.S. government and is now used worldwide. It supersedes the Data Encryption Standard (DES), which was published in 1977. The algorithm described by AES is a symmetric-key algorithm, meaning the same key is used for both encrypting and decrypting the data.

  AES became effective as a federal government standard on May 26, 2002, after approval by the Secretary of Commerce. AES is included in the ISO/IEC 18033-3 standard. AES is available in many different encryption packages, and is the first (and only) publicly accessible cipher approved by the National Security Agency (NSA) for top secret information when used in an NSA approved cryptographic module.

See `AES - Description of the cipher <https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Description_of_the_cipher>`_ for cipher details.

From `AES - Security <https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Security>`_:

  At present, there is no known practical attack that would allow someone without knowledge of the key to read data encrypted by AES when correctly implemented.

  Many modern CPUs have built-in hardware instructions for AES, which would protect against timing-related side-channel attacks.

For details see the NIST publication `Advanced Encryption Standard (AES) <https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf>`_.


NIST and SHA, Password Hashing Competition
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From `NIST hash function competition <https://en.wikipedia.org/wiki/NIST_hash_function_competition>`_:

  The NIST hash function competition was an open competition held by the US National Institute of Standards and Technology (NIST) to develop a new hash function called SHA-3 to complement the older SHA-1 and SHA-2. ... The competition ended on October 2, 2012 when the NIST announced that `Keccak <https://en.wikipedia.org/wiki/SHA-3>`_ would be the new SHA-3 hash algorithm.

  The winning hash function has been published as NIST FIPS 202 the "SHA-3 Standard", to complement FIPS 180-4, the Secure Hash Standard.

From `Password Hashing Competition <https://en.wikipedia.org/wiki/Password_Hashing_Competition>`_:

  The Password Hashing Competition was an open competition announced in 2013 to select one or more password hash functions that can be recognized as a recommended standard. It was modeled after the successful Advanced Encryption Standard process and NIST hash function competition, but directly organized by cryptographers and security practitioners. On 20 July 2015 Argon2 was selected as the final PHC winner, with special recognition given to four other password hashing schemes: Catena, Lyra2, yescrypt and Makwa.
