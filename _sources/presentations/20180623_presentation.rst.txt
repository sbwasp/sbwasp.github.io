.. include:: /pentest_links.txt


***************************************
2018-06-23 Links, PentesterLab, AWS EC2
***************************************


Links and updates this week
===========================


Links around the web
--------------------


Cloud
^^^^^

#. `CLOUD EXPOSURE, DLP & IR, A-Z <http://aboutdfir.com/cloud-exposure-dlp-ir-a-z/>`_

#. `Sample Questions for Amazon Web Services Certified Solution Architect Certification (AWS Architect Certification) – Part I <https://blog.cloudthat.com/sample-questions-for-amazon-web-services-certified-solution-architect-certification-aws-architect-certification-part-i/>`_, `Sample Questions for Amazon Web Services Certified Solution Architect Certification (AWS Architect Certification) – Part II <https://blog.cloudthat.com/sample-questions-for-amazon-web-services-certified-solution-architect-certification-aws-architect-certification-part-ii/>`_, and `Preparing for Amazon Web Services Certified Solutions Architect Certification (AWS Architect Certification) <https://blog.cloudthat.com/preparing-for-amazon-web-services-certified-solution-architect-certification-aws-architect-certification/>`_

#. `Firefox Is Back. It’s Time to Give It a Try <https://mobile.nytimes.com/2018/06/20/technology/personaltech/firefox-chrome-browser-privacy.html>`_


Tech
^^^^

#. `Uncover Unseen Malware Samples With No Distribute Scanners <https://www.recordedfuture.com/no-distribute-scanners/>`_ and `75% of Malware Uploaded on “No-Distribute” Scanners Is Unknown to Researchers <https://www.bleepingcomputer.com/news/security/75-percent-of-malware-uploaded-on-no-distribute-scanners-is-unknown-to-researchers/>`_

#. `Man who allegedly gave Vault 7 cache to WikiLeaks busted by poor opsec <https://arstechnica.com/tech-policy/2018/06/ex-cia-engineer-indicted-on-several-new-charges-connected-to-vault-7-leak/>`_

#. `Why You Must Learn to Love DNSSEC <http://www.circleid.com/posts/20180619_why_you_must_learn_to_love_dnssec/>`_

#. `OpenBSD Disables Intel CPU Hyper-Threading Due to Security Concerns <https://www.bleepingcomputer.com/news/security/openbsd-disables-intel-cpu-hyper-threading-due-to-security-concerns/>`_

#. `SafeSpec: Banishing the Spectre of a Meltdown with Leakage-Free Speculation <https://arxiv.org/pdf/1806.05179.pdf>`_

#. `Spectre Attacks: Exploiting Speculative Execution <https://spectreattack.com/spectre.pdf>`_


Tools
^^^^^

#. `DanderSpritz Lab <https://github.com/francisck/DanderSpritz_lab>`_ - allow researchers and defenders to quickly stand up a fully functional version of DanderSpritz - `The Equation Group's Post exploitation tool-set <https://www.youtube.com/watch?v=Zqw-T1YQKUQ>`_ and a Windows Server 2008 Domain and client as targets.

#. `Tokenvator: A Tool to Elevate Privilege using Windows Tokens <https://blog.netspi.com/tokenvator-a-tool-to-elevate-privilege-using-windows-tokens/>`_

#. `Sslmerge <https://github.com/trimstray/sslmerge>`_ - open source tool to help you build a valid SSL certificate chain.

#. `ARPPD <https://github.com/Prodicode/ARPPD>`_ - provide protection against malicious ARP attacks, changing the gateway's MAC Address in the ARP table of a victim's PC.

#. `Android Gets New Anti-Spoofing Feature to Make Biometric Authentication Secure <https://thehackernews.com/2018/06/android-biometric-authentication.html>`_

#. `Face recognition with OpenCV, Python, and deep learning <https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/>`_

#. `A Visual Introduction to Machine Learning <http://www.r2d3.us/>`_

#. `PyTorch or TensorFlow? <https://awni.github.io/pytorch-tensorflow/>`_

#. `Tinkercad <https://www.tinkercad.com/>`_


Study links
^^^^^^^^^^^

#. `Using a GitHub app to escalate to an organization owner for a $10,000 bounty <https://medium.com/@cachemoney/using-a-github-app-to-escalate-to-an-organization-owner-for-a-10-000-bounty-4ec307168631>`_

#. `Attacking Private Networks from the Internet with DNS Rebinding <https://medium.com/@brannondorsey/attacking-private-networks-from-the-internet-with-dns-rebinding-ea7098a2d325>`_, `Google, Roku, Sonos to Fix DNS Rebinding Attack Vector <https://www.bleepingcomputer.com/news/security/google-roku-sonos-to-fix-dns-rebinding-attack-vector/>`_, and `DNS rebinding <https://en.wikipedia.org/wiki/DNS_rebinding>`_

#. `I discovered a browser bug <https://jakearchibald.com/2018/i-discovered-a-browser-bug/>`_

   I've covered two browser security issues here, but these bugs started when browsers implemented range requests for media elements, which wasn't covered by the standard. These range requests were genuinely useful, so all browsers did it by copying each others behaviour, but no one integrated it into the standard.

   The result is the browsers all behave slightly differently, and some ended up with security issues.

#. `Certificates for localhost <https://letsencrypt.org/docs/certificates-for-localhost/>`_

#. `CVE-2018-10956: Unauthenticated Privileged Directory Traversal in IPConfigure Orchid Core VMS <https://labs.nettitude.com/blog/cve-2018-10956-unauthenticated-privileged-directory-traversal-in-ipconfigure-orchid-core-vms/>`_

#. `Reverse Shell from an OpenVPN Configuration File <https://medium.com/tenable-techblog/reverse-shell-from-an-openvpn-configuration-file-73fd8b1d38da>`_

#. `phpMyAdmin 4.8.x LFI to RCE (Authorization Required) <https://blog.vulnspy.com/2018/06/21/phpMyAdmin-4-8-x-Authorited-CLI-to-RCE/>`_

#. `Backdooring PE-File (with ASLR) <https://hansesecure.de/backdooring-pe-file-with-aslr/>`_

#. `Font Size to Get Past Office 365 Security <https://www.avanan.com/resources/zerofont-phishing-attack>`_ and `Email Phishers Using a Simple Way to Bypass MS Office 365 Protection <https://thehackernews.com/2018/06/email-phishing-protection.html>`_

#. `Intro: AWS Privilege Escalation Vulnerabilities <https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/>`_

#. `Hiding in Plain Sight: Using the Office 365 Activities API to Investigate Business Email Compromises <https://www.crowdstrike.com/blog/hiding-in-plain-sight-using-the-office-365-activities-api-to-investigate-business-email-compromises/>`_

#. `DEFCON Switzerland Videos <https://www.youtube.com/user/defconswitzerland/videos>`_

#. `Decrypting APT33’s Dropshot Malware with Radare2 and Cutter – Part 1 <https://www.megabeets.net/decrypting-dropshot-with-radare2-and-cutter-part-1/>`_ and `Decrypting APT33’s Dropshot Malware with Radare2 and Cutter – Part 2 <https://www.megabeets.net/decrypting-dropshot-with-radare2-and-cutter-part-2/>`_

#. `Advanced CORS Exploitation Techniques <https://www.sxcurity.pro/advanced-cors-techniques/>`_

#. `OWASP Mobile Security Testing Guide <https://github.com/OWASP/owasp-mstg>`_

#. `Exploring PowerShell AMSI and Logging Evasion <https://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/>`_

#. `Magento Credit Card Stealer Reinfector <https://blog.sucuri.net/2018/06/magento-credit-card-stealer-reinfector.html>`_

#. `Dissecting a Bug in the EternalRomance Client (FuzzBunch) <https://zerosum0x0.blogspot.com/2018/06/dissecting-bug-in-eternalromance-client.html>`_

#. `Backdooring your server through its BMC: the HPE iLO4 case <https://airbus-seclab.github.io/ilo/SSTIC2018-Slides-EN-Backdooring_your_server_through_its_BMC_the_HPE_iLO4_case-perigaud-gazet-czarny.pdf>`_

#. `Smart TVs: Security of DVB-T <https://www.sstic.org/media/SSTIC2018/SSTIC-actes/smart_tvs_security_of_dvb-t/SSTIC2018-Article-smart_tvs_security_of_dvb-t-kasmi_lopes-esteves_claverie.pdf>`_

#. `VDOO Discovers Significant Vulnerabilities in Axis Cameras <https://blog.vdoo.com/2018/06/18/vdoo-discovers-significant-vulnerabilities-in-axis-cameras/>`_

#. `Deserialization Vulnerabilities: Attacking Deserialization in JS <https://www.acunetix.com/blog/web-security-zone/deserialization-vulnerabilities-attacking-deserialization-in-js/>`_

#. `Root Cause Analysis of a Non-Deterministic JavaScriptCore Bug <http://blog.ret2.io/2018/06/19/pwn2own-2018-root-cause-analysis/>`_

#. `TRUE STORY: THE CASE OF A HACKED BABY MONITOR (GWELLTIMES P2P CLOUD) <https://www.sec-consult.com/en/blog/2018/06/true-story-the-case-of-a-hacked-baby-monitor-gwelltimes-p2p-cloud/>`_

#. `Detecting Kernel Memory Disclosure with x86 Emulation and Taint Tracking <http://j00ru.vexillium.org/papers/2018/bochspwn_reloaded.pdf>`_


Privacy links
^^^^^^^^^^^^^

#. `Verizon and AT&T will stop selling your phone’s location to data brokers <https://arstechnica.com/tech-policy/2018/06/verizon-and-att-will-stop-selling-your-phones-location-to-data-brokers/>`_

#. `No one is opening those emails about privacy updates, and marketers are getting nervous <`https://www.cnbc.com/2018/06/15/gdpr-emails-going-unopened.html>`_

#. `Your encrypted photos revealed in macOS cache <https://wojciechregula.blog/your-encrypted-photos-in-macos-cache/>`_ and `macOS Breaks Your OpSec by Caching Data From Encrypted Hard Drives <https://www.bleepingcomputer.com/news/apple/macos-breaks-your-opsec-by-caching-data-from-encrypted-hard-drives/>`_

#. `Gaming Companies Remove Analytics App After Massive User Outcry <https://www.bleepingcomputer.com/news/gaming/gaming-companies-remove-analytics-app-after-massive-user-outcry/>`_

#. `Facebook mistakenly leaked developer analytics reports to testers <https://techcrunch.com/2018/06/22/facebook-analytics-leak/>`_


Cultural/Legal/Political
^^^^^^^^^^^^^^^^^^^^^^^^

#. `Supreme Court: Warrant generally needed to track cell phone location data <https://www.cnn.com/2018/06/22/politics/supreme-court-ruling-cell-phone/index.html>`_ and `CARPENTER v. UNITED STATES <https://www.supremecourt.gov/opinions/17pdf/16-402_h315.pdf>`_

#. `Why Hackers Aren’t Afraid of Us <https://www.nytimes.com/2018/06/16/sunday-review/why-hackers-arent-afraid-of-us.html>`_

#. `Pentagon Puts Cyberwarriors on the Offensive, Increasing the Risk of Conflict <https://www.nytimes.com/2018/06/17/us/politics/cyber-command-trump.html>`_


Hacking links
^^^^^^^^^^^^^

#. `Thrip: Espionage Group Hits Satellite, Telecoms, and Defense Companies <https://www.symantec.com/blogs/threat-intelligence/thrip-hits-satellite-telecoms-defense-targets>`_

#. `Widely used D-Link modem/router under mass attack by potent IoT botnet <https://arstechnica.com/information-technology/2018/06/widely-used-d-link-modemrouter-under-mass-attack-by-potent-iot-botnet/>`_

#. `Popular Flight Tracker Flightradar24 Suffers Data Breach <https://thehackernews.com/2018/06/flightradar24-data-breach.html>`_

#. `Thousands of Mobile Apps Expose Their Unprotected Firebase Hosted Databases <https://thehackernews.com/2018/06/mobile-security-firebase-hosting.html>`_ - "Researchers from mobile security firm Appthority discovered that many app developers' fail to properly secure their back-end Firebase endpoints with firewalls and authentication, leaving hundreds of gigabytes of sensitive data of their customers publicly accessible to anyone."

#. `Someone Is Taking Over Insecure Cameras and Spying on Device Owners <https://www.bleepingcomputer.com/news/security/someone-is-taking-over-insecure-cameras-and-spying-on-device-owners/>`_

#. `Malware Analysis Report (AR18-165A) - MAR-10135536-12 – North Korean Trojan: TYPEFRAME <https://www.us-cert.gov/ncas/analysis-reports/AR18-165A>`_

#. `Millions of views on YouTube for fake "How to install Fortnite on Android" videos including links to actual APK files <https://twitter.com/LukasStefanko/status/1006438664342245376>`_

#. `Hackers who sabotaged the Olympic games return for more mischief <https://arstechnica.com/information-technology/2018/06/hackers-who-sabotaged-the-olympic-games-return-for-more-mischief/>`_


Study this week
===============


PentesterLab
------------

#. `PentesterLab - Introducing PentesterLab Meetup <https://blog.pentesterlab.com/introducing-pentesterlab-meetup-889e26441211>`_

#. `PentesterLab - 10 common mistakes aspiring/new pentesters make <https://blog.pentesterlab.com/10-common-mistakes-aspiring-new-pentesters-make-b74a81e58934>`_

#. `PentesterLab - Bootcamp <https://pentesterlab.com/bootcamp>`_

#. `PentesterLab - Our exercises <https://pentesterlab.com/exercises?dir=desc&only=free&sort=published_at>`_

#. `PentesterLab - Use docker for your pentesting labs! <https://blog.pentesterlab.com/use-docker-for-your-pentesting-labs-879fe9feeca8>`_


AWS EC2 instances
-----------------


On-demand, spot, reserved, and dedicated instances
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

On-demand
  Normal EC2 instance available on demand.

Spot instance
  Spare compute capacity available at steep discounts. See `Amazon EC2 Spot Instances <https://aws.amazon.com/ec2/spot/>`_. "The only difference between On-Demand instances and Spot Instances is that Spot instances can be interrupted by EC2 with two minutes of notification when EC2 needs the capacity back." See `Interruption Behavior <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#interruption-behavior>`_ for interruption options.

Reserved instance
  Get discount by committing to 1 or 3 years instance usage. See `Amazon EC2 Reserved Instances <https://aws.amazon.com/ec2/pricing/reserved-instances/>`_. Standard RIs are for steady state usage; convertible RIs are like standard RIs except they can be upgraded to instances of equal or greater value; and scheduled RIs which have "a predictable recurring schedule that only requires a fraction of a day, a week, or a month."

Dedicated instances
  Hardware is dedicated to a single customer. See `Amazon EC2 Dedicated Instances <https://aws.amazon.com/ec2/purchasing-options/dedicated-instances/>`_ and `Amazon EC2 Dedicated Hosts <https://aws.amazon.com/ec2/dedicated-hosts/>`_.


Instance types
^^^^^^^^^^^^^^


Instance families
"""""""""""""""""

`Amazon Elastic Compute Cloud Instance Types <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html>`_ lists these families: general purpose, compute optimized, memory optimized, storage optimized, and accelerated computing. Also see `Amazon EC2 Instance Types <https://aws.amazon.com/ec2/instance-types/>`_.


Virtualization types
""""""""""""""""""""

From `Amazon Elastic Compute Cloud Instance Types <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html>`_, there are HVM (hardware virtual machine) and PV (paravirtual) instances:

  For best performance, we recommend that you use an HVM AMI. In addition, HVM AMIs are required to take advantage of enhanced networking. HVM virtualization uses hardware-assist technology provided by the AWS platform. With HVM virtualization, the guest VM runs as if it were on a native hardware platform, except that it still uses PV network and storage drivers for improved performance.

From `Amazon Elastic Compute Cloud - Linux AMI Virutalization Types <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/virtualization_types.html>`_:

  Paravirtual guests traditionally performed better with storage and network operations than HVM guests because they could leverage special drivers for I/O that avoided the overhead of emulating network and disk hardware, whereas HVM guests had to translate these instructions to emulated hardware. Now PV drivers are available for HVM guests, so operating systems that cannot be ported to run in a paravirtualized environment can still see performance advantages in storage and network I/O by using them. With these PV on HVM drivers, HVM guests can get the same, or better, performance than paravirtual guests.


Networking
""""""""""

Networking between instances can be optimized by `Amazon Elastic Compute Cloud Placement Groups <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html>`_:

Cluster
  Clusters instances into a low-latency group in a single Availability Zone.

Spread
  Spreads instances across underlying hardware. They can span Availability Zones.

Note that `Amazon Elastic Compute Cloud Enhanced Networking on Linux <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking.html>`_ providing 10 or 25 Gbps network speeds is supported on selected instance types.


Storage
"""""""

See the figure at `Amazon Elastic Compute Cloud Storage <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Storage.html>`_  for the different types of storage.

Instance Store
  Disks physically attached to host computer, with data lost when instance is stopped or terminated. See `Amazon Elastic Compute Cloud Amazon EC2 Instance Store <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html>`_.

EBS
  A raw, unformatted external block device that can be attached to a single instance, persisting independently from the instance. EBS volumes can be created as encrypted volumes. See `Amazon Elastic Compute Cloud Amazon Elastic Block Store (Amazon EBS) <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html>`_. Can create:

  General Purpose SSD
    3 IOPS/GiB with burst to 3,000 IOPS. These "volumes support up to 10,000 IOPS and 160 MB/s throughput".

  Provisioned IOPS
    These "support up to 32,000 IOPS and 500 MB/s throughput".

  Throughput Optimized HDD
    Optimized HDD provides "low-cost magnetic storage that defines performance in terms of throughput rather than IOPS. With throughput of up to 500 MiB/s."

  Cold HDD
    Magnetic storage up to 250 MiB/s.

  These can be encrypted, can create point-in-time snapshot, are create in an Availability Zone for instances in the same Availability Zone. They can be initialized with public data sets (see `Amazon Elastic Compute Cloud Using Public Data Sets <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-public-data-sets.html>`_).

EFS
  NFS storage. See `Amazon Elastic Compute Cloud Amazon Elastic File System (Amazon EFS) <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEFS.html>`_.

S3
  Reliable and inexpensive storage, including snapshots and AMIs.


Root device
"""""""""""

All AMIs are either backed by EBS or instance store. See `Amazon Elastic Compute Cloud AMI Types - Storage for the Root Device <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device>`_. Note that all of the lesser cost T2 instances must use EBS for instance storage. Also see `AWS OpsWorks Best Practices: Root Device Storage for Instances <https://docs.aws.amazon.com/opsworks/latest/userguide/best-practices-storage.html>`_: EBS instances restart faster, EBS-backed instances pay for the EBS volume even when the instance is not running, and logs on EBS-backed instance persist with the volume.


Bursting
""""""""

CPU bursting
!!!!!!!!!!!!

From `Burstable Performance Instances <https://aws.amazon.com/ec2/instance-types/#burst>`_
`Burstable Performance Instances <https://aws.amazon.com/ec2/instance-types/#burst>`_:

  Amazon EC2 allows you to choose between Fixed Performance Instances (e.g. M3, C3, and R3) and Burstable Performance Instances (e.g. T2). Burstable Performance Instances provide a baseline level of CPU performance with the ability to burst above the baseline.

  The hourly T2 instance price automatically covers all interim spikes in usage when the average CPU utilization of a T2 instance is at or less than the baseline over a 24-hour window. If the instance needs to run at higher CPU utilization for a prolonged period, it can do so at a flat additional charge of 5 cents per vCPU-hour.

  T2 instances’ baseline performance and ability to burst are governed by CPU Credits. Each T2 instance receives CPU Credits continuously, the rate of which depends on the instance size. T2 instances accrue CPU Credits when they are idle, and use CPU credits when they are active. A CPU Credit provides the performance of a full CPU core for one minute.

  For example, a t2.small instance receives credits continuously at a rate of 12 CPU Credits per hour. This capability provides baseline performance equivalent to 20% of a CPU core (20% x 60 mins = 12 mins). If the instance does not use the credits it receives, they are stored in its CPU Credit balance up to a maximum of 288 CPU Credits. When the t2.small instance needs to burst to more than 20% of a core, it draws from its CPU Credit balance to handle this surge automatically.

  If the instance happens to run at an average 25% CPU utilization (5% above baseline) over a period of 24 hours after its CPU Credit balance is drawn to zero, it will be charged an additional 6 cents (5 cents/vCPU-hour x 1 vCPU x 5% x 24 hours).

See `How powerful are the burstable aws t2 instances <https://www.algotech.solutions/blog/engineering/how-powerful-are-the-burstable-aws-t2-instances/>`_ for an example of burstable t2 instance usage.

See `AWS EC2 T2 Instances Demystified: Don’t Learn The Hard Way <https://roberttisdale.com/aws-ec2-t2-instances-demystified-dont-learn-hard-way/>`_ for more discussion of T2 bursting. To allow unlimited bursting requires specifying ``--credit-specification CpuCredits=unlimited`` like ``aws ec2 run-instances ... --credit-specification CpuCredits=unlimited``.


SSD bursting
!!!!!!!!!!!!

From `New SSD-Backed Elastic Block Storage: Under the Hood - Performance Burst Details <https://aws.amazon.com/blogs/aws/new-ssd-backed-elastic-block-storage/>`_, the token bucket implementations works as follows:

* Token is I/O credit for 1 read or write.

* Token bucket for each general purpose SSD holding up to 5.4 million tokens.

* Add 3 tokens/GB/second.

* Tokens spent up to 3000/second/volume.

* Baseline performance is 3 IOPS/GB/second.

For a more detailed discussion see burst and credit discussions in `Amazon Elastic Compute Cloud Amazon EBS Volume Types <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html>`_ and the presentation `AWS - an introduction to bursting (GP2 - T2) <https://www.slideshare.net/rasmusekman/aws-an-introduction-to-bursting-gp2-t2>`_.


AWS CLI
-------


Installing/configuring the AWS CLI
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

See `Configuring the AWS CLI <https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html>`_. Installation and configuration can be as simple as:

.. code-block:: bash
  :emphasize-lines: 1,3,9-10

  pip install --upgrade awscli

  aws configure
  AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE
  AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
  Default region name [None]: us-west-2
  Default output format [None]: ENTER

  aws configure list
  aws configure get region


Regions and AZs
^^^^^^^^^^^^^^^

Instances are created in an Availability Zone using `Amazon Elastic Compute Cloud Amazon Machine Images (AMI) <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html>`_. From `Amazon Elastic Compute Cloud Instances and AMIs <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instances-and-amis.html>`_:

  All AMIs are categorized as either backed by Amazon EBS, which means that the root device for an instance launched from the AMI is an Amazon EBS volume, or backed by instance store, which means that the root device for an instance launched from the AMI is an instance store volume created from a template stored in Amazon S3.

From `Amazon Elastic Compute Cloud Regions and Availability Zones <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_:

  An Availability Zone is represented by a region code followed by a letter identifier; for example, us-east-1a. To ensure that resources are distributed across the Availability Zones for a region, we independently map Availability Zones to identifiers for each account. For example, your Availability Zone us-east-1a might not be the same location as us-east-1a for another account. There's no way for you to coordinate Availability Zones between accounts.

  When you launch an instance, you can optionally specify an Availability Zone in the region that you are using. If you do not specify an Availability Zone, we select one for you. When you launch your initial instances, we recommend that you accept the default Availability Zone, because this enables us to select the best Availability Zone for you based on system health and available capacity. If you launch additional instances, only specify an Availability Zone if your new instances must be close to, or separated from, your running instances.

Not all regions or AZs have the same capability: `AWS Regions and Endpoints <https://docs.aws.amazon.com/general/latest/gr/rande.html>`_ shows Amazon Translate endpoints only exist in 4 regions where Amazon VPC exist in many more.

Note that EBS storage is in an AZ, instances run in an AZ using EBS in that AZ, and use an AMI in the same region (not AZ).

Here are some AWS CLI commands involving regions and AZ. (Note: see `How do I know what Ubuntu AMI to launch on EC2? <https://askubuntu.com/questions/53582/how-do-i-know-what-ubuntu-ami-to-launch-on-ec2#53586>`_.)

.. code-block:: bash
  :emphasize-lines: 1,7,17

  # Get complete region list, then current region and AZs
  aws ec2 describe-regions --output text  # or "table", "json"
  aws configure get region
  REGION=$(aws configure get region)
  aws ec2 describe-availability-zones

  # Get Ubuntu 18.04 LTS from Ubuntu for current region
  remove_last_comma() { sed '
          $x;$G;/\(.*\),/!H;//!{$!d
      };  $!x;$s//\1/;s/^\n//'
  }
  curl -s "https://cloud-images.ubuntu.com/locator/ec2/releasesTable" \
      | remove_last_comma \
      | jq -c '.aaData[] | select(contains(["18.04", "'$REGION'", "hvm:ebs"]))' \
      | grep -o 'ami-[a-z0-9]\+' | head -1

  # Get Ubuntu 18.04 LTS for current region from AWS
  aws --region "$REGION" ec2 describe-images --owners 099720109477 \
      --filters Name=root-device-type,Values=ebs \
                Name=architecture,Values=x86_64 \
		Name=name,Values='*hvm-ssd/ubuntu-bionic-18.04*' \
      --query 'sort_by(Images, &Name)[-1].ImageId'


SSH keys
^^^^^^^^

See `Amazon Elastic Compute Cloud Amazon EC2 Key Pairs <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html>`_ for options creating an SSH key pair. Note that SSH keys are stored in a region (using the current default region if not specified). If AWS creates the SSH key pair it returns the private key and keeps the public key. If you create your own SSH key pair you keep both and upload your public key - AWS never touches your private key.

.. code-block:: bash
  :emphasize-lines: 1,11,15,18

  # Generate SSH keypair
  EMAIL="bitbender@bitbender.org"
  KEYNAME=bitbender
  PRIVKEY="$HOME/.ssh/id_aws"
  PUBKEY="$PRIVKEY.pub"
  # NOTE - ed25519 doesn't work
  # ssh-keygen -a 50 -t ed25519 -C "$EMAIL" -f "$PRIVKEY"
  ssh-keygen -o -t rsa -C "$EMAIL" -f "$PRIVKEY"
  # password protect the key

  # Import into current region
  aws ec2 import-key-pair --key-name "$KEYNAME" \
      --public-key-material "file://$PUBKEY"

  # Verify keys uploaded
  aws ec2 describe-key-pairs

  # If need to delete the key
  aws ec2 delte-key-pair --key-name "$KEYNAME"


Run EC2 instance
^^^^^^^^^^^^^^^^

Here's an example of starting an EC2 instance using the AWS CLI:

.. code-block:: bash
  :emphasize-lines: 1,3,5,8,15,26,30,37,43,49,52,60

  # Info needed to create EC2 instance
  TYPE=t2.nano  # t2.nano t2.micro t2.small t2.medium
  # Region will default, but we'll set it here and let AWS choose AZ
  REGION=$(aws configure get region)
  # Use SSH key created previously
  KEYNAME="bitbender"
  PRIVKEY="$HOME/.ssh/id_aws"
  # Use Ubuntu 18.04 AMI
  AMI=$(aws --region "$REGION" ec2 describe-images --owners 099720109477 \
            --filters Name=root-device-type,Values=ebs \
                      Name=architecture,Values=x86_64 \
                      Name=name,Values='*hvm-ssd/ubuntu-bionic-18.04*' \
            --query 'sort_by(Images, &Name)[-1].ImageId' \
      )
  # Create security group and get security group ID
  SG="PENTEST_MEETUP"
  SGID=$(aws ec2 create-security-group \
             --group-name "$SG" --description "Test Security Group" \
       )
  # sg-cbc2c5ba
  # Alternatively could query for security group ID
  SGID=$(aws ec2 describe-security-groups \
             --group-names "$SG" \
             --query 'SecurityGroups[*].{ID:GroupId}' \
       )
  # Allow SSH in security group
  aws ec2 authorize-security-group-ingress --group-id "$SGID" \
      --protocol tcp --port 22 --cidr 0.0.0.0/0 --region "$REGION"

  # Run the instance and tag it with name "pentest-meetup"
  VMNAME="pentest-meetup"
  aws ec2 run-instances --image-id "$AMI" --count 1 \
      --instance-type "$TYPE" --key-name "$KEYNAME" \
      --security-group-ids "$SGID" --region "$REGION" \
      --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value='$VMNAME'}]'

  # Get the instance ID
  INSTANCES=$(aws ec2 describe-instances \
                 --filters 'Name=tag:Name,Values=pentest-meetup' \
                 --query 'Reservations[*].Instances[*].InstanceId' \
                 --output text \
            )
  # Get the public DNS name
  PUBDNS=$(aws ec2 describe-instances \
             --filters 'Name=tag:Name,Values=pentest-meetup' \
             --query 'Reservations[*].Instances[*].PublicDnsName' \
             --output text \
       )
  # Wait for instance running
  aws ec2 wait instance-running --instance-ids "$INSTANCES"

  # Use the VM
  ssh -i "$PRIVKEY" ubuntu@$PUBDNS
  # See instance metadata and user data
  curl http://169.254.169.254/latest/meta-data/
  curl http://169.254.169.254/latest/user-data
  # ...
  exit

  # Terminate the VM and remove security group
  aws ec2 terminate-instances --instance-ids "$INSTANCES" --region "$REGION"
  aws ec2 delete-security-group --group-id "$SGID" --region "$REGION"

See `Amazon Elastic Compute Cloud Connecting to Your Linux Instance Using SSH <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html>`_ for SSH details.


Launch templates
^^^^^^^^^^^^^^^^

From `Amazon Elastic Compute Cloud Launching an Instance from a Launch Template <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html>`_:

  Launch templates enable you to store launch parameters so that you do not have to specify them every time you launch an instance. For example, a launch template can contain the AMI ID, instance type, and network settings that you typically use to launch instances. When you launch an instance using the Amazon EC2 console, an AWS SDK, or a command line tool, you can specify the launch template to use.

That document include an example of overriding the template:


.. code-block:: bash

  aws ec2 run-instances \
      --launch-template LaunchTemplateId=lt-0abcd290751193123 \
      --instance-type t2.small
