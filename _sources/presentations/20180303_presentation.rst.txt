.. include:: /pentest_links.txt


****************************************************************
2018-03-03 Links, Cloud VMs, OpenSSL, Metasploit Framework
****************************************************************


Links and updates this week
===========================


Links around the web
--------------------


Cloud
^^^^^

#. Trustico foibles

   #. `How not to run a CA <http://blog.koehntopp.info/index.php/3075-how-not-to-run-a-ca/>`_

   #. `malor post <https://arstechnica.com/information-technology/2018/03/23000-https-certificates-axed-after-ceo-e-mails-private-keys/?comments=1&post=34903403>`_ (in `23,000 HTTPS certificates axed after CEO emails private keys <https://arstechnica.com/information-technology/2018/03/23000-https-certificates-axed-after-ceo-e-mails-private-keys/>`_)

   #. `Trustico code injection <https://groups.google.com/forum/#!topic/mozilla.dev.security.policy/BLvabFwcJqo>`_

   #. `Trustico website goes dark after someone drops critical flaw on Twitter <https://arstechnica.com/information-technology/2018/03/trustico-website-goes-dark-after-someone-drops-critical-flaw-on-twitter/>`_

#. `AWS Top 10 Security Tips <https://www.devteam.space/blog/aws-top-10-security-tips/>`_

#. `Serverless Security: What's Left to Protect? <https://www.infoq.com/articles/serverless-security>`_

#. `Containers won the battle, but will lose the war to serverless - Simon Wardley <https://read.acloud.guru/simon-wardley-is-a-big-fan-of-containers-despite-what-you-might-think-18c9f5352147>`_

#. `Google Chrome: Flash Usage Declines from 80% in 2014 to Under 8% Today <https://www.bleepingcomputer.com/news/security/google-chrome-flash-usage-declines-from-80-percent-in-2014-to-under-8-percent-today/>`_

#. Storage performance - alternatives to SQL databases

   #. `Working with 154 million records on Azure Table Storage - the story of "Have I been pwned?" <https://www.troyhunt.com/working-with-154-million-records-on/>`_ (referenced by `I Wanna Go Fast: Why Searching Through 500M Pwned Passwords Is So Quick <https://www.troyhunt.com/i-wanna-go-fast-why-searching-through-500m-pwned-passwords-is-so-quick/>`_, the follow-on to `I've Just Launched "Pwned Passwords" V2 With Half a Billion Passwords for Download <https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2/>`_)

   #. `What I learnt from building 3 high traffic web applications on an embedded key value store <https://hackernoon.com/what-i-learnt-from-building-3-high-traffic-web-applications-on-an-embedded-key-value-store-68d47249774f>`_

#. `Working with Google Cloud to bring all your work together <https://blogs.dropbox.com/dropbox/2018/03/google-cloud-integrations/>`_ - Google and Dropbox working together

#. `Dropbox saved almost $75 million over two years by building its own tech infrastructure <https://www.geekwire.com/2018/dropbox-saved-almost-75-million-two-years-building-tech-infrastructure/>`_

#. `How Google Cloud Storage offers strongly consistent object listing thanks to Spanner <https://cloudplatform.googleblog.com/2018/02/how-Google-Cloud-Storage-offers-strongly-consistent-object-listing-thanks-to-Spanner.html>`_


Tech
^^^^

#. `FinFisher exposed: A researcher’s tale of defeating traps, tricks, and complex virtual machines <https://cloudblogs.microsoft.com/microsoftsecure/2018/03/01/finfisher-exposed-a-researchers-tale-of-defeating-traps-tricks-and-complex-virtual-machines/>`_

#. `Implement "security.txt" to advocate responsible vuln. disclosures <https://cybersins.com/howto-resposible-disclosure-with-security-txt/>`_

#. Blue teams using red team tool

   #. Blue team Active Directory security can be based on red team BloodHound tool - see `Introducing BloodHound <https://wald0.com/?p=68>`_

   #. `Introducing the Adversary Resilience Methodology - Part One <https://posts.specterops.io/introducing-the-adversary-resilience-methodology-part-one-e38e06ffd604>`_

   #. `Introducing the Adversary Resilience Methodology - Part Two <https://posts.specterops.io/introducing-the-adversary-resilience-methodology-part-two-279a1ed7863d>`_

#. `Dear developers, beware of DNS Rebinding <https://www.twistlock.com/2018/02/28/dear-developers-beware-dns-rebinding/>`_

#. `An Analysis of the Privacy and Security Risks of Android VPN Permission-enabled Apps <http://www.icir.org/vern/papers/vpn-apps-imc16.pdf>`_

#. `Intel's latest set of Spectre microcode fixes is coming to a Windows update <https://arstechnica.com/gadgets/2018/03/microsoft-will-soon-start-shipping-the-intel-spectre-microcode-fixes/>`_

#. `OpenSCAP <https://www.open-scap.org/>`_

#. `New device policy to allow Linux VMs on Chrome OS <https://chromium-review.googlesource.com/c/chromium/src/+/899767>`_

#. `Driver Security Guidance <https://docs.microsoft.com/en-us/windows-hardware/drivers/driversecurity/>`_

#. `Vue.js serverside template XSS example <https://github.com/dotboris/vuejs-serverside-template-xss>`_

#. `Analyzing the nasty .NET protection of the Ploutus.D malware <https://antonioparata.blogspot.it/2018/02/analyzing-nasty-net-protection-of.html>`_

#. `Restrict Certificate Authorities (CA) to issue SSL certs. Enable CAA record in DNS <https://cybersins.com/certificate-authority-restrict-with-caa-dns-record/>`_

#. `An argument for passwordless <https://biarity.gitlab.io/2018/02/23/passwordless/>`_


Tools
^^^^^

#. `Security Monkey <https://github.com/Netflix/security_monkey>`_ - Security Monkey monitors your AWS and GCP accounts for policy changes and alerts on insecure configurations

#. `Go best practices, six years in <https://peter.bourgon.org/go-best-practices-2016/>`_

#. `CloudMapper <https://github.com/duo-labs/cloudmapper>`_ -  generates network diagrams of Amazon Web Services (AWS) environments and displays them via your browser. It helps you understand visually what exists in your accounts and identify possible network misconfigurations.

#. `AWSBucketDump <https://github.com/jordanpotti/AWSBucketDump>`_ - a tool to quickly enumerate AWS S3 buckets to look for loot.

#. `passpwn - password breach checker <https://github.com/antonlindstrom/passpwn>`_

#. `Reasoning with Types in Rust <https://aaronweiss.us/posts/2018-02-26-reasoning-with-types-in-rust.html>`_ and `Transcript: Should you Rust in embedded yet? <https://kazlauskas.me/entries/rust-embedded-ready.html>`_

#. `An ACME Shell script: acme.sh <https://github.com/Neilpang/acme.sh>`_

#. `go-lambda-ping <https://github.com/frankcash/go-lambda-ping>`_ - a simple program that will build the infrastructure to ping a website

#. `firepwned <https://github.com/christophetd/firepwned>`_

#. `Honeytrap <https://github.com/honeytrap/honeytrap>`_

#. `dotdotslash <https://github.com/jcesarstef/dotdotslash>`_

#. `Findsploit by 1N3@CrowdShield <https://github.com/1N3/Findsploit>`_

#. `Hackazon - Setup <https://mattisonwright.wordpress.com/2018/02/24/hackazon-setup/>`_


Study links
^^^^^^^^^^^

#. `Red Team Laptop & Infrastructure (pt 1: Architecture) <https://hackingand.coffee/2018/02/assessment-laptop-architecture/>`_

#. `Enterprise Information Security <https://infosec.mozilla.org/>`_

#. `Firefox Configuration Guide for Privacy Freaks and Performance Buffs <http://12bytes.org/tech/firefox/firefoxgecko-configuration-guide-for-privacy-and-performance-buffs>`_

#. `A Practical Introduction to Container Terminology <https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/>`_

#. `How I made $200,000 when I was 16 years old <https://medium.freecodecamp.org/how-i-made-200-000-when-i-was-16-years-old-304f0e87cfb6>`_

#. `Learn with Google AI <https://ai.google/education#?modal_active=none>`_ and `Machine Learning Crash Course <https://developers.google.com/machine-learning/crash-course/>`_

#. `Operating Systems: From 0 to 1 <https://github.com/tuhdo/os01>`_ - a work in progress

#. `30 Seconds of CSS <https://atomiks.github.io/30-seconds-of-css/>`_

#. `Web application from scratch, Part I <https://defn.io/2018/02/25/web-app-from-scratch-01/>`_

#. `Linux'izing your Windows PC into a dev machine - Part 2 <https://cepa.io/2018/02/20/linuxizing-your-windows-pc-part2/>`_ (follow-on to `Linux'izing your Windows PC into a dev machine - Part 1 <https://cepa.io/2018/02/10/linuxizing-your-windows-pc-part1/>`_)

#. `Web Scraping for Open Source Intelligence <http://blog.vulsec.com/web-scraping-for-open-source-intelligence>`_


Privacy links
^^^^^^^^^^^^^

#. `The Feds Can Now (Probably) Unlock Every iPhone Model In Existence -- UPDATED <The Feds Can Now (Probably) Unlock Every iPhone Model In Existence -- UPDATED>`_

#. `Facebook silently enables facial recognition abilities for users outside EU and Canada <https://www.neowin.net/news/facebook-silently-enables-facial-recognition-abilities-for-users-outside-eu-and-canada>`_

#. `Tinder's Lack of Encryption Lets Strangers Spy on Your Swipes <https://www.wired.com/story/tinder-lack-of-encryption-lets-strangers-spy-on-swipes/>`_

#. `Please Tell Me That You Don't Use Facebook <https://abovethelaw.com/2018/02/please-tell-me-that-you-dont-use-facebook/>`_


Cultural/Legal/Political
^^^^^^^^^^^^^^^^^^^^^^^^

#. `E-Mail Leaves an Evidence Trail <https://www.schneier.com/blog/archives/2018/02/e-mail_leaves_a.html>`_

#. `The Looming Capacity Crisis in Computer Science Education <http://www.centerdigitaled.com/blog/the-looming-capacity-crisis-in-computer-science-education.html>`_

#. `General Data Protection Regulation <https://en.wikipedia.org/wiki/General_Data_Protection_Regulation>`_

   #. `ICANN whois - Proposed Interim Model for GDPR Compliance -- Summary Description <https://www.icann.org/en/system/files/files/proposed-interim-model-gdpr-compliance-summary-description-28feb18-en.pdf>`_

   #. `How GDPR Will Change The Way You Develop <https://www.smashingmagazine.com/2018/02/gdpr-for-web-developers/>`_

   #. `GDPR – A Practical Guide For Developers <https://techblog.bozho.net/gdpr-practical-guide-developers/>`_

#. `China using big data to detain people before crime is committed: report <https://www.theglobeandmail.com/news/world/china-using-big-data-to-detain-people-in-re-education-before-crime-committed-report/article38126551/>`_

#. `Palantir has secretly been using New Orleans to test its predictive policing technology <https://www.theverge.com/2018/2/27/17054740/palantir-predictive-policing-tool-new-orleans-nopd>`_

#. `Google Censors Guns, Removes Shopping Results <https://medium.com/@douglasmatthewstewart/google-censors-guns-removes-shopping-results-5cf9c7a3d995>`_

#. `The Federal Circuit Should Not Allow Patents on Inventions that Should Belong to the Public <https://www.eff.org/deeplinks/2018/02/federal-circuit-should-not-allow-patents-inventions-should-belong-public>`_

#. `Canada to Scrap IBM Payroll Plan Gone Awry Costing C$1 Billion <http://www.itprotoday.com/hybrid-cloud/canada-scrap-ibm-payroll-plan-gone-awry-costing-c1-billion>`_


Hacking links
^^^^^^^^^^^^^

#. `SgxPectre Attacks <https://github.com/osusecLab/SgxPectre>`_ - Practical Spectre attacks against Intel's SGX enclaves

#. `Low-Resource Eclipse Attacks on Ethereum’s Peer-to-Peer Network <https://www.cs.bu.edu/~goldbe/projects/eclipseEth.pdf>`_ and `Ethereum fixes serious “eclipse” flaw that could be exploited by any kid <https://arstechnica.com/information-technology/2018/03/ethereum-fixes-serious-eclipse-flaw-that-could-be-exploited-by-any-kid/>`_

#. memcached

   #. `Memcrashed - Major amplification attacks from UDP port 11211 <https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/>`_

   #. `memcached Reflection/Amplification Description and DDoS Attack Mitigation Recommendations <https://www.arbornetworks.com/blog/asert/memcached-reflection-amplification-description-ddos-attack-mitigation-recommendations/>`_

   #. `GitHub Engineering - February 28th DDoS Incident Report <https://githubengineering.com/ddos-incident-report/>`_

   #. `Memcached-fueled 1.3 Tbps attacks <https://blogs.akamai.com/2018/03/memcached-fueled-13-tbps-attacks.html>`_

#. `Chrome Lets Hackers Phish Even 'Unphishable' Yubikey Users <https://www.wired.com/story/chrome-yubikey-phishing-webusb/>`_

   Google Chrome can connect to a Yubico Neo via HID and CCID. Unfortunately, Chrome allows the CCID interface to be accessed via WebUSB. A phishing website can get a user to enter their Google userid and password, then trick the user into enabling WebUSB access to their Yubikey, then get them to tap the physical button (a normal part of using the Neo). This leads to account compromise.

   Jonathan Rudenberg has developed a Chrome extension to `Disable WebUSB <https://github.com/titanous/disable-webusb>`_ (and therefore this phishing attack). Expect a future Chrome update.

#. `VMware Exploitation through Uninitialized Buffers <https://www.zerodayinitiative.com/blog/2018/3/1/vmware-exploitation-through-uninitialized-buffers>`_

#. `I figured out a way to hack any of Facebook's 2 billion accounts, and they paid me a $15,000 bounty for it <https://medium.freecodecamp.org/responsible-disclosure-how-i-could-have-hacked-all-facebook-accounts-f47c0252ae4d>`_

#. `The 2.5mins or 2.5k$ hawk-eye bug - A Facebook Pages Admins Disclosure Vulnerability! <https://www.seekurity.com/blog/general/the-2-5mins-or-2-5k-hawk-eye-bug-a-facebook-pages-admins-disclosure-vulnerability/>`_

#. `Who is Stealing My Power III: An Adnetwork Company Case Study <https://blog.netlab.360.com/who-is-stealing-my-power-iii-an-adnetwork-company-case-study-en/>`_ and `Ad network uses advanced malware technique to conceal CPU-draining mining ads <https://arstechnica.com/information-technology/2018/02/ad-network-uses-advanced-malware-technique-to-conceal-cpu-draining-mining-ads/>`_

#. `Equifax identifies additional 2.4 million customers hit by data breach <https://www.nbcnews.com/business/business-news/equifax-identifies-additional-2-4-million-customers-hit-data-breach-n852226>`_

#. `Germany says its government computers secure after "isolated" hack <https://uk.reuters.com/article/uk-germany-cyber-russia/germany-says-its-government-computers-secure-after-isolated-hack-idUKKCN1GC2HN>`_ and `Fancy Bear: Germany investigates cyber-attack 'by Russians' <http://www.bbc.com/news/world-middle-east-43232520>`_

#. `The Return of Software Vulnerabilities in the Brazilian Voting Machine <https://www.researchgate.net/publication/323470546_The_Return_of_Software_Vulnerabilities_in_the_Brazilian_Voting_Machine>`_

#. `How to backdoor Diffie-Hellman, lessons learned from the Socat non-prime prime <https://github.com/hotelzululima/socat_backdoor>`_

#. `Steal Funds from TenX Users - Just Another Bug Bounty Story <https://slashcrypto.org/2018/02/27/TenX_Account_Takeover/>`_

#. `Privilege Escalation in 2.3M WooCommerce Shops <https://blog.ripstech.com/2018/woocommerce-php-object-injection/>`_

#. `Duo Finds SAML Vulnerabilities Affecting Multiple Implementations <https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations>`_

#. `antMan Authentication Bypass <http://blog.codecatoctin.com/2018/02/antman-authentication-bypass.html>`_

#. `CVE-2018-4087 PoC: Escaping the sandbox by misleading bluetoothd <https://blog.zimperium.com/cve-2018-4087-poc-escaping-sandbox-misleading-bluetoothd/>`_

#. `Low-Resource Eclipse Attacks on Ethereum's Peer-to-Peer Network <https://www.cs.bu.edu/~goldbe/projects/eclipseEth.pdf>`_

#. `SMBv3 Null Pointer Dereference vulnerability (CVE-2018-0833) <https://krbtgt.pw/smbv3-null-pointer-dereference-vulnerability/>`_


Storage disks in cloud VMs
--------------------------


Save money and administration with storage disks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Cloud disk storage comes in 2 flavors: locally attached vs networked. Locally attached disks are much more limited in size but can have vastly higher performance. Networked storage can expand to large sizes but are technologically challenging for a cloud provider to build. The network disks are often called block storage and are not provisioned with the VM, and often can be used by different VMs at different times.

Distinct from local vs network disks, there are 2 uses for disks:

* Storage disk

  Good when there are existing VMs to use, or a fresh VM can easily be configured to use the storage disk.

* Bootable disk plus storage

  The idea is to avoid running a VM 7x24, but instead pay 7x24 for disk storage + only as-used compute time.

  Some providers like Google allow shutting down a VM and only paying for the resulting disk storage, but many providers like Linode and Digital Ocean keep charging as long as the VM exists (even when not running).

  However, providers that allow booting from networked storage get close to Google (with only a performance hit for networked storage).

  Note that shutting down a VM to save money has the disadvantage of the VM IP changing.


From Google: disk performance is complicated
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Google's `Optimizing Persistent Disk and Local SSD Performance <https://cloud.google.com/compute/docs/disks/performance>`_ makes it clear that adding storage is more complex that at first imagined.

* Persistent vs SSD persistent vs Local SSD (SCSI) vs Local SSD (NVMe)

  Read IOPS per GB are 0.75 vs 30 vs 266.7 vs 453.3 show that local SSD dramatically outperforms non-local persistent storage, and plain disk is abysmal compared to SSD.

* Storage size impacts performance

  To match a 7200 RPM SATA drive on small random reads a persistent disk should be 100 GB and an SSD 3 GB, while for streaming large reads the persistent disk should be 1000 GB and SSD disk 250 GB. So adding a 15 GB persistent disk will not get great performance.

* CPU impacts performance

  High IO performance requires enough available CPU.


Google vs Linode disks
^^^^^^^^^^^^^^^^^^^^^^

First note that Google's disks are encrypted at rest and Linode disks are not. So if you are concerned about access to your storage outside your VM, then Linode requires implementing disk encryption. With Google you can use Google keys or your own keys.

Google's cost for persistent disk is $0.04/GB/month while SSD is $0.17/GB/month. Google has a free level where one 512 MB memory VM is free as is using 30 GB of persistent disk. So running a free 512 MB memory VM (using 15 GB persistent disk) allows adding an addition free 15 GB persistent disk. The performance is adequate for low level usage.

For a good overview of Linode block storage see `Linode Block Storage and its Applications <https://medium.com/linode-cube/linode-block-storage-and-its-applications-3215c5e05129>`_. Linode's cost is $0.10/GB/month for block storage devices that "are highly available with 3x synchronous replication" based on "NVMe/HDD hardware, and a fast network." They can be moved between VMs without rebooting. Note that disks within a VM are hardwre RAIDed SSDs, while block storage goes over  network and has to sync across multiple nodes so is slower. That 3x synchronous replication doesn't come free.

It's not clear how the performance vs cost compares between Google and Linode. And the non-VM block storage performance cannot compare to local VM disk storage.


Adding a Google persistent disk
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To provision a disk via the command line from a running VM is simple:

.. code-block:: bash
  :emphasize-lines: 1,4,9,11,13,15,18,20-25,27,34

  # Connect to VM
  ssh -i $HOME/.ssh/id_gce meetup.bitbender.org
  
  # Create the disk in the same zone as the VM
  DISK=backup
  TYPE=pd-standard
  ZONE=us-west1-b
  SIZE=15
  gcloud compute disks create $DISK --size $SIZE --type $TYPE --zone $ZONE
  
  # Attach disk to VM
  INSTANCE=meetup
  gcloud compute instances attach-disk $INSTANCE --disk $DISK --zone $ZONE
  
  # Figure out the local device (sorry, this is manual)
  sudo lsblk
  # Disk added as /dev/sdb
  DEVICE=/dev/sdb
  
  # Format the disk as ext4 and mount it at /mnt/disks/$DISK
  sudo mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard $DEVICE
  sudo mkdir -p /mnt/disks/$DISK
  sudo mount -o discard,defaults $DEVICE /mnt/disks/$DISK
  # Carefully set disk permissions - I like using umask 027
  sudo chmod o-rwx /mnt/disks/$DISK
  
  # Since this VM is persistent, put disk in /etc/fstab
  #   Will use UUID of device (sorry, this is manual)
  sudo blkid $DEVICE
  UUID="1e0d1d86-7f85-4662-b1bf-333ee2501bbd"
  # Backup your fstab
  sudo cp /etc/fstab /etc/fstab.backup
  # Here we don't mount the disk at boot - force manual mount
  echo "UUID=$UUID /mnt/disks/$DISK ext4 discard,defaults,nofail 0 0" | sudo tee -a /etc/fstab

We chose to make the disk manually mounted for security reasons but also leave it permanently connected to the VM, so whenever the disk is needed on the VM run ``sudo mount /mnt/disks/backup`` followed by ``sudo umount /mnt/disks/backup`` when done.


Adding a Linode disk
^^^^^^^^^^^^^^^^^^^^

Linode is more complicated because we chose to use non-persistent VMs, but Linode-induced complexity creeps in due to block storage not being encrypted. Many of these steps must be done form the GUI due to lack of CLI functionality (see `How to Use Block Storage with Your Linode <https://linode.com/docs/platform/how-to-use-block-storage-with-your-linode/>`_. Use the GUI to create storage named backup of size 20 GB and note the device id (/dev/disk/by-id/scsi-0Linode_Volume_backup). Then start a new non-persistent Linode VM with a non-root user having sudo capabilities.

The storage will be initialized/encrypted using dm-crypt/LUKS as follows:

.. code-block:: bash
  :emphasize-lines: 1-3,5-7,10,12,15,27,33-35

  # From GUI storage creation
  DEVICE=/dev/disk/by-id/scsi-0Linode_Volume_backup
  NAME=backup
  
  # cryptsetup needed for dm-crypt/LUKS
  sudo apt install cryptsetup-bin -y  < /dev/null
  sudo cryptsetup -y --cipher aes-xts-plain64 --key-size 512 --hash sha512 luksFormat --type luks2 $DEVICE
  # YES
  # passphrase
  sudo cryptsetup open $DEVICE $NAME
  
  # Format the storage as ext4
  sudo mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/mapper/$NAME
  
  # Mount the disk and set permissions as needed
  sudo mkdir -p /mnt/disks/$NAME
  sudo mount -t ext4 -o discard,defaults /dev/mapper/$NAME /mnt/disks/$NAME
  # sudo chmod o-rwx /mnt/disks/$DISK
  
  # If desired, add it to /etc/fstab (but not really needed)
  sudo cp /etc/fstab /etc/fstab.backup
  # Use UUID
  sudo blkid $DEVICE
  UUID="3a4f59c5-3229-471a-b804-61c12a382007"
  echo "UUID=$UUID /mnt/disks/$NAME ext4 discard,defaults,nofail 0 0" | sudo tee -a /etc/fstab
  
  # Now the disk is ready to use - can rsync from GCE disk if desired
  sudo apt install rsync -y  < /dev/null
  # rsync ...
  
  # ...
  
  # Dismount disk
  sudo umount /mnt/disks/$NAME
  sudo cryptsetup close $NAME
  
  sudo shutdown -h now

We're not done yet, as each time a new VM is created we need to configure the VM to access the encrypted storage:

.. code-block:: bash
  :emphasize-lines: 1,4,7-10,15-17

  # Install cryptsetup
  sudo apt install cryptsetup-bin -y  < /dev/null
  
  # Assume device manually connected to this VM
  DEVICE=/dev/disk/by-id/scsi-0Linode_Volume_backup
  NAME=backup
  sudo cryptsetup open $DEVICE $NAME
  # Enter password
  sudo mkdir -p /mnt/disks/$NAME
  sudo mount -t ext4 -o discard,defaults /dev/mapper/$NAME /mnt/disks/$NAME
  # sudo chmod o-rwx /mnt/disks/$DISK
  
  # ...
  
  # When done
  sudo umount /mnt/disks/$NAME
  sudo cryptsetup close $NAME


Final note
^^^^^^^^^^

The applications we're looking at here have low performance demands and are temporary experiments, so performance is a secondary consideration that block storage can readily satisfy. Although we illustrated encrypting the Linode block storage, it's not really required for throw-away experiments.


Certificate Transparency and digital signatures
-----------------------------------------------

Our goal is to show how digital signatures are created and verified, with the added side benefit of introducing Google's `Certificate Transparency <https://www.certificate-transparency.org>`_ project.

Certificate Transparency goals
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From Google's Certificate Transparency `introductory documentation <https://www.certificate-transparency.org/what-is-ct>`_:

  Thanks to modern cryptography, browsers can usually detect malicious websites that are provisioned with forged or fake SSL certificates. However, current cryptographic mechanisms aren't so good at detecting malicious websites if they're provisioned with mistakenly issued certificates or certificates that have been issued by a certificate authority (CA) that's been compromised or gone rogue.

  One of the problems is that there is currently no easy or effective way to audit or monitor SSL certificates in real time, so when these missteps happen (malicious or otherwise), the suspect certificates aren't usually detected and revoked for weeks or even months.

  Certificate Transparency aims to remedy these certificate-based threats by making the issuance and existence of SSL certificates open to scrutiny by domain owners, CAs, and domain users. Specifically, Certificate Transparency has three main goals:

  * Make it impossible (or at least very difficult) for a CA to issue a SSL certificate for a domain without the certificate being visible to the owner of that domain.
  * Provide an open auditing and monitoring system that lets any domain owner or CA determine whether certificates have been mistakenly or maliciously issued.
  * Protect users (as much as possible) from being duped by certificates that were mistakenly or maliciously issued.


Checking Certicate Transparency digital signatures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Certificate Transparency - Known Logs <https://www.certificate-transparency.org/known-logs>`_ has:

* List of CT Logs ... include in Chrome:

  https://www.gstatic.com/ct/log_list/log_list.json

* log_list.json is signed by Google, the signature being hosted at:

  https://www.gstatic.com/ct/log_list/log_list.sig

* The public key to verify log_list.sig can be found at:

  https://www.gstatic.com/ct/log_list/log_list_pubkey.pem

See `Sign and verify using OpenSSL <https://www.zimuel.it/blog/sign-and-verify-a-file-using-openssl>`_ for background. Also see `Some list of openssl commands for check and verify your keys <https://gist.github.com/webtobesocial/5313b0d7abc25e06c2d78f8b767d4bc3>`_.

To validate the cert and signature:

.. code-block:: bash
  :emphasize-lines: 1,6,8-10,12-15,17-19,21-22

  # Get the json file, signature, and public key
  curl -O https://www.gstatic.com/ct/log_list/log_list.json
  curl -O https://www.gstatic.com/ct/log_list/log_list.sig
  curl -O https://www.gstatic.com/ct/log_list/log_list_pubkey.pem

  # See which ones are text and view them
  file log_list*
  cat cert.pem
  openssl pkey -inform PEM -pubin -in log_list_pubkey.pem -text -noout
  # openssl rsa -inform PEM -pubin -in log_list_pubkey.pem -text -noout

  # Assume signature steps are:
  #   Create digest, sign digest with private key.
  # Then signature verification steps are:
  #   Create digest, verify signature with public key.

  # They don't say which digest, but openssl ones are:
  # md4, md5, mdc2, ripemd160, sha, sha1, sha224, sha256, sha384, sha512, whirlpool
  openssl dgst --help

  # sha256 = Verfied OK
  openssl dgst -sha256 -verify log_list_pubkey.pem -signature log_list.sig  log_list.json
  # sha512 Verification failure
  openssl dgst -sha512 -verify log_list_pubkey.pem -signature log_list.sig  log_list.json


Other uses of Certificate Transparency
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Certificate transparency streams have found use in pentest tools like `slurp <https://github.com/bbb31/slurp>`_ to enumerate S3 buckets manually or via `certstream <https://certstream.calidog.io/>`_ (which uses Certificate Transparency).


Study this week
===============


Metasploit Unleashed
--------------------

We're not going to reproduce the entire `Metasploit Unleashed  <https://www.offensive-security.com/metasploit-unleashed/>`_ guide here, but just pick out a few key beginning points to consider.


Starting up Metasploit on Kali
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Kali doesn't start services by default:

.. code-block:: bash

  sudo systemctl start postgresql
  # Do this once
  sudo msfdb init
  sudo msfconsole
  db_rebuild_cache


``msfconsole`` without user interaction
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The :kbd:`-x` and :kbd:`-r` options can be use to automate ``msfconsole`` execution:

.. code-block:: bash
  :emphasize-lines: 1,3,6

  msfconsole -x "use payload/linux/x86/exec; options; exit"

  cat <<'EOF' | msfconsole -r -
  use payload/linux/x86/exec
  options
  exit
  EOF


Workspaces
^^^^^^^^^^

Workspaces are ways to separate different projects:

.. code-block:: bash
  :emphasize-lines: 5,8-9,13

  msfconsole
  db_status
  workspace

  workspace -a demo
  workspace

  db_nmap localhost
  hosts
  creds
  loot
  notes
  services
  vulns


Data export
^^^^^^^^^^^

A variety of data can be exported:

.. code-block:: bash
  :emphasize-lines: 1,5-6,8-9,13,16

  workspace demo
  pwd
  mkdir msf
  cd msf
  db_export -f xml demo.xml
  workspace -d demo

  workspace -a demo
  db_import demo.xml
  hosts
  services

  services -o services.csv
  cat services.csv
  services -h
  services -c name,port -o services_hp.csv
  cat services_hp.csv


Exploits
^^^^^^^^

Metasploit of course has exploits:

.. code-block:: bash
  :emphasize-lines: 1-3,5-6,10-12,14

  show exploits
  search trans2open
  info exploit/linux/samba/trans2open

  use exploit/linux/samba/trans2open
  show options
  show advanced
  show evasion
  show payloads
  set RHOST localhost
  set RPORT localhost
  run
  : # control-C to stop this
  back


Meterpreter
^^^^^^^^^^^

See `Meterpreter Basic Commands <https://www.offensive-security.com/metasploit-unleashed/meterpreter-basics/>`_ for command capabilities when you break into  host. What's really interesting is that you can place a meterpreter session in the ``background``, then use ``sessions`` to list & connect back to one of the sessions. ``getuid`` lists the local id for Meterpreter (System on Windows is nirvana) while ``hashdump`` can get the password hashes. And ``migrate`` can be very useful when a meterpreter session is unstable and terminates quickly.


And lots more
^^^^^^^^^^^^^

There's information gathering, vulnderbility scanning, ... . Follow the `Metasploit Unleashed <https://www.offensive-security.com/metasploit-unleashed/>`_ guide.

