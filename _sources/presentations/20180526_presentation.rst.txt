.. include:: /pentest_links.txt


**********************************************
2018-05-26 Links, Containers, and Cryptography
**********************************************


Links and updates this week
===========================


Links around the web
--------------------


Cloud
^^^^^

#. `Microsoft wins lucrative cloud deal with intelligence community <http://www.spokesman.com/stories/2018/may/16/microsoft-wins-lucrative-cloud-deal-with-intellige/>`_

   Microsoft’s new deal renews and expands a previous agreement between the Office of the Director of National Intelligence and Dell Inc., which licenses Microsoft’s products to the federal government. The Office of the Director of National Intelligence manages the efforts of the Central Intelligence Agency, the National Security Agency and parts of other agencies, including the Defense Department. Under the deal, each agency can choose whether and when to adopt Microsoft’s cloud, Barnes said.

   As part of a separate deal, the Defense Department has said it intends to move the department’s technology needs – 3.4 million users and 4 million devices – to the cloud to give it a tactical edge on the battlefield and strengthen its use of emerging technologies.

   Microsoft’s entry into the intelligence community follows Amazon’s 2013 contract with the Central Intelligence Agency. That $600 million deal has elicited praise from Defense Secretary James Mattis.


Tech
^^^^

#. `About $1.2 billion in cryptocurrency stolen since 2017: cybercrime group <https://www.reuters.com/article/us-crypto-currency-crime/about-1-2-billion-in-cryptocurrency-stolen-since-2017-cybercrime-group-idUSKCN1IP2LU>`_

#. `The percentage of open source code in proprietary apps is rising <https://www.helpnetsecurity.com/2018/05/22/open-source-code-security-risk/>`_:

   * 96 percent of the scanned applications contain open source components, with an average 257 components per application, and that

   * The average percentage of open source in the codebases of the applications scanned grew from 36% last year to 57%, suggesting that a large number of applications now contain much more open source than proprietary code.

#. `Lattice-based cryptography <https://en.wikipedia.org/wiki/Lattice-based_cryptography>`_

   **Lattice-based cryptography** is the generic term for constructions of cryptographic primitives that involve lattices, either in the construction itself or in the security proof. Lattice-based constructions are currently important candidates for `post-quantum cryptography <https://en.wikipedia.org/wiki/Post-quantum_cryptography>`_. Unlike more widely used and known public-key schemes such as the `RSA <https://en.wikipedia.org/wiki/RSA_(cryptosystem)>`_, `Diffie-Hellman <https://en.wikipedia.org/wiki/Diffie-Hellman>`_ or `Elliptic-Curve <https://en.wikipedia.org/wiki/Elliptic-curve_cryptography>`_ cryptosystems, which are `easily attacked <https://en.wikipedia.org/wiki/Shor%27s_algorithm>`_ by a `quantum computer <https://en.wikipedia.org/wiki/Quantum_computing>`_, some lattice-based constructions appear to be resistant to attack by both classical and quantum computers. Furthermore, many lattice-based constructions are known to be secure under the `assumption <https://en.wikipedia.org/wiki/Computational_hardness_assumption>`_ that certain well-studied `computational lattice problems <https://en.wikipedia.org/wiki/Lattice_problem>`_ cannot be solved efficiently.

#. `speculative execution, variant 4: speculative store bypass <https://bugs.chromium.org/p/project-zero/issues/detail?id=1528>`_

   `US-CERT Alert (TA18-141A) <https://www.us-cert.gov/ncas/alerts/TA18-141A>`_

   `Side Channel Methods - Analysis, News and Updates <https://www.intel.com/content/www/us/en/architecture-and-technology/facts-about-side-channel-analysis-and-intel-products.html>`_

   `arm Developer - Speculative Processor Vulnerability <https://developer.arm.com/support/arm-security-updates/speculative-processor-vulnerability>`_

   `“Speculative Store Bypass” Vulnerability Mitigations for AMD Platforms <https://www.amd.com/en/corporate/security-updates>`_


Tools
^^^^^

#. `Announcing CERT Tapioca 2.0 for Network Traffic Analysis <https://insights.sei.cmu.edu/cert/2018/05/announcing-cert-tapioca-20-for-network-traffic-analysis.html>`_

#. `Microsoft: Here's why Windows Defender AV isn't ranked higher in new antivirus tests <https://www.zdnet.com/article/microsoft-heres-why-windows-defender-av-isnt-ranked-higher-in-new-antivirus-tests/>`_, `The best antivirus software for Windows Home User <https://www.av-test.org/en/antivirus/home-windows/windows-7/february-2018/>`_, and Microsoft's `Examining the AV-TEST January-February 2018 Results <https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE27O5A?ocid=cx-blog-mmpc>`_

#. `Black - The Uncompromising Code Formatter <https://github.com/ambv/black>`_


Study links
^^^^^^^^^^^

#. `IN APPLE MAIL, THERE’S NO PROTECTING PGP-ENCRYPTED MESSAGES <https://theintercept.com/2018/05/25/in-apple-mail-theres-no-protecting-pgp-encrypted-messages/>`_

#. VPNFilter

   #. `New VPNFilter malware targets at least 500K networking devices worldwide <https://blog.talosintelligence.com/2018/05/VPNFilter.html>`_

   #. `VPNFilter: New Router Malware with Destructive Capabilities <https://www.symantec.com/blogs/threat-intelligence/vpnfilter-iot-malware>`_

   #. `Exclusive: FBI Seizes Control of Russian Botnet <https://www.thedailybeast.com/exclusive-fbi-seizes-control-of-russian-botnet>`_

   #. `FBI tells router users to reboot now to kill malware infecting 500k devices <https://arstechnica.com/information-technology/2018/05/fbi-tells-router-users-to-reboot-now-to-kill-malware-infecting-500k-devices/>`_

#. `SEVered: Subverting AMD’s Virtual Machine Encryption <https://arxiv.org/pdf/1805.09604.pdf>`_

#. `Z-Shave. Exploiting Z-Wave downgrade attacks <https://www.pentestpartners.com/security-blog/z-shave-exploiting-z-wave-downgrade-attacks/>`_ and `Z-Shave Attack Could Impact Over 100 Million IoT Devices <https://www.bleepingcomputer.com/news/security/z-shave-attack-could-impact-over-100-million-iot-devices/>`_

#. `Compromising Thousands of Websites Through a CDN <https://justi.cz/security/2018/05/23/cdn-tar-oops.html>`_

#. `Experimental Security Assessment of BMW Cars: A Summary Report <https://keenlab.tencent.com/en/Experimental_Security_Assessment_of_BMW_Cars_by_KeenLab.pdf>`_

#. `SSRF in Exchange leads to ROOT access in all instances <https://hackerone.com/reports/341876>`_ - Shopify

#. `CVE-2018-5175: Universal CSP strict-dynamic bypass in Firefox <https://mksben.l0.cm/2018/05/cve-2018-5175-firefox-csp-strict-dynamic-bypass.html>`_
   
#. `Electron Windows Protocol Handler MITM/RCE (bypass for CVE-2018-1000006 fix) <https://blog.doyensec.com/2018/05/24/electron-win-protocol-handler-bug-bypass.html>`_

#. `An Analysis of Cloudflare's Email Address Obfuscation <https://blog.jli.host/posts/cloudflare-scrape-shield/>`_

#. `A New Tor Attack <http://hackerfactor.com/blog/index.php?/archives/804-A-New-Tor-Attack.html>`_

#. `The Curious Case of Encrypted URL Parameters <https://blog.silentsignal.eu/2018/05/22/the-curious-case-of-encrypted-url-parameters/>`_

#. `Linux ext4: out-of-bounds memcpy via non-inline system.data xattr <https://bugs.chromium.org/p/project-zero/issues/detail?id=1580>`_

#. `reddit amanhardikar.com <https://www.reddit.com/domain/amanhardikar.com/>`_

#. `$36k Google App Engine RCE <https://sites.google.com/site/testsitehacking/-36k-google-app-engine-rce>`_ - found by 18 year old student at University of the Republic in Uruguay

#. `Kerberoasting, exploiting unpatched systems - a day in the life of a Red Teamer <http://niiconsulting.com/checkmate/2018/05/kerberoasting-exploiting-unpatched-systems-a-day-in-the-life-of-a-red-teamer/>`_

#. `Extracting SSH Private Keys from Windows 10 ssh-agent <https://blog.ropnop.com/extracting-ssh-private-keys-from-windows-10-ssh-agent/>`_

#. `BREAKING NAMESPACE ISOLATION WITH PF_RING BEFORE 7.0.0 <https://www.synacktiv.com/posts/systems/breaking-namespace-isolation-with-pf_ring-before-700.html>`_

#. `Shining a Light on OAuth Abuse with PwnAuth <https://www.fireeye.com/blog/threat-research/2018/05/shining-a-light-on-oauth-abuse-with-pwnauth.html>`_


Privacy links
^^^^^^^^^^^^^

#. `Amazon confirms that Echo device secretly shared user’s private audio <https://arstechnica.com/gadgets/2018/05/amazon-confirms-that-echo-device-secretly-shared-users-private-audio/>`_ - "... an Echo device in Oregon sent private audio to someone on a user's contact list without permission."

#. `Potential Spy Devices Which Track Cellphones, Intercept Calls Found All Over D.C., Md., Va. <https://www.nbcwashington.com/investigations/Potential-Spy-Devices-Which-Track-Cellphones-Intercept-Calls-Found-All-Over-DC-Md-Va-482970231.html>`_ and earlier `APNewsBreak: US suspects cellphone spying devices in DC <https://apnews.com/d716aac4ad744b4cae3c6b13dce12d7e>`_

#. `Amazon Pushes Facial Recognition to Police. Critics See Surveillance Risk. <https://www.nytimes.com/2018/05/22/technology/amazon-facial-recognition.html>`_


Cultural/Legal/Political
^^^^^^^^^^^^^^^^^^^^^^^^

#. `Facebook accused of conducting mass surveillance through its apps <https://www.theguardian.com/technology/2018/may/24/facebook-accused-of-conducting-mass-surveillance-through-its-apps>`_

#. GDPR

   #. `Comment: Apple’s example shows how Europe’s new privacy law will benefit people worldwide <https://9to5mac.com/2018/05/25/gdpr-apple/>`_

   #. `Activists Are Already Targeting Google and Facebook Over Europe's New Data Privacy Law That Went Live Today <http://fortune.com/2018/05/25/google-facebook-gdpr-forced-consent/>`_

   #. `U.S. News Outlets Block European Readers Over New Privacy Rules <https://www.nytimes.com/2018/05/25/business/media/europe-privacy-gdpr-us.html>`_

   #. `GDPR for lazy people: Block all European users with Cloudflare Workers <https://apility.io/2018/05/25/gdpr-lazy-block-european-users-cloudflare-workers/>`_

   #. `13 things to know about the GDPR <https://blog.mozilla.org/internetcitizen/2018/05/23/gdpr-mozilla/>`_

   #. `Because of #GDPR, USA Today decided to run a separate version of their website for EU users <https://twitter.com/fr3ino/status/1000166112615714816>`_

      ... has all the tracking scripts and ads removed. The site seemed very fast, so I did a performance audit. How fast the internet could be without all the junk! 5.2MB → 500KB

#. `90 percent of financial institutions targeted by ransomware in the last year <https://betanews.com/2018/05/22/financial-institutions-ransomware/>`_

#. `China is exporting facial recognition software to Africa, expanding its vast database <https://qz.com/1287675/china-is-exporting-facial-recognition-to-africa-ensuring-ai-dominance-through-diversity/>`_


Hacking links
^^^^^^^^^^^^^

#. `Android devices ship with pre-installed malware <https://blog.avast.com/android-devices-ship-with-pre-installed-malware>`_

#. `How North Korean hackers became the world’s greatest bank robbers <https://gpinvestigations.pri.org/how-north-korean-hackers-became-the-worlds-greatest-bank-robbers-492a323732a6>`_

#. `Roaming Mantis dabbles in mining and phishing multilingually <https://securelist.com/roaming-mantis-dabbles-in-mining-and-phishing-multilingually/85607/>`_

#. `T-Mobile bug let anyone see any customer's account details <https://www.zdnet.com/article/tmobile-bug-let-anyone-see-any-customers-account-details/>`_

#. `Comcast bug made it shockingly easy to steal customers’ Wi-Fi passwords <https://arstechnica.com/information-technology/2018/05/comcast-bug-made-it-shockingly-easy-to-steal-customers-wi-fi-passwords/>`_

#. `Backdoor Account Found in D-Link DIR-620 Routers <https://www.bleepingcomputer.com/news/security/backdoor-account-found-in-d-link-dir-620-routers/>`_


Study this week
===============


Windows containers
------------------


Windows container types
^^^^^^^^^^^^^^^^^^^^^^^

`Windows Containers <https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/>`_ section *Windows Containers Types* lists:

Windows Server Containers
  Uses process and namespace isolation technology to share host kernel with containers. Requires same kernel version and configuration across host and containers.

Hyper-V Isolation
  Runs each container in a highly optimized virutal machine with the kernel not shared. Both Linux and Windows containers are supported.

Which container execution type can be decided at runtime.

Installing Docker on Windows 10 defaults to running Linux containers, requiring a PowerShell command or Docker tray-menu to switch to Windows containers. Windows 10 can run either Windows or Linux containters, but not both simultaneously.


Windows Home
^^^^^^^^^^^^

Windows Home does not support Hyper-V and so requires Docker Toolbox (based on VirtualBox): see `Docker Toolbox overview <https://docs.docker.com/toolbox/overview/>`_ and `Install Docker Toolbox on Windows <https://docs.docker.com/toolbox/toolbox_install_windows/>`_. Only Linux containers are supported. Some users needed to change DNS server settings (8.8.8.8 worked) to pull from the Docker repo. Building the sphinx-doc container on Windows elicited this error message:

.. code-block:: console

  SECURITY WARNING: You are building a Docker image from Windows against a non-Windows Docker host. All files and directories added to build context will have '-rwxr-xr-x' permissions. It is recommended to double check and reset permissions for sensitive files and directories.


Container security
------------------


Containers allow users to get root access
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From `Why we don't let non-root users run Docker in CentOS, Fedora, or RHEL <http://www.projectatomic.io/blog/2015/08/why-we-dont-let-non-root-users-run-docker-in-centos-fedora-or-rhel/>`_ the following command gives a docker users full root access to the host system:

.. code-block:: bash

  docker run -ti --privileged -v /:/host fedora chroot /host

It does so with less auditing than ``sudo``, leading them to conclude:

  We believe the security of managing the docker daemon needs a lot of improvement, before we can think of opening up access to non-privileged users directly. Until these fixes are made ``sudo`` is the best option. We’re working on better options, but for the time being we strongly recommend using ``sudo``.


Don't run processes in containers as root
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Follow `Processes In Containers Should Not Run As Root <https://medium.com/@mccode/processes-in-containers-should-not-run-as-root-2feae3f0df3b>`_ to create a user at container image build time, or specify a user at run time. Note that user 65534 (nobody) can be a good choice.


Using containers instead of installs
------------------------------------


Containers as a server vs application
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We'll show 2 container examples:

* server - UniFi Controller

  Normally the UniFi Controller is run on a server, and the container implementation replaces the server.

* application - Sphinx-doc processing

  The Sphinx-doc container is used to do part of the processing for creating Sphinx documents: building the document and displaying it in a web server. But the actual document editing can be done in the host. As an example:

  .. code-block:: bash
    :emphasize-lines: 1-2,5,8-9,11-

    # ... edit the Sphinx documents with host programs
    # Make html and epub in the container
    docker run -t --rm  -u $(id -u):$(id -g) -v "$(pwd)":/web dldl/sphinx-server make clean html epub

    # Now serve up html in another terminal
    docker run -itd -v "$(pwd)":/web -u $(id -u):$(id -g) -p 8000:8000 --name sphinx-server dldl/sphinx-server

    # Back in the original terminal
    # View results in browser, edit files, then update html
    docker exec -t sphinx-server make html
    # Note - "make clean" deletes the html folders and may require restarting the sphinx-server
    # Repeat the above

Note that the application container is like having extra command line programs, unlike the server container.


UniFi Controller as a server container
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


A failed install on Ubuntu 18.04
""""""""""""""""""""""""""""""""

We gave up installing the UniFi Controller (from `UniFi downloads <https://www.ubnt.com/download/unifi/>`_) on Ubuntu 18.04 (bionic) desktop. Partway through the install debacle we found the thread `Unifi controller on Ubuntu 18.04 <https://community.ubnt.com/t5/UniFi-Wireless/Unifi-controller-on-Ubuntu-18-04/td-p/2331657>`_ which provided insight into all but one of the problems:

* Ubuntu 18.04 uses mongodb version 3.6 which has 2 issues:

  * 3.6 doesn't support the ``--nohttpinterface`` command line argument, requiring :file:`/usr/bin/mongod` be replaced with a script to filter out that argument.

  * 3.6 cannot open a 3.2 database, but can open 3.4 forcing some users to upgrade the database to 3.4 first.

    Note that you can use containers to start up a mongodb 3.4 instance to accept the conversion commands:

    .. code-block:: bash
      :emphasize-lines: 1,3,8

      # Start up mongodb 3.4 in a container
      docker run --name mongo-migrate -v /var/lib/unifi/db:/data/db -p 127.0.0.1:27888:27017 -d mongo:3.4
      # Run these mongodb commands to convert the database
      mongo localhost:27888
      db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )
      db.adminCommand( { setFeatureCompatibilityVersion: "3.4" } )
      db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )
      # Then stop the container and fix permissions
      docker stop mongo-migrate
      sudo chown -R unifi:unifi /var/lib/unifi/db

* Ubuntu 18.04 installs Java 11 but Java 8 must also be installed for UniFi Controller.

But we were still left with a Java cacert issue, which led us to stop the install madness and try to find a UniFi Controller container to run on Ubuntu 18.04. The discussion `Docker container image for UniFi Controller <https://community.ubnt.com/t5/UniFi-Routing-Switching/Docker-container-image-for-UniFi-Controller/td-p/1941021>`_ led to the container `jacobalberty/unifi <https://hub.docker.com/r/jacobalberty/unifi/>`_ providing the LTS UniFi Controller but not the more recent stable version. The little-used fork `jcberthon/unifi-docker <https://github.com/jcberthon/unifi-docker>`_ was selected because it supports the desired stable UniFi Controller version.


Setting up the UniFi Controller container
"""""""""""""""""""""""""""""""""""""""""

We'll assume you follow `Get Docker CE for Ubuntu <https://docs.docker.com/install/linux/docker-ce/ubuntu/>`_. Note that Ubuntu 18.04 (bionic) must currently use the edge channel (stable for Ubuntu bionic was empty); for Kali, ``lsb_release -cs`` will have to be replaced with the current Debian testing release "buster". To use the container:

.. code-block:: bash
  :emphasize-lines: 1,5-

  # Persistent data and logs accessible by container user unifi (750.750)
  mkdir -p ~/unifi/{data,logs}
  sudo chown 750:750 ~/unifi/{data,logs}
  # Run the container with minimal privileges, no STUN port (UDP 3478)
  sudo docker run --rm --cap-drop ALL -e TZ='America/Los_Angeles' \
    -p 8080:8080 -p 8443:8443 -p 8843:8843 \
    -v ~/unifi/data:/var/lib/unifi \
    -v ~/unifi/logs:/var/log/unifi \
    --name unifi jcberthon/unifi

After the usual initial setup (see the UniFi Controller User Guide at `UniFi downloads <https://www.ubnt.com/download/unifi/>`_), the author went to :menuselection:`SETTINGS --> Wireless Networks` to complete the SSID and VLAN settings, then adopt the UniFi AP. That required following the *No Password Option* in `UniFi - Advanced Adoption of a "Managed By Other" Device <https://help.ubnt.com/hc/en-us/articles/205146020-UniFi-Advanced-Adoption-of-a-Managed-By-Other-UAP>`_, using `UniFi - How to Reset a Security Gateway to its Default Settings <https://help.ubnt.com/hc/en-us/articles/204959554>`_ with `UniFi - Default Username and Password <https://help.ubnt.com/hc/en-us/articles/204909374>`_.

Before terminating the container make a database backup via :menuselection:`SETTINGS --> Maintenance --> BACKUP --> DOWNLOAD BACKUP` and save it in :file:`~/unifi/`.


Container termination means?
""""""""""""""""""""""""""""

After the AP is adopted and updated, the container can be terminated with ``docker stop unifi``. Since a Docker Volume was used, starting up the container again will use the existing database and therefore already be configured with the existing UniFi APs. It's similar to starting and stopping a VM, with the addition that the latest container image version is used.


Moving the container to the cloud
"""""""""""""""""""""""""""""""""

After successfully testing the container on a local desktop and obtaining a data backup via the web GUI, it is simple to recreate the container at a cloud provider: run the docker container there, go through initial setup, restore the data backup via the web GUI, and finally change the APs to use the new controller IP (which can be accomplished via a DNS change).


Why was the container so easy?
""""""""""""""""""""""""""""""

Installing the UniFi controller and other applications can be a problem because:

* The vendor installation procedure doesn't work the same (or sometimes at all) on the wide variety of supported systems.

* New operating systems (currently Ubuntu 18.04) are often not supported.

* Existing host software packages can conflict with those required by the application.

* Using VMs would require an OS install/configuration before the application install.

In contrast, containers are prepackaged applications with minimal configuration that can be run anywhere supporting Docker. The hard work's already been done.


Using Sphinx in an application container
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Modifying the container build
"""""""""""""""""""""""""""""

The `Docker Hub dldl/sphinx-server <https://hub.docker.com/r/dldl/sphinx-server/>`_ is a Sphinx implementation based on Alpine Linux with the Docker build based on `GitHub dldl/sphinx-server <https://github.com/dldl/sphinx-server>`_. It was modified to use the latest Alpine Linux (currently 3.7 vs the fixed 3.5), Python 3 (vs Python 2), and removed the capability to auto rebuild the document (forcing manual rebuild):

.. code-block:: bash
  :emphasize-lines: 1,6,29,31,35

  git clone https://github.com/dldl/sphinx-server
  cd sphinx-server/
  git rm .sphinx-server.yml
  git rm .travis.yml

  cat > Dockerfile <<'EOF'
  FROM alpine:latest

  MAINTAINER Loïc Pauletto <loic.pauletto@gmail.com>
  MAINTAINER Quentin de Longraye <quentin@dldl.fr>

  RUN apk add --no-cache --virtual --update python3 py3-pip make wget ca-certificates ttf-dejavu openjdk8-jre graphviz \
      && pip3 install --upgrade pip \
      && pip install --upgrade setuptools \
      && pip install sphinx sphinx_rtd_theme sphinxcontrib-plantuml sphinx_autobuild \
      && ln -s /usr/bin/python3 /usr/bin/python

  RUN wget http://downloads.sourceforge.net/project/plantuml/plantuml.jar -P /opt/ \
      && echo -e '#!/bin/sh -e\njava -jar /opt/plantuml.jar "$@"' > /usr/local/bin/plantuml \
      && chmod +x /usr/local/bin/plantuml

  COPY ./server.sh /opt/sphinx-server/server.sh

  WORKDIR /web

  EXPOSE 8000

  CMD ["/opt/sphinx-server/server.sh"]
  EOF

  cat > server.sh <<'EOF'
  #!/bin/sh -e
  cd /web/build/html
  python3 -m http.server 8000
  EOF

Then to create and use the Docker image:

.. code-block:: bash
  :emphasize-lines: 1,4,10,13,16-18,20

  # Build docker image
  docker build -t dldl/sphinx-server .

  # Build existing content
  cd ..
  git clone git@bitbucket.org:bitbender/pentest-meetup.git
  cd pentest-meetup
  docker run -t --rm  -u $(id -u):$(id -g) -v "$(pwd)":/web dldl/sphinx-server make clean html
  docker run -t --rm  -u $(id -u):$(id -g) -v "$(pwd)":/web dldl/sphinx-server make epub

  # Serve it up on port 8000
  docker run -itd -v "$(pwd)":/web -u $(id -u):$(id -g) -p 8000:8000 --name sphinx-server dldl/sphinx-server

  # Edit and change files, then ...
  docker exec -t sphinx-server make html

  # View changes on port 8000
  # ... more work
  # Then final build
  docker exec -t sphinx-server make clean html epub
  # View results on port 8000

Now on to the problem of publishing the HTML to GitHub.


Cryptography
------------

Please see :ref:`crypto` for a continuation of our cryptography discussion.

Also from `Do Not Use sha256crypt / sha512crypt - They're Dangerous <https://pthree.org/2018/05/23/do-not-use-sha256crypt-sha512crypt-theyre-dangerous/>`_:

  For hashing passwords, in order of preference, use with an appropriate cost:

  #. Argon2 or scrypt (CPU and RAM hard)
  #. bcrypt or PBKDF2 (CPU hard only)

  Avoid practically everything else:

  #. md5crypt, sha256crypt, and sha512crypt
  #. Any generic cryptographic hashing function (MD5, SHA-1, SHA-2, SHA-3, BLAKE2, etc.)
  #. Any complex homebrew iterative design (10,000 iterations of salted SHA-256, etc.)
  #. Any encryption design (AES, Blowfish (ugh), ChaCha20, etc.)
