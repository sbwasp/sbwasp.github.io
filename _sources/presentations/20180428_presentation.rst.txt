.. include:: /pentest_links.txt


**********************************************
2018-04-28 Links, Containers, and Cryptography
**********************************************


Links and updates this week
===========================


Links around the web
--------------------


Cloud
^^^^^

#. `THE CLOUD SHADOW ADMIN THREAT: 10 PERMISSIONS TO PROTECT <https://www.cyberark.com/threat-research-blog/cloud-shadow-admin-threat-10-permissions-protect/>`_


Tech
^^^^

#. `We Don’t Know What To Do if a Satellite Gets Hacked <https://theoutline.com/post/4255/what-happens-if-satellite-hack-cyberspace>`_ - "Hundreds of multi-ton liabilities—soaring faster than the speed of sound, miles above the surface of the earth—are operating on Windows-95."

#. `Behind the scenes with the hackers who unlocked the Nintendo Switch <https://arstechnica.com/gaming/2018/04/behind-the-scenes-with-the-hackers-who-unlocked-the-nintendo-switch/>`_


Tools
^^^^^

#. `Introducing Azucar <https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/april/introducing-azucar/>`_ - "Azucar is a multi-threaded plugin-based tool to help assess the security of Azure Cloud environment subscriptions."

#. `Notes on structured concurrency, or: Go statement considered harmful <https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/>`_

#. `A look at terminal emulators, part 1 <https://lwn.net/Articles/749992/>`_

#. `Gitmails <https://github.com/giovanifss/Gitmails>`_ - "An information gathering tool to colect git commit emails in version control host services."

#. `RedHunt Linux Distribution (VM) <https://github.com/redhuntlabs/RedHunt-OS/>`_ - "RedHunt aims to be a one stop shop for all your threat emulation and threat hunting needs by integrating attacker's arsenal as well as defender's toolkit to actively identify the threats in your environment."

#. `Red Team Automation (RTA) <https://github.com/endgameinc/RTA>`_ - "RTA provides a framework of scripts designed to allow blue teams to test their detection capabilities against malicious tradecraft, modeled after `MITRE ATT&CK <https://attack.mitre.org/wiki/ATT&CK_Matrix>`_."

#. `Grouper <https://github.com/l0ss/Grouper>`_ - "A PowerShell script for helping to find vulnerable settings in AD Group Policy."


Study links
^^^^^^^^^^^

#. `Endpoint Isolation with the Windows Firewall <https://medium.com/@cryps1s/endpoint-isolation-with-the-windows-firewall-462a795f4cfb>`_

   This post is going to focus on using the Windows Firewall for isolating and securing endpoints in an Active Directory environment. The goal is to limit the potential attack surface of endpoints by limiting access to potentially exploitable services, require IPSEC authentication to management services, and provide additional encryption to services which rely on plaintext or weak ciphers. The configurations listed in this post should be immediately deployable in a production environment and ultimate make our adversary’s lateral movement attempts that much more frustrating.

#. `Exploiting Branch Target Injection <https://drive.google.com/file/d/1caH71xMYbkB3q-HCkzsMhVK1_mWjz0yw/view>`_

#. `Homemade Stingray - Spoofing GPS/GSM (and more) with a VGA adapter <https://osmocom.org/projects/osmo-fl2k/wiki>`_ and slides `osmo-fl2k: Using cheap USB 3.0 VGA adapters as SDR transmitter <http://people.osmocom.org/steve-m/fl2k_slides/osmo-fl2k.html>`_

   From `SPOOFING CELL NETWORKS WITH A USB TO VGA ADAPTER <https://hackaday.com/2018/04/23/spoofing-cell-networks-with-a-usb-to-vga-adapter/>`_:

     In a demonstration on the project page, one of these USB VGA adapters is used to broadcast a GSM cellular network which is picked up by the adjacent cell phones. Another example shows how it can be used to broadcast FM radio. A `GitHub repository <https://github.com/steve-m/fl2k-examples>`_ has been set up which includes more examples. The signals transmitted from the FL2000 chip are obviously quite weak, but the next step will logically be the hardware modifications necessary to boost transmission to more useful levels.

#. `A bunch of Red Pills: VMware Escapes <https://keenlab.tencent.com/en/2018/04/23/A-bunch-of-Red-Pills-VMware-Escapes/>`_

#. `.NET Deserialization To NTLM Hashes <https://www.digitalinterruption.com/single-post/2018/04/22/NET-Deserialization-to-NTLM-hashes>`_

#. `Breaking bad to make good: Firefox CVE-2017–7843 <https://medium.com/@konarkmodi/breaking-bad-to-make-good-firefox-cve-2017-7843-219034357496>`_

#. `Abusing MySQL LOCAL INFILE to read client files <https://w00tsec.blogspot.com/2018/04/abusing-mysql-local-infile-to-read.html>`_

#. `Abusing DCOM For Yet Another Lateral Movement Technique <https://bohops.com/2018/04/28/abusing-dcom-for-yet-another-lateral-movement-technique/>`_

#. `Exploiting CVE-2018-1038 - Total Meltdown <https://blog.xpnsec.com/total-meltdown-cve-2018-1038/>`_

#. `Satan ransomware adds EternalBlue exploit <https://bartblaze.blogspot.com/2018/04/satan-ransomware-adds-eternalblue.html>`_

#. `Malspam pushing ransomware using two layers of password protection to avoid detection <https://isc.sans.edu/forums/diary/Malspam+pushing+ransomware+using+two+layers+of+password+protection+to+avoid+detection/23573/>`_

#. `Living Off The Land Binaries and Scripts <https://github.com/api0cradle/LOLBAS>`_ - "The goal of these lists are to document every binary and script that can be used for other purposes than they are designed to."

#. `How to scrape the web and not get caught <https://tinyendian.com/articles/how-to-scrape-the-web-and-not-get-caught/>`_ - proxies


Privacy links
^^^^^^^^^^^^^

#. `Who Has More of Your Personal Data Than Facebook? Try Google <https://www.wsj.com/articles/who-has-more-of-your-personal-data-than-facebook-try-google-1524398401>`_

#. `RESEARCHERS HACKED AMAZON’S ALEXA TO SPY ON USERS, AGAIN <https://threatpost.com/researchers-hacked-amazons-alexa-to-spy-on-users-again/>`_

#. `Hackers built a 'master key' for millions of hotel rooms <https://www.zdnet.com/article/millions-of-hotel-door-locks-bypass-with-master-key/>`_

#. `More than 1 million kids had their identities stolen in 2017 <https://nypost.com/2018/04/24/more-than-1-million-kids-had-their-identities-stolen-in-2017/>`_


Cultural/Legal/Political
^^^^^^^^^^^^^^^^^^^^^^^^

#. `Europol Shuts Down World's Largest DDoS-for-Hire Service <https://www.bleepingcomputer.com/news/security/europol-shuts-down-worlds-largest-ddos-for-hire-service/>`_

#. `Atlanta projected to spend at least $2.6 million on ransomware recovery <https://www.zdnet.com/article/atlanta-spent-at-least-two-million-on-ransomware-attack-recovery/>`_


Hacking links
^^^^^^^^^^^^^

#. `Suspicious event hijacks Amazon traffic for 2 hours, steals cryptocurrency <https://arstechnica.com/information-technology/2018/04/suspicious-event-hijacks-amazon-traffic-for-2-hours-steals-cryptocurrency/>`_ - "Almost 1,300 addresses for Amazon Route 53 rerouted for two hours."

   In a statement, Amazon officials wrote: "Neither AWS nor Amazon Route 53 were hacked or compromised. An upstream Internet Service Provider (ISP) was compromised by a malicious actor who then used that provider to announce a subset of Route 53 IP addresses to other networks with whom this ISP was peered. These peered networks, unaware of this issue, accepted these announcements and incorrectly directed a small percentage of traffic for a single customer’s domain to the malicious copy of that domain."

#. `Analyzing Operation GhostSecret: Attack Seeks to Steal Data Worldwide <https://securingtomorrow.mcafee.com/mcafee-labs/analyzing-operation-ghostsecret-attack-seeks-to-steal-data-worldwide>`_

#. `Drupal warns of new remote-code bug, the second in four weeks <https://arstechnica.com/information-technology/2018/04/with-drupalgeddon2-still-under-attack-drupal-fixes-a-new-critical-flaw/>`_ - another Drupal CVE

#. `New Orangeworm attack group targets the healthcare sector in the U.S., Europe, and Asia <https://www.symantec.com/blogs/threat-intelligence/orangeworm-targets-healthcare-us-europe-asia>`_

#. `LinkedIn AutoFill Exposed Visitor Name, Email to Third-Party Websites <https://lightningsecurity.io/blog/linkedin/>`_

#. `Over 20 Million Users Installed Malicious Ad Blockers From Chrome Store <https://thehackernews.com/2018/04/adblocker-chrome-extention.html>`_




Study this week
===============


Containers
----------


What are containers?
^^^^^^^^^^^^^^^^^^^^


Docker and others
"""""""""""""""""

Docker made containers popular, so start with `Docker overview <https://docs.docker.com/engine/docker-overview/>`_. See `Container Technology Wiki <https://www.aquasec.com/wiki>`_ for more links. Realize that:

* There are `Other Container Engines <https://www.aquasec.com/wiki/display/containers/Other+Container+Engines>`_ like CRI-O (`6 Reasons why CRI-O is the best runtime for Kubernetes <https://www.projectatomic.io/blog/2017/06/6-reasons-why-cri-o-is-the-best-runtime-for-kubernetes/>`_) and `rkt <https://coreos.com/rkt/>`_ (`rkt vs other projects <https://coreos.com/rkt/docs/latest/rkt-vs-other-projects.html>`_).

* Although Kubernetes (see `Kubernetes 101 <https://www.aquasec.com/wiki/display/containers/Kubernetes+101>`_) seems to have won the low-level orchestrator battle, there are `Other Container Orchestrators <https://www.aquasec.com/wiki/display/containers/Other+Container+Orchestrators>`_. Orchestrators allow running containers at scale. Some orchestrators like RedHat's `OpenShift <https://www.openshift.com/>`_ is built on Kubernetes (aka K8s).


What OSes are run?
""""""""""""""""""

There are 2 OS of concern: the host server running the containers (1 host, many containers), and the container's base image (or runtime engine) (part of each container).

For the host server, the usual Linux OS options are available but there are some container-optimized host OS that would make better choices: `CoreOS <https://coreos.com/>`_, `RancherOS <https://rancher.com/rancher-os/>`_, `Ubuntu Core <https://developer.ubuntu.com/core>`_, RedHat `Project Atomic <http://www.projectatomic.io/>`_ (note that RedHat purchased CoreOS), `Mesosphere DCOS <https://mesosphere.com/>`_, and VMware-optimized `VMware Photon <https://vmware.github.io/photon/>`_ (see `Container OS Comparison <https://blog.codeship.com/container-os-comparison/>`_ and `Virtual Private Cloud: CoreOS and RancherOS <https://blog.selectel.com/virtual-private-cloud-coreos-rancheros/>`_).

For the container's base image (runtime engine) it depends on the software required by the container. `Create a simple parent image using scratch <https://docs.docker.com/develop/develop-images/baseimages/#create-a-simple-parent-image-using-scratch>`_ makes a statically compiled application into a container. For example, if the container is a Go application then the container can be essentially empty as described in `Building Minimal Docker Containers for Go Applications <https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/>`_ (or parts of `Create the smallest possible Docker container <http://blog.xebia.com/create-the-smallest-possible-docker-container/>`_). There are some stripped down Linux distributions like `alpine <https://hub.docker.com/_/alpine/>`_ and `busybox <https://hub.docker.com/_/busybox/>`_. See `Kubernetes best practices: How and why to build small container images <https://cloudplatform.googleblog.com/2018/04/Kubernetes-best-practices-how-and-why-to-build-small-container-images.html>`_


Advantages and disadvantages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From `Containers at Google <https://cloud.google.com/containers/>`_:

  From Gmail to YouTube to Search, everything at Google runs in containers. Containerization allows our development teams to move fast, deploy software efficiently, and operate at an unprecedented scale. Each week, we start over two billion containers. We’ve learned a lot about running containerized workloads in production over the past decade, and we’ve `shared this knowledge <https://research.google.com/pubs/pub44843.html>`_ with the community along the way: from the early days of contributing `cgroups to the Linux kernel <https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt>`_, to taking designs from our internal tools and open sourcing them as the `Kubernetes <https://kubernetes.io/>`_ project.

So containers have significant advantages as detailed in the rest of the *Containers at Google* article: consistent environment; run anywhere due to the ubiquitous `Docker image format <https://cloud.google.com/container-registry/docs/concepts/image-formats>`_; isolation via virtualized CPU, memory, storage, and network; package application & dependencies into a version-controlled manifest; supports service-based architecture. Combined with orchestration like Kubernetes there are automated rollouts & rollbacks; service health monitoring; automated scaling; deploy to hybrid environments.

Also see `Top 7 benefits of using containers <https://blog.kumina.nl/2017/04/the-benefits-of-containers-and-container-technology/>`_, `Introduction to Containers: Concept, Pros and Cons, Orchestration, Docker, and Other Alternatives <https://medium.com/flow-ci/introduction-to-containers-concept-pros-and-cons-orchestration-docker-and-other-alternatives-9a2f1b61132c>`_ (disadvantages of security via less isolation, less flexible in OS, and networking); and `Container Challenges <https://www.aquasec.com/wiki/display/containers/Container+Challenges>`_ (containers don't persist data - idempotent, network, security, monitoring, cross-OS support).

Disadvantages include: containers are not right for all applications (bare metal apps, graphical apps); limited portability for containers with OS dependencies; weaker isolation (shared kernel); container sprawl leads to management issues; new so less mature; and something new to learn.

:ref:`The OWASP Juice Shop docker setup <juice_shop_docker_setup>` shows the advance :ref:`challenge setup <challenge_setup_advancing>`. The `Dockerfile bug report <https://github.com/conda-forge/graphviz-feedstock/issues/18#issuecomment-346487452>`_ shows using Docker to precisely define the bug reproduction environments:

.. code-block:: text

  FROM ubuntu:latest

  RUN apt-get update && apt-get -y dist-upgrade
  RUN apt-get install -y --no-install-recommends bzip2 wget

  RUN wget --no-check-certificate https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
      bash Miniconda3-latest-Linux-x86_64.sh -bf && \
      rm Miniconda3-latest-Linux-x86_64.sh
  ENV PATH="/root/miniconda3/bin:${PATH}"

  RUN conda install -c conda-forge graphviz=2.38.0

  CMD dot


Containers in the cloud
^^^^^^^^^^^^^^^^^^^^^^^

Amazon has 3 services: `Amazon Elastic Container Service <https://aws.amazon.com/ecs/>`_ (ECS), `Amazon Elastic Container Service for Kubernetes <https://aws.amazon.com/eks/>`_ (EKS), and `AWS Fargate <https://aws.amazon.com/fargate/>`_. From AWS Fargate:

  AWS Fargate is a technology for Amazon ECS and EKS* that allows you to run containers without having to manage servers or clusters. With AWS Fargate, you no longer have to provision, configure, and scale clusters of virtual machines to run containers.

  Amazon ECS and EKS have two modes: Fargate launch type and EC2 launch type. With Fargate launch type, all you have to do is package your application in containers, specify the CPU and memory requirements, define networking and IAM policies, and launch the application. EC2 launch type allows you to have server-level, more granular control over the infrastructure that runs your container applications. With EC2 launch type, you can use Amazon ECS and EKS to manage a cluster of servers and schedule placement of containers on the servers. Amazon ECS and EKS keeps track of all the CPU, memory and other resources in your cluster, and also finds the best server for a container to run on based on your specified resource requirements. You are responsible for provisioning, patching, and scaling clusters of servers.

EKS provides "Kubernetes control plane without needing to worry about provisioning, upgrades, or patching." ECS is Amazon's proprietary container managements.

Microsoft provides `Azure Container Instances <https://azure.microsoft.com/en-us/services/container-instances/>`_ for running containers "managing virtual machines or having to learn new tools—it's just your application, in a container, running in the cloud." Kubnernetes is provided by `Azure Container Services (AKS) <https://azure.microsoft.com/en-us/services/container-service/>`_.

Google provides Google `Kubernetes Engine <https://cloud.google.com/kubernetes-engine/>`_ (running on Google's `Container-Optimized OS <https://cloud.google.com/kubernetes-engine/>`_).

Choosing amongst these is difficult as they are changing rapidly and good comparisons are hard to find. For now see `GKE vs AKS vs EKS <https://blog.hasura.io/gke-vs-aks-vs-eks-411f080640dc>`_ and `Azure Container Instances vs. AWS Fargate <https://hackernoon.com/azure-container-instances-vs-aws-fargate-3216607f63f4>`_. Most people choose Amazon, but not all (`Why mabl Chose GCP Over AWS <https://dzone.com/articles/why-mabl-chose-gcp-over-aws>`_).

Smaller cloud providers provide less: see `Use CoreOS Container Linux on Linode <https://www.linode.com/docs/applications/containers/use-coreos-container-linux-on-linode/>`_.


What are namespaces and cgroups?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Containers are built on namespaces and cgroups.

For Linux namespaces intro see `Wikipedia Linux namespaces <https://en.wikipedia.org/wiki/Linux_namespaces>`_, `namespaces manpage <http://man7.org/linux/man-pages/man7/namespaces.7.html>`_, a more detailed one-article introduction `Separation Anxiety: A Tutorial for Isolating Your System with Linux Namespaces <https://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces>`_, a Go-based article series `Linux Namespaces <https://medium.com/@teddyking/linux-namespaces-850489d3ccf>`_, and the LWN.net series `Namespaces in operation, part 1: namespaces overview <https://lwn.net/Articles/531114/>`_.

This meetup has used namespaces to test ``nftables`` firewall rules in :ref:`network namespaces <network_namespaces>`.

For Linux cgroups intro see `Wikipedia cgroups <https://en.wikipedia.org/wiki/Cgroups>`_, `cgroups manpage <http://man7.org/linux/man-pages/man7/cgroups.7.html>`_, a more-detailed one-article introduction `archlinux cgroups <https://wiki.archlinux.org/index.php/cgroups>`_, and a more detailed LWN.net `Control groups series by Neil Brown <https://lwn.net/Articles/604609/>`_. LWN.net has `articles on the new cgroup v2 <https://www.google.com/search?q=site%3ALWN.net+cgroups+v2>`_.


Performance
^^^^^^^^^^^

It is difficult to determine container performance. Articles comparing containers vs VMs often compare running containers on bare metal to VMs on bare metal - something your cloud provider likely does not do (as shown by container pricing being based on the number of VMs used). And the article `Running Containers on Bare Metal vs. VMs: Performance and Benefits <https://www.stratoscale.com/blog/containers/running-containers-on-bare-metal/>`_ section *Run Kubernetes on Bare Metal* showed:

  As we can see from the table above, running Kubernetes and containers on the bare metal machines achieved significantly lower latency — around 3x lower than running Kubernetes on VMs. We can also see that in several cases the CPU utilization can be pretty high when running on VMs in comparison to bare metal.

  Looking at these results, there is no doubt that if your systems are sensitive, for example, to page loading time or web service response time, running your containers on bare metal merits consideration.  

  Applications and workloads that require direct access to physical hardware, such as enterprise databases and calculation-intensive applications, can greatly benefit from the performance of bare metal clouds.

The VM overhead can vary depending on your workload, and the article `Docker: Not Faster than VMs, but More Efficient <https://containerjournal.com/2016/11/21/docker-not-faster-vms-just-efficient/>`_ perhaps had it right:

  Are containers faster than virtual machines? The answer may seem to be yes. But if you look closely, you realize that, although Docker does offer some important advantages in the realm of resource consumption, Dockerized apps do not necessarily have better performance.

  Plus, when you consider that hypervisors such as KVM and Xen deliver performance that is only about `2 percent worse than bare metal <https://major.io/2014/06/22/performance-benchmarks-kvm-vs-xen/>`_, you realize that improving performance is not really an important consideration in the first place when deciding between containers and virtual machines. Virtual machines are already running essentially as fast as bare-metal servers.

A good starting point for the performance question is `What is the runtime performance cost of a Docker container <https://stackoverflow.com/questions/21889053/what-is-the-runtime-performance-cost-of-a-docker-container>`_. From the 2014 paper `An Updated Performance Comparison of Virtual Machines and Linux Containers <http://domino.research.ibm.com/library/cyberdig.nsf/papers/0929052195DD819C85257D2300681E7B/$File/rc25482.pdf>`_

  In this paper, we explore the performance of traditional virtual machine deployments, and contrast them with the use of Linux containers. We use a suite of workloads that stress CPU, memory, storage, and networking resources. We use KVM as a representative hypervisor and Docker as a container manager. Our results show that containers result in equal or better performance than VMs in almost all cases.

  In general, Docker equals or exceeds KVM performance in every case we tested. Our results show that both KVM and Docker introduce negligible overhead for CPU and memory performance (except in extreme cases). For I/O intensive workloads, both forms of virtualization should be used carefully.

However the paper has limitations in that both KVM and containers were evaluated using the same hardware:

  We do not evaluate the case of containers running inside VMs or VMs running inside containers because we consider such double virtualization to be redundant (at least from a performance perspective).

When you use a cloud provider that runs containers inside a VM you are doing double virtualization which is not studied by the paper.

  We also question the practice of deploying containers inside VMs, since this imposes the performance overheads of VMs while giving no benefit compared to deploying containers directly on non-virtualized Linux.

For more detailed information see `Container Performance Analysis at DockerCon 2017 <http://www.brendangregg.com/blog/2017-05-15/container-performance-analysis-dockercon-2017.html>`_.


Cryptography
------------

Please see :ref:`crypto` for a continuation of our cryptography discussion.

Also interesting is `Protecting RSA-based Protocols Against Adaptive Chosen-Ciphertext Attacks <https://paragonie.com/blog/2018/04/protecting-rsa-based-protocols-against-adaptive-chosen-ciphertext-attacks>`_.
