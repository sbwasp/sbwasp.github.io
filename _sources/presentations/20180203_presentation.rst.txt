.. include:: /pentest_links.txt


*****************************
2018-02-03 Links and more ROP
*****************************


Links and updates this week
===========================


Links around the web
--------------------


Cloud links
^^^^^^^^^^^

#. `Chronicle: A Meteor Aimed At Planet Threat Intel? <https://krebsonsecurity.com/2018/01/chronicle-a-meteor-aimed-at-planet-threat-intel/>`_

#. `Some Basic Rules for Securing Your IoT Stuff <https://krebsonsecurity.com/2018/01/some-basic-rules-for-securing-your-iot-stuff/>`_


Zero Trust Network
^^^^^^^^^^^^^^^^^^

#. `What is Zero Trust? A model for more effective security <https://www.csoonline.com/article/3247848/network-security/what-is-zero-trust-a-model-for-more-effective-security.html>`_


Tech
^^^^

#. `RFC 8314`_ - Cleartext Considered Obsolete: Use of Transport Layer Security (TLS) for Email Submission and Access

#. `Microsoft Issues Windows Out-of-Band Update That Disables Spectre Mitigations <https://www.bleepingcomputer.com/news/microsoft/microsoft-issues-windows-out-of-band-update-that-disables-spectre-mitigations/>`_

#. `Windows Defender to start removing “optimizer” scareware <https://arstechnica.com/gadgets/2018/01/windows-defender-to-start-removing-optimizer-scareware/>`_

#. `You’ll finally be able to approve family purchases with Face ID in iOS update <https://arstechnica.com/gadgets/2018/01/youll-finally-be-able-to-approve-family-purchases-with-face-id-in-ios-update/>`_

#. `Maersk Reinstalled 45,000 PCs and 4,000 Servers to Recover From NotPetya Attack <https://www.bleepingcomputer.com/news/security/maersk-reinstalled-45-000-pcs-and-4-000-servers-to-recover-from-notpetya-attack/>`_

#. `The Follower Factory <https://www.nytimes.com/interactive/2018/01/27/technology/100000005704904.app.html>`_ - Inside social media’s black market

#. `Password Do’s and Don’ts <https://krebsonsecurity.com/password-dos-and-donts/>`_

#. `NoPassword <https://www2.nopassword.com/>`_


Tools
^^^^^

#. `Google Cloud Shell for gmail users <https://console.cloud.google.com/cloudshell/editor?supportedpurview=project&shellonly=true>`_

#. `Dr. Mine <https://github.com/1lastBr3ath/drmine>`_ - a node script written to aid automatic detection of in-browser cryptojacking

#. `Sickle <https://github.com/wetw0rk/Sickle>`_ -  a shellcode development tool, created to speed up the various steps needed to create functioning shellcode

#. `Here are some amazing advantages of Go that you don’t hear much about <https://medium.freecodecamp.org/here-are-some-amazing-advantages-of-go-that-you-dont-hear-much-about-1af99de3b23a>`_

#. `LinuxBoot <https://www.linuxboot.org/>`_

#. `On undoing, fixing, or removing commits in git <https://sethrobertson.github.io/GitFixUm/fixup.html>`_

#. `phpbash <https://github.com/Arrexel/phpbash>`_

#. `DNSCrypt-Proxy 2 <https://github.com/jedisct1/dnscrypt-proxy/blob/master/README.md>`_ - A flexible DNS proxy, with support for modern encrypted DNS protocols such as `DNSCrypt v2 <https://github.com/DNSCrypt/dnscrypt-protocol/blob/master/DNSCRYPT-V2-PROTOCOL.txt>`_ and DNS-over-HTTP/2

#. `MoviePy <https://github.com/Zulko/moviepy>`_ - Python library for video editing

#. `ConnectBot <https://play.google.com/store/apps/details?id=org.connectbot>`_


Study links
^^^^^^^^^^^

#. DNS study links: `Definition - Domains vs. Zones <http://simpledns.com/help/definition-domains-vs-zones>`_, `Understanding the Difference Between a Primary and Secondary DNS Server <https://webhostinggeeks.com/blog/understanding-the-difference-between-a-primary-and-secondary-dns-server/>`_, `Recursive and Iterative Queries <https://technet.microsoft.com/en-us/library/cc961401.aspx>`_, `What Is Authoritative Name Server? <https://www.dnsknowledge.com/whatis/authoritative-name-server/>`_, and `Authoritative vs. Recursive DNS Servers: What’s The Difference? <http://social.dnsmadeeasy.com/blog/authoritative-vs-recursive-dns-servers-whats-the-difference/>`_

#. `Web Application Firewall (WAF) Evasion Techniques <https://medium.com/secjuice/waf-evasion-techniques-718026d693d8>`_

#. `Memory Safety in Rust: A Case Study with C <http://willcrichton.net/notes/rust-memory-safety/>`_

#. `Lateral Movement with PowerPoint and DCOM <https://attactics.org/2018/02/03/lateral-movement-with-powerpoint-and-dcom/>`_

#. `Professionally Evil Web App Pen Testing 101 Course <https://blog.secureideas.com/2018/01/professionally-evil-web-app-pen-testing-101-course.html>`_

#. `ASIS CTF 2017 Finals Write Up <https://blog.manchestergreyhats.co.uk/2017/10/09/asis-ctf-2017-finals-write-up/>`_

#. `Four Ways to Bypass Android SSL Verification and Certificate Pinning <https://blog.netspi.com/four-ways-bypass-android-ssl-verification-certificate-pinning/>`_

#. `Exploiting VyprVPN for macOS <https://versprite.com/og/exploiting-vypervpn-macos/index.html>`_

#. `Hack The Box :: Penetration Testing Labs <https://www.hackthebox.eu/>`_

#. `Smash The Stack Wargaming Network <http://smashthestack.org/>`_

#. `Writing complex macros in Rust: Reverse Polish Notation <https://rreverser.com/writing-complex-macros-in-rust/>`_

#. `iOS 11 Jailbreak <https://github.com/Coalfire-Research/iOS-11.1.2-15B202-Jailbreak>`_

#. `Predicting Random Numbers in Ethereum Smart Contracts <https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620>`_

#. `ESET’S GUIDE TO DEOBFUSCATING AND DEVIRTUALIZING FINFISHER <https://www.welivesecurity.com/wp-content/uploads/2018/01/WP-FinFisher.pdf>`_

#. `The Known Beacons Attack (34th Chaos Communication Congress) <https://census-labs.com/news/2018/02/01/known-beacons-attack-34c3/>`_

#. `How we found the identity of military personnel using Strava <https://nrkbeta.no/2018/01/31/how-we-found-the-identity-of-military-personnel-using-strava/>`_

#. `Vulnserver - my KSTET exploit (delivering the final stage shellcode through the active server socket) <https://ewilded.blogspot.com/2018/01/vulnserver-my-kstet-exploit-delivering.html>`_

#. `DCShadow explained: A technical deep dive into the latest AD attack technique <https://blog.alsid.eu/dcshadow-explained-4510f52fc19d>`_


Privacy links
^^^^^^^^^^^^^

#. `Online tracking: A 1-million-site measurement and analysis <https://webtransparency.cs.princeton.edu/webcensus/>`_ - We measure stateful (cookie-based) and stateless (fingerprinting-based) tracking, the effect of browser privacy tools, and "cookie syncing"

#. `Google and Facebook are watching our every move online. It's time to make them stop <https://www.cnbc.com/2018/01/31/google-facebook-data-privacy-concerns-out-of-control-commentary.html>`_ - 76 percent of websites now contain hidden Google trackers, and 24 percent have hidden Facebook trackers, according to one study

#. `Here’s how Google Chrome’s new ad blocker works <https://www.ctrl.blog/entry/chrome-adblocker>`_ - ... like to see Google give their users the power to enable the blocklist on a per-website basis themselves. Users who want this level of granular control still have to install a third-party ad blocking extension.

#. `With ePrivacy looming, German publishers scramble to get users logged in <https://digiday.com/media/eprivacy-looming-german-publishers-scramble-get-users-logged/>`_

#. `Privacy is Mainstream: 24% of Us Now Take Significant Actions to Protect Our Privacy <https://spreadprivacy.com/mainstream/>`_

#. `Exclusive: ICE is about to start tracking license plates across the US <https://www.theverge.com/2018/1/26/16932350/ice-immigration-customs-license-plate-recognition-contract-vigilant-solutions>`_

#. `When A Small Leak Sinks A Great Ship: Deanonymizing Tor Hidden Service Users Through Bitcoin Transactions Analysis <https://arxiv.org/pdf/1801.07501.pdf>`_

#. `Thanks to "consent" buried deep in sales agreements, car manufacturers are tracking tens of millions of US cars <https://boingboing.net/2018/01/22/cars-watching-you.html>`_, `OnStar Begins Spying On Customers’ GPS Location For Profit? <http://www.zdziarski.com/blog/?p=1270>`_, `Big Brother on wheels: Why your car company may know more about you than your spouse <https://www.washingtonpost.com/news/innovations/wp/2018/01/15/big-brother-on-wheels-why-your-car-company-may-know-more-about-you-than-your-spouse/?utm_term=.0850758065a2>`_, `The Loss of Locational Privacy While Traveling in your Automobile <https://www.defcon.org/images/defcon-21/dc-21-presentations/Pukingmonkey/DEFCON-21-Pukingmonkey-The-Road-Less-Surreptitiously-Traveled-Updated.pdf>`_

#. `Firefox 59 will stop websites snooping on where you've just been <http://www.zdnet.com/article/firefox-59-will-stop-websites-snooping-on-where-youve-just-been/>`_


Cultural/Legal/Political
^^^^^^^^^^^^^^^^^^^^^^^^

#. `Judge should order governor to stop using ephemeral messaging app, lawyers say <https://arstechnica.com/tech-policy/2018/02/lawyers-governors-secret-messaging-app-use-violates-public-records-laws/>`_

#. `Threat or menace? “Autosploit” tool sparks fears of empowered “script kiddies” <https://arstechnica.com/information-technology/2018/02/threat-or-menace-autosploit-tool-sparks-fears-of-empowered-script-kiddies/>`_

#. `Report : Intel Warned Chinese Companies Of Chip Flaws Before U.S. Government <http://www.nasdaq.com/article/report--intel-warned-chinese-companies-of-chip-flaws-before-us-government-20180128-00006>`_

#. `Huawei loses another carrier deal as spying fears impede its US growth <https://arstechnica.com/gadgets/2018/01/spying-fears-and-political-pressure-cost-huawei-another-carrier-deal/>`_

#. `Tech firms let Russia probe software widely used by U.S. government <https://www.reuters.com/article/us-usa-cyber-russia/tech-firms-let-russia-probe-software-widely-used-by-u-s-government-idUSKBN1FE1DT>`_

#. `U.K. Court Finds Government’s Surveillance Powers Unlawful <https://theintercept.com/2018/01/30/u-k-court-finds-governments-surveillance-law-unlawful/>`_


Hacking links
^^^^^^^^^^^^^

#. `execve_exploit <https://github.com/saaramar/execve_exploit>`_ - slides and full exploit for execve() vulnerability in WSL, CVE-2018-0743

#. `Microsoft Anti Ransomware bypass (not a vulnerability for Microsoft)  <http://www.securitybydefault.com/2018/01/microsoft-anti-ransomware-bypass-not.html?m=1>`_

#. `Meltdown/Specter-based Malware Coming Soon to Devices Near You, Are You Ready? <https://thehackernews.com/2018/02/meltdown-spectre-malware-hacking.html>`_ - It has been few weeks since the details of the Spectre, and Meltdown processor vulnerabilities came out in public and researchers have discovered more than 130 malware samples trying to exploit these chip flaws ...

#. `Flash 0 Day In The Wild: Group 123 At The Controls <http://blog.talosintelligence.com/2018/02/group-123-goes-wild.html?>`_

#. `Scarab ransomware: new variant changes tactics <https://blog.malwarebytes.com/threat-analysis/2018/01/scarab-ransomware-new-variant-changes-tactics/amp/>`_

#. `Cryptocurrency botnets are rendering some companies unable to operate <https://arstechnica.com/information-technology/2018/02/cryptocurrency-botnets-generate-millions-but-exact-huge-cost-on-victims/>`_, `Smominru Monero mining botnet making millions for operators <https://www.proofpoint.com/us/threat-insight/post/smominru-monero-mining-botnet-making-millions-operators>`_, and `Cryptomining: Harmless Nuisance or Disruptive Threat? <https://www.crowdstrike.com/blog/cryptomining-harmless-nuisance-disruptive-threat/>`_

#. `More than 2,000 WordPress websites are infected with a keylogger <https://arstechnica.com/information-technology/2018/01/more-than-2000-wordpress-websites-are-infected-with-a-keylogger/>`_

#. `High-severity vulnerability in Lenovo laptops let hackers access passwords <https://arstechnica.com/information-technology/2018/01/lenovo-fixes-hard-coded-password-and-weak-crypto-in-fingerprint-manager/>`_

#. `Exploiting Electron RCE in Exodus wallet <https://hackernoon.com/exploiting-electron-rce-in-exodus-wallet-d9e6db13c374>`_ and `Electron’s bug, ShellExecute to blame? <https://medium.com/0xcc/electrons-bug-shellexecute-to-blame-cacb433d0d62>`_

#. `How a malicious seed generation website stole $4 million <https://thatoddmailbox.github.io/2018/01/28/iotaseed.html>`_ (follow-up to `Two new cryptocurrency heists make off with over $400M worth of blockchange <https://arstechnica.com/information-technology/2018/01/two-new-cryptocurrency-heists-make-off-with-over-400m-worth-of-blockchange/>`_

#. `Critical Oracle Micros POS Flaw Affects Over 300,000 Payment Systems <https://thehackernews.com/2018/01/oracle-micros-pos.html>`_

#. `Update Your Firefox Browser to Fix a Critical Remotely Exploitable Flaw <https://thehackernews.com/2018/01/firefox-browser-update.html>`_

#. `Cisco Adaptive Security Appliance Remote Code Execution and Denial of Service Vulnerability <https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20180129-asa1>`_

#. `I think I found a Mac kernel bug? <https://jvns.ca/blog/2018/01/28/mac-freeze/>`_

#. `Internet of Dildos: A Long Way to a Vibrant Future – From IoT to IoD <https://www.sec-consult.com/en/blog/2018/02/internet-of-dildos-a-long-way-to-a-vibrant-future-from-iot-to-iod/index.html>`_

#. `Registered at SSA.GOV? Good for You, But Keep Your Guard Up <https://krebsonsecurity.com/2018/01/registered-at-ssa-gov-good-for-you-but-keep-your-guard-up/>`_


Exploits this week
==================


Running the ROP exploit in the cloud
------------------------------------


Recommendation from a pentest manager/recruiter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When asked about one skill a pentest should have now, a pentest manager/recruiter attending the `OWASP AppSec California 2018 <https://2018.appseccalifornia.org/>`_ conference indicated AWS infrastructure setup skills. Customers are moving to AWS and pentesters can distinguish themselves by having those skills. Azure (Office 365) is being used to a lesser extent. (Side note - IPv6 makes network scans very much less useful.)

In response to this we look at creating the ROP example in the cloud. Since AWS is being covered by another presenter, plus the fact that the author has a free Google Compute Engine VM and $50 credit to burn at Linode, the ROP example uses GCE and Linode.

The :ref:`rop-example` writeup shows how to test the ROP overflow on your local Kali instance or in Google Compute Engine. Here we go one step further to run the ROP example at Linode using either the Linode CLI or Terraform (discussed last week as an example of Infrastructure as Code). Both make it relatively easy to create-then-destroy a ROP overflow test at Linode.

The goal is to get meetup attendees to practice using Infrastructure as Code and GitHub/Bitbucket, leading to the ability to set up pentest environments in the cloud.

So Amazon's AWS is the most widely used cloud provider with many using Azure and Google. But realize that there are many providers and there are real differences between their VMs. For example, the cheapest VMs are from smaller providers (Linode and Digital Ocean), but their VMs incur charges even when not running, whereas that's not true for Google App Engine or AWS EC2, where you pay only for disk storage for non-running VMs. That's great for VMs that you really don't want to delete. Note that GCE features live migration, whereas many other providers require a reboot for hardware maintenance. In general larger providers have more services and job opportunities.

It is important to learn tools to configure & monitor cloud services across providers, like Terraform or tools like Puppet.


Using the Linode CLI
^^^^^^^^^^^^^^^^^^^^

Here is the Linode CLI installation on Kali Linux/Debian testing.

.. code-block:: bash
  :emphasize-lines: 1,9,11-12

  # Install Linode CLI (Kali is currently buster - but this will change later)
  if [[ "$(lsb_release -cs)" == "kali-rolling" ]]; then
    sudo bash -c 'echo "deb [allow-insecure=yes allow-downgrade-to-insecure=yes] https://apt.linode.com/ buster  main" > /etc/apt/sources.list.d/linode.list'
  else
    sudo bash -c 'echo "deb [allow-insecure=yes allow-downgrade-to-insecure=yes] http://apt.linode.com/ $(lsb_release -cs) main" > /etc/apt/sources.list.d/linode.list'
  fi
  wget -O- https://apt.linode.com/linode.gpg | sudo apt-key add -
  sudo apt-get update
  sudo apt-get install linode-cli --allow-unauthenticated -y

  # Set up an API key unique to this host
  linode configure
  # Linode Manager user name
  # Linode Manager password for user
  # Default distribution
  # Default datacenter
  # Default plan
  # Path to an SSH public key
  # Config written to $HOME/.linodecli/config including api-key

Next create a Linode StackScript for VM post-install configuration. The post-install script adds the required 32-bit libraries & apps, then sets up the ROP example to automatically start after reboot:

.. code-block:: bash
  :emphasize-lines: 1,3,6,13,21,24,27,31

  # Locally create the post-install script
  STACKSCRIPT=rop-example-setup.sh
  cat > $STACKSCRIPT <<'EOF'
  #!/usr/bin/env bash

  # Add required packages
  dpkg --add-architecture i386
  apt update
  apt install socat -y
  apt install lib32z1 lib32ncurses5 -y
  apt install binutils -y

  # Create the ROP executable
  mkdir -p /var/local/bin
  cd /var/local/bin
  curl -o file https://sbwasp.github.io/_downloads/file
  cat file | base64 -d > prog
  rm file
  chmod +x prog

  # Use crontab to schedule the ROP executable after reboot
  echo  '@reboot sudo -u nobody nohup socat tcp4-listen:8080,reuseaddr,fork exec:/var/local/bin/prog > /tmp/nohup_8080' | crontab -

  # Upgrade all packages before a reboot
  apt upgrade -y
  reboot
  EOF

  chmod +x $STACKSCRIPT

  # Create the post-install script at Linode
  linode stackscript create \
    --label rop-example-setup \
    --distribution 'Debian 9' \
    --codefile ./$STACKSCRIPT \
    --description 'Update to latest packages + start ROP program at boot'

Now the VM can be provisioned using the post-install script:

.. code-block:: bash
  :emphasize-lines: 1,7,17,22

  # Create VM
  VM=rop-example
  PASSWORD=pentest-meetup
  SSHKEY=~/.ssh/id_linode
  SSHPUBKEY=${SSHKEY}.pub
  SCRIPTNAME=${STACKSCRIPT%.sh}
  linode linode create \
    --label $VM \
    --distribution 'Debian 9' \
    --plan linode1024 \
    --password "$PASSWORD" \
    --group 'SBWASP' \
    --pubkey-file "$SSHPUBKEY" \
    --stackscript "$SCRIPTNAME" \
    --stackscriptjson '{ }'

  # Get the server's IP address
  linode list
  linode show $VM
  IP=$(linode show $VM | grep ips | sed 's/^.*: *//;s/ *$//')

  # Wait a bit - install complete when ROP listening on port 8080
  ssh -i $SSHKEY root@$IP
  ss -tnlp  # port 8080 should be listening
  exit

Now play with the server:

.. code-block:: bash
  :emphasize-lines: 1-

  echo 1 - | socat - tcp4:$IP:8080
  echo "57\nHello there" - | socat - tcp4:$IP:8080

When done with the machine, destroy it:

.. code-block:: bash
  :emphasize-lines: 1-

  linode stop $VM
  linode delete $VM


Using Terraform and Linode
^^^^^^^^^^^^^^^^^^^^^^^^^^

Here is the setup required to follow `Using Terraform to Provision Linode Environments <https://linode.com/docs/platform/how-to-build-your-infrastructure-using-terraform-and-linode/>`_ on Kali Linux/Debian testing:

.. code-block:: bash
  :emphasize-lines: 1,5-6,13,23-24,27

  # Install golang >= 1.9
  sudo apt install git -y
  mkdir -p ~/go/{bin,src,pkg}

  # For Debian testing/Kali - built-in go is >= 1.9
  sudo apt install golang -y
  cat >> ~/.profile <<'EOF'
  export PATH=$PATH:$HOME/go/bin
  export GOPATH="$HOME/go"
  export GOBIN="$GOPATH/bin"
  EOF

  # For Debian 9 need to follow https://tecadmin.net/install-go-on-debian/
  wget https://dl.google.com/go/go1.9.3.linux-amd64.tar.gz
  tar -zxvf go1.9.3.linux-amd64.tar.gz  -C /usr/local/
  cat >> ~/.profile <<'EOF'
  export PATH=$PATH:/usr/local/go/bin
  export PATH=$PATH:$HOME/go/bin
  export GOPATH="$HOME/go"
  export GOBIN="$GOPATH/bin"
  EOF

  # After either go install either logout/login or source .profile
  source ~/.profile


  # Install Terraform and Linode provider
  go get github.com/hashicorp/terraform
  go get github.com/LinodeContent/terraform-provider-linode
  cd $GOPATH/src/github.com/LinodeContent/terraform-provider-linode/bin/terraform-provider-linode
  go build -o terraform-provider-linode
  mv $GOPATH/src/github.com/LinodeContent/terraform-provider-linode/bin/terraform-provider-linode/terraform-provider-linode $GOPATH/bin
  mv $GOPATH/src/github.com/LinodeContent/terraform-provider-linode/linode-template.tf $GOPATH/bin


Repeat creating the post-install script:

.. code-block:: bash
  :emphasize-lines: 1,5,8,15,23,26,29

  # Put the Terraform Linode configuration in ~/linode
  mkdir -p ~/linode
  cd ~/linode
  STACKSCRIPT=rop-example-setup.sh
  cat > $STACKSCRIPT <<'EOF'
  #!/usr/bin/env bash

  # Add required packages
  dpkg --add-architecture i386
  apt update
  apt install socat -y
  apt install lib32z1 lib32ncurses5 -y
  apt install binutils -y

  # Create the ROP executable
  mkdir -p /var/local/bin
  cd /var/local/bin
  curl -o file https://sbwasp.github.io/_downloads/file
  cat file | base64 -d > prog
  rm file
  chmod +x prog

  # Use crontab to schedule the ROP executable after reboot
  echo  '@reboot sudo -u nobody nohup socat tcp4-listen:8080,reuseaddr,fork exec:/var/local/bin/prog > /tmp/nohup_8080' | crontab -

  # Upgrade all packages before a reboot
  apt upgrade -y
  reboot
  EOF
  chmod +x $STACKSCRIPT

Create the Terraform configuration file needed to create the vulnerable Debian 9 server. Note that 

.. code-block:: bash
  :emphasize-lines: 1,3-6,10,14,24,30,35,42,44-45,49-50

  # Create Terraform config file
  cp $GOPATH/bin/linode-template.tf linode-template.tf # ignore this file
  cat > linode-template.tf <<'EOF'
  variable "api_key" { }
  variable "root_password" { }
  variable "ssh_pub_key" {
      default = "YOUR_SSH_PUB_KEY"
  }

  provider "linode" {
    key = "${var.api_key}"
  }

  resource "linode_linode" "linode-rop-example" {
      image = "Debian 9"
      kernel = "Latest 64 bit"
      name = "rop-example"
      group = "SBWASP"
      region = "Fremont, CA, USA"
      size = 1024
      ssh_key = "${var.ssh_pub_key}"
      root_password = "${var.root_password}"

      connection {
          type = "ssh"
          user = "root"
          password = "${var.root_password}"
      }

      provisioner "file" {
          source = "./rop-example-setup.sh"
          destination = "/root/rop-example-setup.sh"
      }

      provisioner "remote-exec" {
          inline = [
            "chmod 750 /root/rop-example-setup.sh",
            "/root/rop-example-setup.sh",
          ]
      }
  }
  EOF

  # Create Terraform variables file
  cat > terraform.tfvars <<'EOF'
  api_key="YOUR_API_KEY"
  ssh_pub_key="YOUR_SSH_PUB_KEY"
  root_password="sbwasp-meetup"
  EOF
  chmod 640 terraform.tfvars

Now the VM can be provisioned using Terraform:

.. code-block:: bash
  :emphasize-lines: 1,3-5,7,14

  # Start the VM creation
  cd ~/linode
  terraform init
  terraform plan
  terraform apply --var-file terraform.tfvars

  # Wait until can ssh and see port 8080 listening
  linode list
  VM=rop-example
  linode show rop-example
  IP=$(linode show $VM | grep ips | sed 's/^.*: *//;s/ *$//')

  ssh -i ~/.ssh/id_linode root@$IP
  ss -tnlp
  exit

Now that port 8080 is listening, the vulnerable server can be attacked:

.. code-block:: bash

  echo "57\nhello" | socat - tcp4:$IP:8080

When done use Terraform to destroy the environment:

.. code-block:: bash
  :emphasize-lines: 1

  terraform destroy


ROP example
-----------

See :ref:`rop-example` (and :ref:`endian` notes).
