.. include:: /pentest_links.txt


****************************************************************
2018-02-24 Links, Cloud VMs, Let's Encrypt, Metasploit Framework
****************************************************************


Links and updates this week
===========================


Links around the web
--------------------


Cloud
^^^^^



Tech
^^^^

#. `no-csp-css-keylogger.badsite.io <https://no-csp-css-keylogger.badsite.io/>`_ - type password here and watch network log

#. `Internet of Things Scanner <https://iotscanner.bullguard.com/>`_ - add yourself to the list if you're vulnerable and not there

#. `I've Just Launched "Pwned Passwords" V2 With Half a Billion Passwords for Download <https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2/>`_

#. `Intel has a new Spectre firmware patch for you to try out <https://betanews.com/2018/02/21/intel-spectre-patch-number-two/>`_ and `Intel ships (hopefully stable) microcode for Skylake, Kaby Lake, Coffee Lake <https://arstechnica.com/gadgets/2018/02/intel-ships-hopefully-stable-microcode-for-skylake-kaby-lake-coffee-lake/>`_

#. `Treble <https://source.android.com/devices/architecture/treble>`_ - "a major re-architect of the Android OS framework designed to make it easier, faster, and less costly for manufacturers to update devices to a new version of Android."

#. `MADLIRA <https://github.com/dkhuuthe/MADLIRA>`_ - MADLIRA is a tool for Android malware detection

#. `Botched npm Update Crashes Linux Systems, Forces Users to Reinstall <https://www.bleepingcomputer.com/news/linux/botched-npm-update-crashes-linux-systems-forces-users-to-reinstall/>`_ and `Critical Linux filesystem permissions are being changed by latest version <https://github.com/npm/npm/issues/19883>`_

#. `Meltdown fix committed by guenther@ <https://undeadly.org/cgi?action=article;sid=20180221201856>`_

#. `Weak cryptographic standards removal notice <https://githubengineering.com/crypto-removal-notice/>`_ - GitHub to remove several weak cryptographic standards

#. `Cure53 Browser Security White Paper <https://cure53.de/browser-security-whitepaper.pdf>`_ (very long)

#. `macOS may lose data on APFS-formatted disk images <https://bombich.com/blog/2018/02/15/macos-may-lose-data-on-apfs-formatted-disk-images>`_



Tools
^^^^^

#. `GitLeaks <https://github.com/zricethezav/gitleaks>`_ - Check git repos for secrets and keys

#. `elf-string <https://github.com/LloydLabs/elf-strings>`_ - The better ``strings`` utility for the reverse engineer.

#. `Revoke-Obfuscation v1.0 <https://github.com/danielbohannon/Revoke-Obfuscation>`_ - an open-source PowerShell v3.0+ framework for detecting obfuscated PowerShell commands and scripts at scale


Study links
^^^^^^^^^^^

#. `OWASP Automated Threat Handbook - Web Applications <https://www.owasp.org/images/3/33/Automated-threat-handbook.pdf>`_

#. `How Developers got Password Security so Wrong <https://blog.cloudflare.com/how-developers-got-password-security-so-wrong/>`_

#. `New bypass and protection techniques for ASLR on Linux <http://blog.ptsecurity.com/2018/02/new-bypass-and-protection-techniques.html?m=1>`_

#. `Secure Coding: Understanding Input Validation <https://littlemaninmyhead.wordpress.com/2018/02/18/secure-coding-understanding-input-validation/>`_

#. `Linux ASLR and GNU Libc: Address space layout computing and defence, and "stack canary" protection bypass <https://github.com/blackzert/aslur/raw/master/offensivecon-talk.pdf>`_

#. `Securing your Linux web server <https://hackernoon.com/securing-your-linux-web-server-2be683c223eb>`_

#. `BPF comes to firewalls <https://lwn.net/SubscriberLink/747551/7b37e1ce398c30c0/>`_ - "The Linux kernel currently supports two separate network packet-filtering mechanisms: iptables and nftables. For the last few years, it has been generally assumed that nftables would eventually replace the older iptables implementation; few people expected that the kernel developers would, instead, add a third packet filter. But that would appear to be what is happening with the newly announced bpfilter mechanism. Bpfilter may eventually replace both iptables and nftables ... . The end result is that we'll probably not see bpfilter in the mainline kernel in the immediate future. Given the developers who have worked on it, though, bpfilter is clearly a serious initiative that is firmly aimed at getting into the mainline eventually."

#. `Retpoline: A Branch Target Injection Mitigation <https://software.intel.com/sites/default/files/managed/1d/46/Retpoline-A-Branch-Target-Injection-Mitigation.pdf>`_

#. `CSS Keylogger <https://github.com/maxchehab/CSS-Keylogging>`_

#. `Detecting Lateral Movements in Windows Infrastructure <http://cert.europa.eu/static/WhitePapers/CERT-EU_SWP_17-002_Lateral_Movements.pdf>`_

#. `Userland API Monitoring and Code Injection Detection <https://0x00sec.org/t/userland-api-monitoring-and-code-injection-detection/5565>`_

#. `A Walk-Through Tutorial, with Code, on Statically Unpacking the FinSpy VM: Part One, x86 Deobfuscation <http://www.msreverseengineering.com/blog/2018/1/23/a-walk-through-tutorial-with-code-on-statically-unpacking-the-finspy-vm-part-one-x86-deobfuscation>`_ - first of a multi-part series ...


Privacy links
^^^^^^^^^^^^^

#. `Google Calendar should prevent spam by default <http://daynebatten.com/2018/02/google-should-prevent-calendar-spam/>`_

#. `An Overview of Web Browsing Security <https://sec.eff.org/articles/web-browsing-security>`_

#. `China's Xinjiang surveillance is the dystopian future nobody wants <https://www.engadget.com/2018/02/22/china-xinjiang-surveillance-tech-spread/>`_

#. `face-verify.js: Monitoring who is physically looking at a website for additional security <https://blog.machinebox.io/face-verify-js-monitoring-who-is-looking-at-a-website-for-additional-security-1d6025a8fedd>`_ and `Face Verify <https://github.com/machinebox/toys/tree/master/faceverify>`_

#. `Flight Sim Company Embeds Malware to Steal Pirates’ Passwords <https://torrentfreak.com/flight-sim-company-embeds-malware-to-steal-pirates-passwords-180219/>`_

#. `Stop replacing London’s phone boxes with corporate surveillance <https://www.wired.co.uk/article/linkuk-bt-google-free-wifi-and-calls-london>`_


Cultural/Legal/Political
^^^^^^^^^^^^^^^^^^^^^^^^

#. `2018 CVE List <https://www.xkcd.com/1957/>`_

#. `Money Laundering Via Author Impersonation on Amazon? <https://krebsonsecurity.com/2018/02/money-laundering-via-author-impersonation-on-amazon/>`_


Hacking links
^^^^^^^^^^^^^

#. `How I Identified 93k Domain-Frontable CloudFront Domains <https://www.peew.pw/blog/2018/2/22/how-i-identified-93k-domain-frontable-cloudfront-domains>`_ - make a request for a resource on CloudFront, then change the target domain while leaving the host header the same

   .. code-block:: bash

     curl -s -H "Host: images-na.ssl-images-amazon.com" -H "Connection: close" "https://cdn.atlassian.com/images/I/01rgQ3jqo7L.css"

#. `Detecting Kerberoasting activity using Azure Security Center <https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/>`_

#. `Bingo. It’s happening. LA Times is serving cryptomining, their S3 bucket with their JavaScript code was world writable and even contains this file (4th screenshot). H/T @bad_packets <https://twitter.com/GossiTheDog/status/966748041897299968>`_ and `LA Times serving cryptocurrency mining script <https://www.itwire.com/security/81860-la-times-serving-cryptocurrency-mining-script.html>`_

#. `The Use of Counterfeit Code Signing Certificates Is on the Rise <https://www.recordedfuture.com/code-signing-certificates/>`_ and `One-stop counterfeit certificate shops for all your malware-signing needs <https://arstechnica.com/information-technology/2018/02/counterfeit-certificates-sold-online-make-digitally-signed-malware-a-snap/>`_

#. `Internet of Babies – When baby monitors fail to be smart <https://www.sec-consult.com/en/blog/2018/02/internet-of-babies-when-baby-monitors-fail-to-be-smart/index.html>`_

#. `Docker Layer 2 ICC Bug <https://github.com/brthor/docker-layer2-icc>`_

#. `Hiding in Plain Sight: XXE Vulnerability in HP Project & Portfolio Mgmt Center <https://rhinosecuritylabs.com/application-security/xxe-zeroday-vulnerability-in-hp-project/>`_

#. `Trend Micro Email Encryption Gateway Multiple Vulnerabilities <https://www.coresecurity.com/advisories/trend-micro-email-encryption-gateway-multiple-vulnerabilities>`_

#. `IDA text Execution <http://riscy.business/2018/02/ida-remote-execution/>`_

#. `Drive-by download campaign targets Chinese websites, experiments with exploits <https://blog.malwarebytes.com/threat-analysis/2018/02/chinese-criminal-experiments-with-exploits-in-drive-by-download-campaign/>`_

#. `NoMachine Un-initialised Variable Privilege Escalation – A fuzz-less exploit tutorial – CVE-2018-6947 <https://www.fidusinfosec.com/nomachine-road-code-execution-without-fuzzing-cve-2018-6947/>`_

#. `Windows: StorSvc SvcMoveFileInheritSecurity Arbitrary File Security Descriptor Overwrite EoP <https://bugs.chromium.org/p/project-zero/issues/detail?id=1428>`_

#. `utorrent: various JSON-RPC issues resulting in remote code execution, information disclosure, etc. <https://bugs.chromium.org/p/project-zero/issues/detail?id=1524>`_ and `uTorrent bugs let websites control your computer and steal your downloads <https://arstechnica.com/information-technology/2018/02/utorrent-bugs-let-websites-control-your-computer-and-steal-your-downloads/>`_

#. `How I was hacked, and all my cryptocurrencies were stolen! <https://fabricegrinda.com/hacked-cryptocurrencies-stolen/>`_

#. `utorrent: various JSON-RPC issues resulting in remote code execution, information disclosure, etc. <https://bugs.chromium.org/p/project-zero/issues/detail?id=1524>`_

#. `Tesla Hackers Hijacked Amazon Cloud Account to Mine Cryptocurrency <http://fortune.com/2018/02/20/tesla-hack-amazon-cloud-cryptocurrency-mining/>`_ and `Lessons from the Cryptojacking Attack at Tesla <https://blog.redlock.io/cryptojacking-tesla>`_

#. `Cryptocurrency-mining criminals that netted $3 million gear up for more <https://arstechnica.com/information-technology/2018/02/cryptocurrency-mining-criminals-that-netted-3-million-gear-up-for-more/>`_ - "has been running the XMRig miner on many versions of Windows and ...  has now upped his game by targeting the powerful Jenkins CI server ...`as many as 20 percent of Jenkins servers are misconfigured <https://emtunc.org/blog/01/2018/research-misconfigured-jenkins-servers/>`_ in ways that make serious hacks possible ... exploiting `CVE-2017-1000353 <https://jenkins.io/security/advisory/2017-04-26/>`_"

#. `Bypass User-Mode Hooks <https://secrary.com/Random/BypassUserHooks/>`_


Reasons to use cloud VMs
------------------------


Benefits of cloud VMs
^^^^^^^^^^^^^^^^^^^^^

This author is gradually moving processing to cloud servers for several reasons:

* Proof of concept

  Demonstrate what can and cannot be moved to the cloud. You're probably not moving your gaming to the cloud nor scanning documents from a local printer/scanner, but you can move your tax computation and lots of computer security testing.

* Reduce local device count, costs, and maintenance

  The goal is to use Chromebox/Chromebook devices from anywhere. Then you can use fewer, simpler computers. And they require far less sysadmin work.

* Acquire cloud configuration knowledge and skills

  Choose your cloud providers based on your needs: low cost providers vs needed job skills (think AWS).

* Immensely faster cloud VM Internet connection speeds

  ``speedtest-cli`` on the 512 MB GCE instance just showed 238/195 Mbps download/upload speeds. However, please remember that the smaller VMs do have limited processing power.

* Increase security with improved disaster recovery

  Cloud VMs are based on server-class hardware with increased reliability. And their creation can be automated (outside of the data). Two cloud VMs can serve as backups for each other's data.

The author first migrated the processing for this website: it comfortably fit on the free Google Compute Engine 512MB VM instance. The author can now work from anywhere (allowing SSH outbound access) using a Chromebook. No more configuring every machine to run the proper web authoring software - it's all done from the already-configured GCE instance.


Persistent VMs, persistent disks, vs non-persistent VMs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here are some cloud VM options from more to less expensive:

Persistent VM - $5/10/20 per month for 1/2/4 GB memory VMs
  Here the VM runs 7x24 with the advantage of permanent IP, immediate availability, significant persistent storage, and even easy access from a Chromebook.

  The author uses a free (tiny 512 MB) Google Compute Engine instance for authoring this website and accessing other cloud services from a Chromebook (and other Linux devices). A 1 GB Linode or Digital Ocean VM would cost $5/month.

Persistent OS Disk - $2/month for a 20GB disk + 3/4 cents/hour run costs
  Not all providers support this, but with some configuration effort the persistent disk can be booted using possibly different memory size configurations each boot.

  So the OS doesn't need configuration each boot (all needed packages are already installed), only the IP changes each usage and there is some effort to start the VM. But the memory flexibility can be a big advantage. And not having it running when not needed can be a security advantage.

Persistent Data Disk - $1/month for a 10 GB disk + 3/4 cents/hour run costs
  This one assumes your OS image needs are either generic or can be scripted.

  For example, the cloud VM to author this website would require scripting to:

  * VM security hardening: create a non-root user with SSH-only access; turn off SSH root login; disable password-based SSH login.

  * Install the Sphinx-based authoring software for this website: :program:`conda` for Python environments; Sphinx authoring software; Google Cloud SDK; AWS CLI.

  This can be a real option when the cloud provider allows boot-time configuration scripts and your VM can be configured quickly using one of these scripts.

Non-persistent VMs - least expensive alternative
  Here the VM is created/destroyed as needed. This can work if the cloud provider allows boot-time configuration scripts that quickly configure your VM (including downloading the needed data).


Energy savings & less hardware offset some VM costs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The real cost savings of cloud VMs come when less local hardware is needed. If you can save $600 or more by not purchasing a machine (with a lifespan of 5 years), that would roughly pay for 2 7x24 1 GB RAM VMs over those 5 years. Or many more non-persistent cloud VMs.

However, just energy savings alone can offset the cost of VMs. Compare using a mid-2011 iMac (135W idle, 170W max) vs a Chromebox (15W max) + 27" monitor (30W max) + cloud VM. The local electric rates are roughly $0.23/kWh. The extra 100W+ an iMac consumes costs roughly 100/1000 * $0.23 = $0.023/hour. Running the desktop 8 hours/day costs an additional $5/month, enough to pay for a 1 GB VM at Linode or Digital Ocean. In other words, running a Chromebox can pay for a $5 Linode 1 GB VM.


Study this week
===============


SSL/TLS using self-signed and Let's Encrypt certificates
--------------------------------------------------------

We'll be doing this demo from a Debian 9 cloud VM resolvable via sbwasp.bitbender.org.


Generating and using self-signed certificates
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We'll mostly follow `Securing Traffic Between two Socat Instances Using SSL <http://www.dest-unreach.org/socat/doc/socat-openssltunnel.html>`_ to illustrate both creating self-signed certificates then using them to mutually verify both ends of a TLS connection.

We'll start by creating a server and client self-signed certificte:

.. code-block:: bash
  :emphasize-lines: 1,6,9-11,14,20

  # Do this in $HOME/tmp
  CERTDIR=$HOME/tmp
  mkdir -p $CERTDIR
  cd $CERTDIR
  
  # Server certificate
  FILENAME=server
  SUBJ="/C=US/ST=California/L=Redondo Beach/O=SBWASP/OU=Meetup/CN=sbwasp.bitbender.org"
  # Create PEM format private key
  #   = base64 encoded DER format (compatible with PKCS#10) with header/footer lines.
  # Private key is 2048 bit RSA, not encrypted.
  openssl genrsa -out $FILENAME.key 2048
  openssl rsa -in $FILENAME.key -text
  # Generate self-signed certificate using just-generated private key.
  openssl req -new -key $FILENAME.key -x509 -days 3653 -out $FILENAME.crt -subj "$SUBJ"
  openssl x509 -in $FILENAME.crt -text
  cat $FILENAME.key $FILENAME.crt >$FILENAME.pem
  chmod 600 $FILENAME.key $FILENAME.pem
  
  # Client certificate
  FILENAME=client
  SUBJ="/C=US/ST=California/L=Redondo Beach/O=SBWASP/OU=Meetup/CN=oresama@bitbender.org"
  openssl genrsa -out $FILENAME.key  2048
  openssl req -new -key $FILENAME.key -x509 -days 3653 -out $FILENAME.crt -subj "$SUBJ"
  cat $FILENAME.key $FILENAME.crt >$FILENAME.pem
  chmod 600 $FILENAME.key $FILENAME.pem

Now that we have the certificates, fire up the server in it's own terminal window. It will just echo back the request:

.. code-block:: bash
  :emphasize-lines: 1,5

  # Server listens to 1 client at a time (use fork for more)
  CERTDIR=$HOME/tmp
  cd $CERTDIR
  sudo apt install socat -y  < /dev/null
  socat openssl-listen:8080,reuseaddr,cert=$CERTDIR/server.pem,cafile=$CERTDIR/client.crt echo
  # Alternatively a shell command could be run
  # socat openssl-listen:8080,fork,reuseaddr,cert=$CERTDIR/server.pem,cafile=$CERTDIR/client.crt exec:"ip addr show"

In another window fire up the client:

.. code-block:: bash
  :emphasize-lines: 1,4-

  # Client connects by running any old shell command to get echo'ed back
  CERTDIR=$HOME/tmp
  cd $CERTDIR
  ls | \
    socat stdio openssl-connect:sbwasp.bitbender.org:8080,cert=$CERTDIR/client.pem,cafile=$CERTDIR/server.crt

The client will see whatever was generated by ``ls`` echoed back, or the results of the ``ip addr show`` command if that was selected. Terminate any running processes in the 2 terminal windows.

Now we'll demonstrate how to use the certificate just generated to serve web pages:

.. code-block:: bash
  :emphasize-lines: 1,8-

  # Try website TLS1.2 encryption using the server certificate
  #   Any web content will do.
  # Fire up the HTTP server on port 8000 (it could be restricted to localhost).
  CERTDIR=$HOME/tmp
  WEBSITE=$CERTDIR/web
  mkdir -p $WEBSITE
  echo "hello" > $WEBSITE/index.html
  (cd $WEBSITE; python3 -m http.server 8000) &
  # Now fire up socat to provide the TLS1.2
  socat -s openssl-listen:8080,method=TLS1.2,fork,reuseaddr,keepalive,verify=0,cert=$CERTDIR/server.pem tcp:localhost:8000

Now fire up any web browser or use ``curl`` to test the TLS1.2 encryption:

.. code-block:: bash
  :emphasize-lines: 1,3

  # Show curl fails when certificate checked (the default)
  curl https://sbwasp.bitbender.org:8080
  # Show curl succeeds using TLS1.2 when certificate not verified
  curl --insecure --verbose --output /dev/null  https://sbwasp.bitbender.org:8080

Alternatives ``curl`` to check the certificate details are a browser or ``openssl s_client``:

.. code-block:: bash
  :emphasize-lines: 1-

  echo -ne "HEAD / HTTP/1.1\n\nHost: sbwasp.bitbender.org\n\n\n\n" | \
      openssl s_client -connect sbwasp.bitbender.org:8080

Kill the extra listenting processes (``sudo ss -tnlp`` will show the PIDs to ``kill``).


Let's Encrypt certificate via :program:`dehydrated`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Installing :program:`dehydrated`
""""""""""""""""""""""""""""""""

`dehydrated <https://github.com/lukas2511/dehydrated>`_ depends on ``openssl``, ``curl``, ``sed``, ``grep``, and ``mktemp``. It can be installed manually or via a Debian package. For Debian 9 it's best to use stretch-backports but we don't do that today:

.. code-block:: bash
  :emphasize-lines: 1,5-

  cat <<'EOF' | sudo tee /etc/apt/sources.list.d/backport.list
  deb http://deb.debian.org/debian/ stretch-backports main
  deb-src http://deb.debian.org/debian/ stretch-backports main
  EOF
  sudo apt update  < /dev/null
  sudo apt -t stretch-backports dehydrated -y  < /dev/null

Since the demo install is a throw-away, we'll used a temporary directory (easy to clean up) and clone from GitHub:

.. code-block:: bash
  :emphasize-lines: 5

  # Pick a configuration directory based on who is running it
  CDIR=$HOME/tmp
  cd $CDIR/
  sudo apt install git -y  < /dev/null
  git clone https://github.com/lukas2511/dehydrated.git

Configuring ``dehydrated`` involves modifying 3 files:

.. code-block:: bash
  :emphasize-lines: 1,5,8-10,11,20-22,24,76,78,81,85,87,90

  # Create a website
  WEBSITE=$CDIR/web
  mkdir -p $WEBSITE
  echo "hello" > $WEBSITE/index.html
  # Pick a configuration directory based on who is running it
  cd $CDIR/
  cp $CDIR/dehydrated/docs/examples/{config,domains.txt,hook.sh} $CDIR/
  # domains.txt
  #   Each line is a certificate, first domain is cert name, rest are aliases.
  echo "sbwasp.bitbender.org" > domains.txt
  # config used for command defaults - likely make these changes:
  sed -i 's|^#BASEDIR.*$|BASEDIR='$CDIR'|' config
  sed -i 's/^#CHALLENGETYPE="http-01"/CHALLENGETYPE="http-01"/' config
  # Note - for AWS CloudFront set KEYSIZE="2048"
  sed -i 's|^#WELLKNOWN=.*$|WELLKNOWN='$WEBSITE'/.well-known/acme-challenge|' config
  mkdir -p $WEBSITE/.well-known/acme-challenge
  sed -i 's|^#HOOK=.*$|HOOK="$BASEDIR/hook.sh"|' config
  sed -i 's/^#PRIVATE_KEY_RENEW=.*$/PRIVATE_KEY_RENEW="no"/' config

  # The most significant part is hooks.sh configuration of:
  #   deploy_challenge() - copy challenge to $WEBSITE/.well-known/acme-challenge/...
  #   deploy_cert() - socat -s openssl-listen:8080,...,cert=NEWCERT,...

  cat > hook.sh <<'EOF'
  #!/usr/bin/env bash
  
  deploy_challenge() {
      local DOMAIN="${1}" TOKEN_FILENAME="${2}" TOKEN_VALUE="${3}"
      echo "$TOKEN_VALUE" > $WELLKNOWN/$TOKEN_FILENAME
  }
  
  clean_challenge() {
      local DOMAIN="${1}" TOKEN_FILENAME="${2}" TOKEN_VALUE="${3}"
      rm -f $WELLKNOWN/$TOKEN_FILENAME
  }
  
  deploy_cert() {
      local DOMAIN="${1}" KEYFILE="${2}" CERTFILE="${3}" FULLCHAINFILE="${4}" CHAINFILE="${5}" TIMESTAMP="${6}"
      # Deploying a cert using socat is just creating a new server cert:
      # cat $KEYFILE $CERTFILE $CHAINFILE > $CERTDIR/server_le.pem
      # To use it restart socat something like
      # ( sudo socat openssl-listen:443,fork,reuseaddr,keepalive,method=TLS1.2,cert=$CERTDIR/server_le.pem,verify=0 tcp:localhost:8000 )&
  }
  
  unchanged_cert() {
      local DOMAIN="${1}" KEYFILE="${2}" CERTFILE="${3}" FULLCHAINFILE="${4}" CHAINFILE="${5}"
  }
  
  invalid_challenge() {
      local DOMAIN="${1}" RESPONSE="${2}"
      echo "Subject: Validation of ${DOMAIN} failed!\n\nOh noez!"
  }
  
  request_failure() {
      local STATUSCODE="${1}" REASON="${2}" REQTYPE="${3}" HEADERS="${4}"
      echo "Subject: HTTP request failed failed!\n\nA http request failed with status ${STATUSCODE}!"
  }
  
  generate_csr() {
      local DOMAIN="${1}" CERTDIR="${2}" ALTNAMES="${3}"
      echo "generater_csr() call"
  }
  
  startup_hook() {
    :
  }
  
  exit_hook() {
    :
  }
  
  HANDLER="$1"; shift
  if [[ "${HANDLER}" =~ ^(deploy_challenge|clean_challenge|deploy_cert|unchanged_cert|invalid_challenge|request_failure|generate_csr|startup_hook|exit_hook)$ ]]; then
    "$HANDLER" "$@"
  fi
  EOF

  # Use staging server
  sed -i 's|^#*CA=.*$|CA="https://acme-staging.api.letsencrypt.org/directory"|' config

  # Redirect port 80 to 8000
  (cd $WEBSITE; python3 -m http.server 8000)&
  (sudo socat tcp-listen:80,fork,reuseaddr,keepalive tcp:localhost:8000)&

  dehydrated/dehydrated -c --config ./config --accept-terms --ipv4

  # Now ready for operational server
  sed -i 's|^#*CA=.*$|CA="https://acme-v01.api.letsencrypt.org/directory"|' config

  dehydrated/dehydrated -c --config ./config --accept-terms --ipv4

Assuming the cert request succeeds you can test it:

.. code-block:: bash
  :emphasize-lines: 1-

  LEDIR=$CERTDIR/certs/sbwasp.bitbender.org
  cat $LEDIR/privkey.pem $LEDIR/cert.pem $LEDIR/chain.pem > server_le.pem
  (sudo socat openssl-listen:443,fork,reuseaddr,keepalive,method=TLS1.2,cert=$CERTDIR/server_le.pem tcp:localhost:8000)&
  curl --verbose --output /dev/null  https://sbwasp.bitbender.org

When done use ``sudo ss -tnlp`` and ``sudo kill`` to cleanup background processes.


Installing Metasploit Framework
-------------------------------


Metasploit Framework vs Metasploit
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you go to `Metasploit compare features <https://www.rapid7.com/products/metasploit/download/editions/>`_ you'll currently see 4 versions with decreasing capability: Pro (paid), Express (paid), Community (free but signup required), and Framework (command line, open source version we'll install here).


Installation instructions
^^^^^^^^^^^^^^^^^^^^^^^^^

`Metasploit`_ is based on the open source BSD licensed `Metasploit Framework`_. It can be installed in Linux, OS X, and Windows following the `Metasploit Framework Open Source Nightly Installers`_. To keep the Metasploit Framework updated use :program:`apt` or :program:`msfupdate`.


Cloud VM installation details
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here are the steps to provision a Linode 1 GB RAM Debian 9 VM.

First create a Linode Stackscript to configure the Metasploit Framework VM:

.. code-block:: bash
  :emphasize-lines: 1-2,33,36

  STACKSCRIPT=msf-setup.sh
  cat > $STACKSCRIPT <<'EOF'
  #!/usr/bin/env bash
  apt update  < /dev/null
  apt full-upgrade -y  < /dev/null
  apt autoremove -y  < /dev/null
  apt install unattended-upgrades -y  < /dev/null
  
  # sudo NOPASSWD
  sed -i '/^%sudo/s/ ALL$/ NOPASSWD:ALL/' /etc/sudoers
  
  U=oresama
  useradd -c "oresama" -G sudo -m -s /bin/bash -U $U
  
  mkdir -p /home/$U/.ssh
  chmod 700 /home/$U/.ssh
  chown oresama.oresama /home/$U/.ssh
  cp $HOME/.ssh/authorized_keys /home/$U/.ssh/
  chmod 600 /home/$U/.ssh/authorized_keys
  chown oresama.oresama /home/$U/.ssh/authorized_keys
  
  SSHD=/etc/ssh/sshd_config
  sed -i 's/^PermitRootLogin yes/PermitRootLogin no/' $SSHD
  sed -i 's/^PasswordAuthentication yes/PasswordAuthentication no/' $SSHD
  
  sudo su - oresama
  
  curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && \
    chmod 755 msfinstall && \
    ./msfinstall
  
  sudo reboot
  EOF
  chmod +x $STACKSCRIPT
  
  # Create the post-install script at Linode
  linode stackscript create \
    --label ${STACKSCRIPT%.sh} \
    --distribution 'Debian 9' \
    --codefile ./$STACKSCRIPT \
    --description 'Update packages, create users, no root login, no passwd login, install metasploit framework.'

Next create the VM using the existing Stackscript to configure the Metasploit Framework VM:

.. code-block:: bash
  :emphasize-lines: 1,6-

  VM=msf
  PASSWORD=sbwasp-meetup
  SSHKEY=~/.ssh/id_linode
  SSHPUBKEY=${SSHKEY}.pub
  SCRIPTNAME=${STACKSCRIPT%.sh}
  linode linode create \
    --label $VM \
    --distribution 'Debian 9' \
    --plan linode1024 \
    --password "$PASSWORD" \
    --group 'SBWASP' \
    --pubkey-file "$SSHPUBKEY" \
    --stackscript "${STACKSCRIPT%.sh}" \
    --stackscriptjson '{ }'

Next connect to the VM (which requires a little waiting):

.. code-block:: bash
  :emphasize-lines: 1,6-

  # Get the server's IP address
  linode list
  linode show $VM
  IP=$(linode show $VM | grep ips | sed 's/^.*: *//;s/ *$//')
  
  # Wait a bit
  ssh -i $SSHKEY $U@$IP
  msfconsole
  # msfdb status
  # search samba
  # exit

At this point use :program:`msfvenom` to generate shellcode:

.. code-block:: bash
  :emphasize-lines: 1-2,7-12,19-21,23,31,36,42

  # Generating payloads using msfvenom and msfconsole.
  # To see available payloads, encoders, formats, platforms:
  msfvenom --list payloads
  msfvenom --list encoders
  msfvenom --help-formats
  msfvenom --help-platforms
  # For our example we decide on:
  #   payload = linux/x86/exec
  #   encoder = x86/shikata_ga_nai
  #   platform = linux
  # NOTE: if specify "--bad-chars" then get encoder even without "--encoder".
  # To see payload variables/options, fire up msfconsole to show the payload options:
  
  cat <<EOF | sudo msfconsole -r -
  use payload/linux/x86/exec
  show options
  quit
  EOF
  # This shows we need to set CMD="command string to execute".
  # We choose a very simple CMD, merely "echo hello > /tmp/hello".
  # Use "ls -al" afterwards to show that the CMD ran.
  
  # Here's the code to generate a python payload:
  msfvenom --payload linux/x86/exec CMD='echo hello > /tmp/hello' \
           --encoder x86/shikata_ga_nai \
           --bad-chars "\x00\x0a\x0d" \
           --platform linux --arch x86 \
           --format python \
           --out shellcode.py
  
  # Same shellcode without encoding (has null characters in it).
  msfvenom --payload linux/x86/exec CMD='echo hello > /tmp/hello' \
           --platform linux --arch x86 \
           --format python \
           --out shellcode_nulls.py
  # This time as raw bytes.
  msfvenom --payload linux/x86/exec CMD='echo hello > /tmp/hello' \
           --platform linux --arch x86 \
           --format raw \
           --out shellcode_nulls.raw
  
  # More advanced options:
  msfvenom --help

At this point logout and destroy the VM:

.. code-block:: bash
  :emphasize-lines: 1-

  # After logging out of the VM
  linode stop $VM
  linode delete $VM

