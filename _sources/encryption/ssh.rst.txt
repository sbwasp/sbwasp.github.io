.. include:: /pentest_links.txt


.. _ssh:

***
ssh
***

See `SSH Essentials: Working with SSH Servers, Clients, and Keys <https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys>`_ for a gentle introduction to ``ssh``. Also interesting is `How To Install and Use Fail2ban on Ubuntu 14.04 <https://www.digitalocean.com/community/tutorials/how-to-install-and-use-fail2ban-on-ubuntu-14-04>`_: "A service called fail2ban can mitigate this problem by creating rules that can automatically alter your firewall configuration based on a predefined number of unsuccessful login attempts. This will allow your server to respond to illegitimate access attempts without intervention from you."

Generating Your Keys
====================

OpenSSH 6.5 New Features
------------------------

The Features
^^^^^^^^^^^^

OpenSSH 6.5 added several new features that you should use when possible:

  ed25519 key type (``ssh-keygen -t ed25519``)
    Elliptic-curve 256-bit key designed to be fast and secure. For details see `ed25519: high-speed high-security signatures <http://ed25519.cr.yp.to/index.html>`_ and `High-speed high-security signatures <http://ed25519.cr.yp.to/ed25519-20110926.pdf>`_.

    OpenSSH < 6.5 clients and servers do not support ed25519 keys, so they can only be used in OpenSSH >= 6.5 environments.

    ``ssh-keygen`` currently allows dsa, ecdsa, rsa1, rsa, and ed25519. Never use dsa, ecdsa, or rsa1. ed25519 is the fastest and probably strongest. rsa is the best alternative if you can't use ed25519 (an SSH client or server runs OpenSSH < 6.5).


  new OpenSSH private key format using bcrypt (``ssh-keygen -o``)
    Makes brute-force password cracking much harder by using the slower bcrypt (vs. MD5). The old 1 round MD5 password hash function allows billions of password guesses per second whereas the new bcrypt option takes 0.5 seconds for 16 rounds on a laptop.

    The new private key format only affects the clients, so server-only hosts can run OpenSSH < 6.5. Existing SSH private keys can be upgraded to the new format (see below).

    Format always used for ed25519 keys but must be requested for other key types.

  curve25519-sha256 elliptic-curve Diffie Hellman key exchange
    Default key exchange.

Generating New Keys, Upgrading Old
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To generate new SSH keys using these features:

.. code-block:: console

  EMAIL="bitbender@bitbender.org"
  # preferred to use ed25519 which defaults to new private key file format 
  ssh-keygen -a 50 -t ed25519 -C "$EMAIL" -f id_ed25519

  # if you must use RSA then -o specifies new private key file format
  ssh-keygen -o -a 50 -t rsa -b 4096 -C "$EMAIL" -f id_rsa

If you already have RSA keys generated you still can keep your old RSA key while updating the private key format and optionally changing the password.

.. code-block:: bash

  # "ssh-keygen -o" outputs new format
  ssh-keygen -o -p -f id_rsa
  # without "-o" outputs old format
  ssh-keygen -p -f id_rsa

Dealing With a Mixed Environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Let's take the example of running from Debian 8 (Jessie) having OpenSSH 6.7 to a Debian 7 (wheezy) DigitalOcean droplet (virtual machine) running OpenSSH < 6.5. Part of the setup involves uploading public SSH keys for the droplet; the new ed25519 keys are not supported in the DigitalOcean management interface, but since only the public key is uploaded the existing rsa private keys can be upgraded to use bcrypt.

Once you boot the server it can be configured to use `Debian backports <http://backports.debian.org/Instructions/>`_ allowing OpenSSH to be updated to 6.6. (There may be other changes to make, e.g. :ref:`kali_ssh-agent`.)

.. code-block:: bash

  SUDO=$(which sudo)
  [[ "$USER" == "root" ]] && SUDO=
  $SUDO cp /etc/apt/sources.list /etc/apt/sources.list.orig
  $SUDO cat <<EOF | $SUDO tee -a /etc/apt/sources.list
  deb http://http.debian.net/debian wheezy-backports main
  EOF
  $SUDO apt-get update
  $SUDO apt-get -t wheezy-backports install ssh -y

At that point any ed25519 public keys can be copied to the droplet and used as the environment is now running OpenSSH > 6.5.


Private Key Format
------------------

PEM vs New Format
^^^^^^^^^^^^^^^^^

Prior to OpenSSH 6.5, all private SSH keys were stored in `PEM Files <http://how2ssl.com/articles/working_with_pem_files/>`_ format. PEM is a wrapper with the base-64-encoded binary key surrounded by header and footer lines. Encrypting it with a password generates additional optional headers identifying the encryption type::

  -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,49A1996587BB830F8A9F51FEF51953C2

From the "DEK-Info:" line, the RSA private key is encrypted using the AES-128-CBC cipher. Later we will show the ciper uses an encryption key generated with 1 round of an MD5 hash; MD5 uses an IV (initialization vector) from the DEK-Info line above (here "49A1996587BB830F8A9F51FEF51953C2") and a salt of the IV's first 16 hex digits. Unfortunately, that means some password-cracking hardware can generate billions of guesses per second.

As indicated above, OpenSSH 6.5 added the `new openssh key format and bcrypt pbkdf <http://www.tedunangst.com/flak/post/new-openssh-key-format-and-bcrypt-pbkdf>`_. This option makes brute-force password cracking much harder by replacing the fast MD5 hash the slower bcrypt. It will take an extra fraction of a second (or longer with more rounds) to log in which is a good tradeoff for private key safety.

The new OpenSSH format is enabled by default for ed25519 keys but must be manually specified for the other key types via the ``ssh-keygen -o`` option.

RSA Public Key Structure
^^^^^^^^^^^^^^^^^^^^^^^^

The public key consists of a sequence of 9 integers (see `RFC 2313 <http://tools.ietf.org/html/rfc2313#section-7.2>`_): a version number (0); n = modulus; e = public exponent; d = private exponent; p = first prime; q = second prime; d mod (p-1) = first exponent; d mod (q-1) = second exponent; (inverse of q) mod p = coefficient.

You can peer into the RSA private key format using ``openssl`` two different but equivalent ways: ``openssl asn1parse -i -in PRIVATEKEY`` or ``openssl rsa -text -noout -in PRIVATEKEY``. Trying to decrypt a password-protected private key should yield an unencrypted private key that generates output like the following:

.. code-block:: console

  hacker@kali:~$ rm test*
  hacker@kali:~$ ssh-keygen -q -t rsa -f test
  Enter passphrase (empty for no passphrase): 
  Enter same passphrase again: 
  hacker@kali:~$ openssl asn1parse -i -in test
      0:d=0  hl=4 l=1186 cons: SEQUENCE          
      4:d=1  hl=2 l=   1 prim:  INTEGER           :00
      7:d=1  hl=4 l= 257 prim:  INTEGER           :B4F4755B0CAA95520E6FD0663942770E4DA101859A008072A16E2295067DEFC7CAA3AFC10A939127EC22BAD8863CF83106025F9B625B0FC7DF3A9E6D0E21A10D3C406336ABAE184F861B52826664280631561623C54881E30C500399A70CB93DBCAEEDA692C9EFE4B44BFD2EE4B3012B08B79BA0EB016B10C70EE99EF42A75600AC7C6F13B52EB89D7A522C577260663A13848A1E948868AD0A6024982F8735A962D71F2E6349CB68F2922F69FC4F085B1178FD527A4AC2429462D40D25758D7CA247DEDDA07E5F02274DFFE7630FB78ED4B4CEA0B9A28AF49E422F578624907C2F51756F678193062DC1D975056C46ECD0A8882B81896D7241F17B37CF8093F
    268:d=1  hl=2 l=   3 prim:  INTEGER           :010001
    273:d=1  hl=4 l= 256 prim:  INTEGER           :569D0023319FE0D322F7E02F5DCEF37F9426B1BCCA26DD5480F25F79275F564B32324128CC302FF584F066B0C7281DC01159477BEF8B18B599A2CC3BF4DCA1E2DCE910D4153EC28225F5A3FBA898DE1380BFECDEF84A29698CF62B92FB437AD3132243BC4C5C7E07E148D20A050BAD4E74E0B58C43902D381D9F84B141BBA4EC21E96E2AD9BA174DE1FCBF133F3654D2CAC15EA1B74934845961AE628D56DC3BFAEC7121FFD8DE8A7CD636EB6DF512FDD72CCE605382A6AE35ED4132144B871311E6289BD7DCE88D2353C70D12A7F082E75D755D5C57FF31435A0C23CDF08A79B3271216E844C3A871ECEA9144B8F39C7954D0030CA21DFD33520341964BD5A9
    533:d=1  hl=3 l= 129 prim:  INTEGER           :E924DCE38BD234DC092CAAE7B65D890CC6C73EE2D457B73ABA60D005633B93B05B8E610C0FC67F9A50589687E0ED902AD41219B727EE2B060F3771ABA4D21592CD816FA90292C8D2CEDE08A48ACB52F2A9035F1895B0C711D6DCE618678985A6C20E76947A0279A6AAA5CB40791CF607C5B517B929CED1422017C6C2E4247763
    665:d=1  hl=3 l= 129 prim:  INTEGER           :C6B1D2D9837DCCC550D610BA80F19675245448B2F6A7F78ED866EF7DD5056B6C0CB45D9617F6A2770E9A32E4D3AE21A9D5D387431FB43390C1FF550375E513C06FF719D75175075B6EA0866FD9ADFCB8D5331EEE9F38256AFE7AC6ADA245853B453BF2CD3917FE5779E68D8120D5E5C3823A0CBA35404AB99728FDD93C647375
    797:d=1  hl=3 l= 128 prim:  INTEGER           :32BD621167A1B4FD5A45CD6026714EDD67F97EF730CD724426C1E123FB07C149B573542DA2D5497A1518629269E269E8D844A432174F9F2F6F6A5AA3C7782D57C8BFEDC4339A2C78ACAAE7E89F8846A2272463B2DF091D1A05D00787B228DCDC810952C7579268555C783EB6E664E62AA4DD97AF25A92C239F066DAC86A8650F
    928:d=1  hl=3 l= 128 prim:  INTEGER           :646F285C486A0362CDBC96D21F317ED3119D04EE695D77F61D8ED289F16E7EE12BFED3BB75BB765DE5E4ADCB1AF0CF1550FF4E44F0B69EC61239A5584D7490AA5A2E3642AF6B0F5FF9286D2C06853AD496F7F32FBD0D9D645AE3E69F8801CA19AEA261D5B8815750124F26C1D9BE2518D12FD4951F2BB359E27D96EB02EAE7AD
   1059:d=1  hl=3 l= 128 prim:  INTEGER           :7972D4E2F63EB0FC5D933B75F20C0D4F45C56C8611F00DD13D0638A3B0D043D1E41AE8DB0641D83CE593F15D8DFAF6B87DE8E102EC7DA804CF20AD76C28C5A7E9C4F590F18D8C2DB296791125F21AA9882265AD7F99E17B3494BF5CB75EBF62FFEF105F60B43BB9F54D6B3CD380B2C2BDC9080CC2F13B5342B452DFEF3CC807C
  hacker@kali:~$ openssl rsa -text -noout -in test
  Private-Key: (2048 bit)
  modulus:
      00:b4:f4:75:5b:0c:aa:95:52:0e:6f:d0:66:39:42:
      77:0e:4d:a1:01:85:9a:00:80:72:a1:6e:22:95:06:
      7d:ef:c7:ca:a3:af:c1:0a:93:91:27:ec:22:ba:d8:
      86:3c:f8:31:06:02:5f:9b:62:5b:0f:c7:df:3a:9e:
      6d:0e:21:a1:0d:3c:40:63:36:ab:ae:18:4f:86:1b:
      52:82:66:64:28:06:31:56:16:23:c5:48:81:e3:0c:
      50:03:99:a7:0c:b9:3d:bc:ae:ed:a6:92:c9:ef:e4:
      b4:4b:fd:2e:e4:b3:01:2b:08:b7:9b:a0:eb:01:6b:
      10:c7:0e:e9:9e:f4:2a:75:60:0a:c7:c6:f1:3b:52:
      eb:89:d7:a5:22:c5:77:26:06:63:a1:38:48:a1:e9:
      48:86:8a:d0:a6:02:49:82:f8:73:5a:96:2d:71:f2:
      e6:34:9c:b6:8f:29:22:f6:9f:c4:f0:85:b1:17:8f:
      d5:27:a4:ac:24:29:46:2d:40:d2:57:58:d7:ca:24:
      7d:ed:da:07:e5:f0:22:74:df:fe:76:30:fb:78:ed:
      4b:4c:ea:0b:9a:28:af:49:e4:22:f5:78:62:49:07:
      c2:f5:17:56:f6:78:19:30:62:dc:1d:97:50:56:c4:
      6e:cd:0a:88:82:b8:18:96:d7:24:1f:17:b3:7c:f8:
      09:3f
  publicExponent: 65537 (0x10001)
  privateExponent:
      56:9d:00:23:31:9f:e0:d3:22:f7:e0:2f:5d:ce:f3:
      7f:94:26:b1:bc:ca:26:dd:54:80:f2:5f:79:27:5f:
      56:4b:32:32:41:28:cc:30:2f:f5:84:f0:66:b0:c7:
      28:1d:c0:11:59:47:7b:ef:8b:18:b5:99:a2:cc:3b:
      f4:dc:a1:e2:dc:e9:10:d4:15:3e:c2:82:25:f5:a3:
      fb:a8:98:de:13:80:bf:ec:de:f8:4a:29:69:8c:f6:
      2b:92:fb:43:7a:d3:13:22:43:bc:4c:5c:7e:07:e1:
      48:d2:0a:05:0b:ad:4e:74:e0:b5:8c:43:90:2d:38:
      1d:9f:84:b1:41:bb:a4:ec:21:e9:6e:2a:d9:ba:17:
      4d:e1:fc:bf:13:3f:36:54:d2:ca:c1:5e:a1:b7:49:
      34:84:59:61:ae:62:8d:56:dc:3b:fa:ec:71:21:ff:
      d8:de:8a:7c:d6:36:eb:6d:f5:12:fd:d7:2c:ce:60:
      53:82:a6:ae:35:ed:41:32:14:4b:87:13:11:e6:28:
      9b:d7:dc:e8:8d:23:53:c7:0d:12:a7:f0:82:e7:5d:
      75:5d:5c:57:ff:31:43:5a:0c:23:cd:f0:8a:79:b3:
      27:12:16:e8:44:c3:a8:71:ec:ea:91:44:b8:f3:9c:
      79:54:d0:03:0c:a2:1d:fd:33:52:03:41:96:4b:d5:
      a9
  prime1:
      00:e9:24:dc:e3:8b:d2:34:dc:09:2c:aa:e7:b6:5d:
      89:0c:c6:c7:3e:e2:d4:57:b7:3a:ba:60:d0:05:63:
      3b:93:b0:5b:8e:61:0c:0f:c6:7f:9a:50:58:96:87:
      e0:ed:90:2a:d4:12:19:b7:27:ee:2b:06:0f:37:71:
      ab:a4:d2:15:92:cd:81:6f:a9:02:92:c8:d2:ce:de:
      08:a4:8a:cb:52:f2:a9:03:5f:18:95:b0:c7:11:d6:
      dc:e6:18:67:89:85:a6:c2:0e:76:94:7a:02:79:a6:
      aa:a5:cb:40:79:1c:f6:07:c5:b5:17:b9:29:ce:d1:
      42:20:17:c6:c2:e4:24:77:63
  prime2:
      00:c6:b1:d2:d9:83:7d:cc:c5:50:d6:10:ba:80:f1:
      96:75:24:54:48:b2:f6:a7:f7:8e:d8:66:ef:7d:d5:
      05:6b:6c:0c:b4:5d:96:17:f6:a2:77:0e:9a:32:e4:
      d3:ae:21:a9:d5:d3:87:43:1f:b4:33:90:c1:ff:55:
      03:75:e5:13:c0:6f:f7:19:d7:51:75:07:5b:6e:a0:
      86:6f:d9:ad:fc:b8:d5:33:1e:ee:9f:38:25:6a:fe:
      7a:c6:ad:a2:45:85:3b:45:3b:f2:cd:39:17:fe:57:
      79:e6:8d:81:20:d5:e5:c3:82:3a:0c:ba:35:40:4a:
      b9:97:28:fd:d9:3c:64:73:75
  exponent1:
      32:bd:62:11:67:a1:b4:fd:5a:45:cd:60:26:71:4e:
      dd:67:f9:7e:f7:30:cd:72:44:26:c1:e1:23:fb:07:
      c1:49:b5:73:54:2d:a2:d5:49:7a:15:18:62:92:69:
      e2:69:e8:d8:44:a4:32:17:4f:9f:2f:6f:6a:5a:a3:
      c7:78:2d:57:c8:bf:ed:c4:33:9a:2c:78:ac:aa:e7:
      e8:9f:88:46:a2:27:24:63:b2:df:09:1d:1a:05:d0:
      07:87:b2:28:dc:dc:81:09:52:c7:57:92:68:55:5c:
      78:3e:b6:e6:64:e6:2a:a4:dd:97:af:25:a9:2c:23:
      9f:06:6d:ac:86:a8:65:0f
  exponent2:
      64:6f:28:5c:48:6a:03:62:cd:bc:96:d2:1f:31:7e:
      d3:11:9d:04:ee:69:5d:77:f6:1d:8e:d2:89:f1:6e:
      7e:e1:2b:fe:d3:bb:75:bb:76:5d:e5:e4:ad:cb:1a:
      f0:cf:15:50:ff:4e:44:f0:b6:9e:c6:12:39:a5:58:
      4d:74:90:aa:5a:2e:36:42:af:6b:0f:5f:f9:28:6d:
      2c:06:85:3a:d4:96:f7:f3:2f:bd:0d:9d:64:5a:e3:
      e6:9f:88:01:ca:19:ae:a2:61:d5:b8:81:57:50:12:
      4f:26:c1:d9:be:25:18:d1:2f:d4:95:1f:2b:b3:59:
      e2:7d:96:eb:02:ea:e7:ad
  coefficient:
      79:72:d4:e2:f6:3e:b0:fc:5d:93:3b:75:f2:0c:0d:
      4f:45:c5:6c:86:11:f0:0d:d1:3d:06:38:a3:b0:d0:
      43:d1:e4:1a:e8:db:06:41:d8:3c:e5:93:f1:5d:8d:
      fa:f6:b8:7d:e8:e1:02:ec:7d:a8:04:cf:20:ad:76:
      c2:8c:5a:7e:9c:4f:59:0f:18:d8:c2:db:29:67:91:
      12:5f:21:aa:98:82:26:5a:d7:f9:9e:17:b3:49:4b:
      f5:cb:75:eb:f6:2f:fe:f1:05:f6:0b:43:bb:9f:54:
      d6:b3:cd:38:0b:2c:2b:dc:90:80:cc:2f:13:b5:34:
      2b:45:2d:fe:f3:cc:80:7c

Exploring Key Formats
^^^^^^^^^^^^^^^^^^^^^

Here is an example of a password-less public/private key pair:

.. code-block:: console

  hacker@kali:~$ ssh-keygen -f test
  ###################### SNIP ######################
  hacker@kali:~$ file test test.pub
  test:     PEM RSA private key
  test.pub: OpenSSH RSA public key
  hacker@kali:~$ cat test
  -----BEGIN RSA PRIVATE KEY-----
  MIIEpgIBAAKCAQEA6LYkrIrOD8jv6nmhnaDgL3EVzZGFxf64ZTsx77PALbwXV9Bm
  pQ/G+S8tcL1wwxLZITOQcEHQwTQQiU9yjLRoMZ85oIeY2c6pist8KFY9s/Sosq+H
  7OiFjl3iV91b1uhI7sXRZLP/cIt8vsscBcuqeQrKkqSO6GJIfgryt48lywzlSy4y
  ###################### SNIP ######################
  8ob6CtW5MetynggY4ooupmn+enSpomnE8hqw5ln0RvqC/daaA3E4OuqF
  -----END RSA PRIVATE KEY-----
  hacker@kali:~$ cat test.pub
  ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDotiSsis4PyO/qeaGdoOAvcRXNkYXF/rhlOzHvs8AtvBdX0GalD8b5Ly1wvXDDEtkhM5BwQdDBNBCJT3KMtGgxnzmgh5jZzqmKy3woVj2z9Kiyr4fs6IWOXeJX3VvW6EjuxdFks/9wi3y+yxwFy6p5CsqSpI7oYkh+CvK3jyXLDOVLLjK1AflAhj4nuA06zqcq9CrtlACVsJTcD7wBKaXwoDcU3M3c0tmcss2to1V0iT63WNeZMYZ25HbFuhSZ6wYZUZ4YWtD0NWG9cduc+wMeipU3o8EXTX5Q9HLEZUE17Prmy4I2RVaN30guXEtiFfr5Pl6J2mbS/wKdLWYMPvFt hacker@kali

Here's an example using a password (note the extra 3 lines following BEGIN):

.. code-block:: console

  hacker@kali:~$ ssh-keygen -f test_pw
  ###################### SNIP ######################
  hacker@kali:~$ cat test_pw
  -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,461F84B21C5C4E46BD20641948A4A00C

  VJQhVGRfRzUk36xDsRdXWW6hVjCjaJIqpmHVIoRmB8a2onahBM8Fx70bKeAFUO9E
  XV1SLkbGrrWKCdSHC4/jP7f1JGPwhpLirYGBnzamLXHJCFIo5ykwubDlsOdfRb7N
  laV4JxhdqcQHXiq3aiUMywAoE/JLMz+0E4fAHvS+Alv4QtWkVE69M9s3vE+gEzEY
  ###################### SNIP ######################
  IHJ1VMBBrxS1VaOebyhBWwphtrF63aj+O6Sxl8WheNiIfqoevQWhbo8OQpscNoEJ
  -----END RSA PRIVATE KEY-----
  hacker@kali:~$ cat test_pw.pub
  ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDOmZMRMjnMd7SDxgohho1k3nug3bsRGsBuWYfjypusPgq+msUBGPu6Vp/TxcWQM+YWnfm8LXvUi8icQOFmFerptQJjtlolccNsyVG7AR8EgsWzWdOYfl93SkU8hik9qhc1jldhu6QNf1fpfBaqnVo1qXlYGbt+WOM2T4EO1oFGuK5D6Od8OiLRWeFRwb6nQ2xHy7bFq9B9QM8SAEg2nutA7WSJKVS7IShTQhW9nEPBza05k0G8PcRBv44LZdhQk6HYYRHR/X5swfq1LgW1ZzmwL2db48VWKZUoF5EfA2ZfgqSjaCve2ypiCn9Z7lgpEF4s8JMxFveglU0fEzQWrA+t hacker@kali

``openssl`` can output the cleartext private key using the old format when given the password ("12345678" here):

.. code-block:: console

  hacker@kali:~$ openssl rsa  -text -in test_pw -passin "pass:12345678" 
  Private-Key: (2048 bit)
  ###################### SNIP ######################
  -----BEGIN RSA PRIVATE KEY-----
  MIIEpQIBAAKCAQEAzpmTETI5zHe0g8YKIYaNZN57oN27ERrAblmH48qbrD4KvprF
  ARj7ulaf08XFkDPmFp35vC171IvInEDhZhXq6bUCY7ZaJXHDbMlRuwEfBILFs1nT
  mH5fd0pFPIYpPaoXNY5XYbukDX9X6XwWqp1aNal5WBm7fljjNk+BDtaBRriuQ+jn
  ###################### SNIP ######################
  /aGL5XA3wiNR3aGqzs8BDIa6RnCk8uNTOr3wkF+hVWEvFJn0VjgUgMg=
  -----END RSA PRIVATE KEY-----

Here is the new format (note ``-o`` option):

.. code-block:: bash

  hacker@kali:~$ ssh-keygen -o -f test_pbkdf_pw
  ###################### SNIP ######################
  hacker@kali:~$ file test_pbkdf_pw test_pbkdf_pw.pub
  test_pbkdf_pw:     ASCII text
  test_pbkdf_pw.pub: OpenSSH RSA public key
  hacker@kali:~$ cat test_pbkdf_pw
  -----BEGIN OPENSSH PRIVATE KEY-----
  b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jYmMAAAAGYmNyeXB0AAAAGAAAABAydebQQT
  RBzYs4YekPhx0KAAAAEAAAAAEAAAEXAAAAB3NzaC1yc2EAAAADAQABAAABAQDBZ168XSy1
  16gSIGqegnmp4wyjZXbDzVUaNPxBwiFfjIQe/WXjGan3nbH6Jan9Idk09YKrQX18zrTaRq
  ###################### SNIP ######################
  njePgvFWQv+1nKuTU0vz3h5+ujU3g=
  -----END OPENSSH PRIVATE KEY-----
  hacker@kali:~$ cat test_pbkdf_pw.pub
  ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBZ168XSy116gSIGqegnmp4wyjZXbDzVUaNPxBwiFfjIQe/WXjGan3nbH6Jan9Idk09YKrQX18zrTaRqSwmV/gDP5oyIARh9kBH4Sb0GFaKoUSnZdFpCylWhJ+XBMNBcF0oq95/I1QReV7Y57Y9oXFzsabYr3f+V4PpOwnBAxbmGj+AUYGVlqueTP8yXlOKoYKjfPXpvylgg0cszrSG1L/RQb4MgXrTDdbDEVIGz2718ZnSyIcH774ZBzGCixfDVfJv6V7ckdHSWZQ8CZyW0DHAFoGaHxJcHTWPzer0rI00OGJaF/WYfDAF9VBbjEfoCEN86kJf9c9KPviJo5Mgdi9 hacker@kali


Private Key Encryption/Decryption
---------------------------------

Encrypting the Private Key File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

How does the now-older MD5-based algorithm work? The following discussion is based on `Improving the security of your SSH private key files <http://martin.kleppmann.com/2013/05/24/improving-security-of-ssh-private-keys.html>`_.

Let's assume the private key header starts with:

.. code-block:: console

  -----BEGIN RSA PRIVATE KEY-----
  Proc-Type: 4,ENCRYPTED
  DEK-Info: AES-128-CBC,461F84B21C5C4E46BD20641948A4A00C

This indicates the private key is encrypted using the aes-128-cbc ciper with an initialization vector (IV) of 461F84B21C5C4E46BD20641948A4A00C. So to decrypt private key "private" into "cleartext" we're just missing the encryption key:

.. code-block:: bash

  openssl aes-128-cbc -d -iv 461F84B21C5C4E46BD20641948A4A00C \
          -K $MD5HASH -in private -out cleartext

The missing key is just 1 round of an MD5 hash of the user-supplied password concatenated with the first half of the IV (shown here in python):

.. code-block:: python

  import md5
  PW = "user_supplied_password"
  IV = "461F84B21C5C4E46BD20641948A4A00C"
  SALT = IV[0:16]
  MD5HASH = md5.new(PW + SALT.decode("hex")).hexdigest()

To show this is correct, run :download:`md5_hash.sh </encryption/md5_hash.sh>` to generate private key via ``ssh-keygen`` and compare decrypting it with ``openssl`` and manually using the 1-round MD5 algorithm above:

.. literalinclude:: /encryption/md5_hash.sh
   :language: bash

Cracking the Private Key File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Of course you can always use openssl to extract the old format private key with a password guess:

.. code-block:: console

  hacker@kali:~$ # generate strong key with weak password "12345678"
  hacker@kali:~$ ssh-keygen -t rsa -b 4096 -q -P 12345678 -f test
  hacker@kali:~$ # bad password guess returns status 1
  hacker@kali:~$ openssl rsa -text -in test -passin "pass:123456789" -out test.nopass
  unable to load Private Key
  140644201522856:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:evp_enc.c:539:
  140644201522856:error:0906A065:PEM routines:PEM_do_header:bad decrypt:pem_lib.c:483:
  hacker@kali:~$ echo $?
  1
  hacker@kali:~$ # good password guess returns status 0
  hacker@kali:~$ openssl rsa -text -in test -passin "pass:12345678" -out test.nopass
  writing RSA key
  hacker@kali:~$ echo $?
  0

Here we use john the ripper to crack an old-formatted RSA ssh private key:

.. code-block:: console

  hacker@kali:~$ # generate strong key with weak password "12345678"
  hacker@kali:~$ ssh-keygen -t rsa -b 4096 -q -P 12345678 -f test
  hacker@kali:~$ cat > words <<EOF
  > 123456789
  > 12345678
  > EOF
  hacker@kali:~$ # find ssh2john and convert ssh key to password format
  hacker@kali:~$ apt-file find ssh2john
  metasploit-framework: /usr/share/metasploit-framework/data/john/run.linux.x64.mmx/ssh2john
  hacker@kali:~$ /usr/share/metasploit-framework/data/john/run.linux.x64.mmx/ssh2john test > test.john
  hacker@kali:~$ # crack using "words" worklist
  hacker@kali:~$ /usr/sbin/john --wordlist=words test.john
  Loaded 1 password hash (SSH RSA/DSA [32/64])
  12345678         (test)
  guesses: 1  time: 0:00:00:00 DONE (Thu Mar 19 22:27:00 2015)  c/s: 11.11  trying: 123456789 - 12345678
  Use the "--show" option to display all of the cracked passwords reliably
  hacker@kali:~$ /usr/sbin/john --show test.john
  test:12345678

  1 password hash cracked, 0 left



Manage Multiple ssh Accounts
============================

Permissions
-----------

ssh won't work right unless the file permissions are right:

.. code-block:: bash

  chmod g-w,o-w ~
  chmod 700 ~/.ssh
  chmod 600 ~/.ssh/*

.. _kali_ssh-agent:

Kali OpenSSH < 6.5 and Gnome ``ssh-agent`` Problem
--------------------------------------------------

First, Kali tracks Debian 7 and so has an old OpenSSH. Using Debian backports partially solves this problem (and may introduce others), so use the following at your own risk:

.. code-block:: bash

  SUDO=$(which sudo)
  [[ "$USER" == "root" ]] && SUDO=
  $SUDO cp /etc/apt/sources.list /etc/apt/sources.list.orig
  $SUDO cat <<EOF | $SUDO tee -a /etc/apt/sources.list
  deb http://http.debian.net/debian wheezy-backports main
  EOF
  $SUDO apt-get update
  $SUDO apt-get -t wheezy-backports install ssh -y

Kali's gnome desktop installs gnome-keyring which automatically starts `Gnome Keyring SSH Agent <https://wiki.gnome.org/Projects/GnomeKeyring/Ssh>`_:

  Gnome Keyring includes an SSH agent which integrates with the gnome-keyring and user login for its passwords. It can also use the main PKCS#11 private key store.

  The SSH agent automatically loads files in ~/.ssh which have corresponding \*.pub paired files. Additional SSH keys can be manually loaded and managed via the ssh-add command.

To see if ``ssh-agent`` is automatically start do one of:

.. code-block:: console

  hacker@kali:~$ # Check environment for SSH... variables
  hacker@kali:~$ set | grep SSH
  SSH_AGENT_PID=1689
  SSH_AUTH_SOCK=/run/user/1000/keyring/ssh
  hacker@kali:~$ 
  hacker@kali:~$ # Or directly check for the process running
  hacker@kali:~$ ps -u $USER | grep ssh-agent
   1689 ?        00:00:00 ssh-agent

Unfortunately the ``ssh-agent`` started by Kali's gnome can't handle adding OpenSSH 6.5+ keys. You'll see the following errors:

.. code-block:: console

  hacker@kali:~$ ssh-keygen -t ed25519 -f ed25519
  ###################### SNIP ######################
  hacker@kali:~$ # The version that pre-loads keys in ~/.ssh fails
  hacker@kali:~$ ssh-add -l
  4096 35:46:5e:dd:f7:96:26:4e:c0:94:09:b0:05:2b:f4:a4 bitbender@bitbender.org (RSA)
  4096 5f:c5:bb:dc:00:5e:a8:e3:1f:38:a1:be:32:70:19:b7 bitbender@bitbender.org (RSA)
  2048 29:31:8d:56:5f:5f:6f:7a:05:6f:1e:bc:77:50:57:f0 jim.maki@bitbender.org (RSA)
  hacker@kali:~$ # Here it fails with the spurious "Error reading response ..."
  hacker@kali:~$ ssh-add ed25519
  Enter passphrase for ed25519: 
  Error reading response length from authentication socket.
  Could not add identity: ed25519
  hacker@kali:~$ # Kill ssh-agent and start up OpenSSH version
  hacker@kali:~$ ssh-agent -k
  unset SSH_AUTH_SOCK;
  unset SSH_AGENT_PID;
  echo Agent pid 3708 killed;
  hacker@kali:~$ eval "$(ssh-agent -s)"
  Agent pid 4093
  hacker@kali:~$ # This version does not pre-load keys in ~/.ssh
  hacker@kali:~$ ssh-add -l
  The agent has no identities.
  hacker@kali:~$ # And this version does add ed25519 keys
  hacker@kali:~$ ssh-add ed25519
  Enter passphrase for ed25519: 
  Identity added: ed25519 (ed25519)

To disable the gnome version, start ``gnome-session-properties`` then deselect :menuselection:`Startup Programs --> SSH Key Agent`. Alternatively, from the command line:

.. code-block:: bash

  CF=~/.config/autostart/gnome-keyring-ssh.desktop
  cp /etc/xdg/autostart/gnome-keyring-ssh.desktop $CF
  if [[ $(grep -c 'X-GNOME-Autostart-enabled=' $CF) == 0 ]]; then
    echo "X-GNOME-Autostart-enabled=false" >> $CF
  else
    sed -i 's/^\(X-GNOME-Autostart-enabled=\).*/\1false/' $CF
  fi
  ssh-agent -k

Then either log out & back in, or in a command prompt kill the gnome version and start up one manually:

.. code-block:: bash

  ssh-agent -k
  eval "$(ssh-agent -s)"

If you don't want any ``ssh-agent`` to start, just change "use-ssh-agent" to "no-use-ssh-agent" in :file:`/etc/X11/Xsession.options`.


The Accounts
------------

Let's assume that we are trying to handle these ssh accounts:

"hacker" home network account
  Local machine ssh access with OpenSSH >= 6.5. Here we can create and ed25519 key with 50 rounds:

  .. code-block:: bash

    ssh-keygen -t ed25519 -a 50 -C "bitbender@bitbender.org" -f ~/.ssh/keys/id_hacker
    # on local hosts
    cp ~/.ssh/keys/id_hacker.pub >> ~/.ssh/authorized_keys
    # distribute to local hosts via
    ssh-copy-id -i ~/.ssh/keys/id_hacker.pub OTHERHOST

DigitalOcean account
  2 accounts, one pre-OpenSSH 6.5 to handle Debian 7 droplets (VMs) and another ed25519 ssh key for other droplets. The ed25519 key cannot be pre-loaded in the management GUI but must be manually copied over later. The keys are generated via:

  .. code-block:: bash

    ssh-keygen -t ed25519 -a 50 -C "bitbender@bitbender.org" -f ~/.ssh/keys/id_do
    ssh-keygen -o -t rsa -b 4096 -C "bitbender@bitbender.org" -f ~/.ssh/keys/id_do_rsa
    # Use DigitalOcean management GUI to add id_do_rsa.pub to accounts ssh keys

"bitbender" bitbucket.org account
  Account for ssh access to git and mercurial repositories owned by bitbender. Note that ``alias`` won't easily work for this one as the repository url's must be modified from "https://bitbender@bitbucket.org/bitbender/REPO.git" to "git@bitbucket.org:bitbender/REPO.git" and the ``git push``, ... commands will use ssh. bitbucket.org only supports dsa and rsa keys, so the key is generated via:

  .. code-block:: bash

    ssh-keygen -o -t rsa -b 4096 -C "bitbender@bitbender.org" -f ~/.ssh/keys/id_bitbucket_rsa
    # Use bitbucket.org management GUI to add id_bitbucket_rsa.pub to account's keys 

  Note that you should add the following to the :file:`~/.hgrc` file to enable compression in mercurial's ssh:

  .. code-block:: ini

    [ui]
    ssh = ssh -C


Distributing the Public Keys
----------------------------

Both cloud providers bitbucket.org and DigitalOcean have management interfaces to upload your public key. For your local hosts you need to append your public key in the target host's ~/.ssh/authorized_keys:

.. code-block:: bash

  ssh-copy-id -i ~/.ssh/id_hacker.pub TARGETHOST

Alternatively you can ``scp`` the file to the target host and ``cat id_hacker.pub >> ~/.ssh/authorized_keys``.

Managing Keys
-------------

There are 3 conventional ways to manage key use:

alias
  ``alias do='ssh -i ~/.ssh/id_do root@pentest-meetup.do.bitbender.org'``

  To ssh to host pentest-meetup.do.bitbender.org just run ``do``. This won't easily work for bitbucket.org's git/mercurial repositories.

``ssh -o``
  To ssh to a host using ssh options:

  .. code-block:: bash

    ssh -o "HostName=pentest-meetup.do.bitbender.org" \
        -o "IdentityFile=~/.ssh/keys/id_bitbucket" do

  Unfortunately, this doesn't simplify things.

~/.ssh/config HOST entries
  Allows simply using ``ssh HOST`` and the required parameters are automatically supplied. Order is important: matching Host entries earlier in the file have higher priority.

  .. code-block:: bash

    cat ~/.ssh/config
    Host do
        HostName pentest-meetup.do.bitbender.org
        User root
        IdentityFile ~/.ssh/keys/id_do_rsa
    Host bitbucket.org
        HostName bitbucket.org
        IdentityFile ~/.ssh/keys/id_bitbucket_rsa
        IdentitiesOnly yes
    Host *
        User hacker
        IdentityFile ~/.ssh/keys/id_hacker
        # IdentitiesOnly yes
        PreferredAuthentications publickey

Of these the :file:`~/.ssh/config` works in more cases and is the simplest to use. It does require the existing git and mercurial repository repo reference to be updated from https to git/ssh, but that is only if you wish to use ssh; the existing https references will continue to work.

Using the Managed Keys at bitbucket.org
---------------------------------------

The most complicated test is ssh access a bitbucket repository, say https://bitbender@bitbucket.org/bitbender/pentest-meetup-heroku.git.

First change the repository url to ssh. (Note: when you clone a repository via ``git clone git@bitbucket.org:bitbender/pentest-meetup-heroku.git`` the ``git remote -v`` will be set up for ssh. But here we're assuming the original clone came from ``git clone https://bitbender@bitbucket.org/bitbender/pentest-meetup-heroku.git``.):

.. code-block:: console

  hacker@kali:~$ cd local/pentest-meetup-heroku/
  hacker@kali:~/local/pentest-meetup-heroku$ git remote -v
  origin	https://bitbender@bitbucket.org/bitbender/pentest-meetup-heroku.git (fetch)
  origin	https://bitbender@bitbucket.org/bitbender/pentest-meetup-heroku.git (push)
  hacker@kali:~/local/pentest-meetup-heroku$ git remote set-url origin \
      git@bitbucket.org:bitbender/pentest-meetup-heroku.git
  hacker@kali:~/local/pentest-meetup-heroku$ git remote -v
  origin	git@bitbucket.org:bitbender/pentest-meetup-heroku.git (fetch)
  origin	git@bitbucket.org:bitbender/pentest-meetup-heroku.git (push)

Then add the ssh key (if it hasn't already been added):

.. code-block:: console

  hacker@kali:~/local/pentest-meetup-heroku$ ssh-add ~/.ssh/id_bitbucket_rsa
  Enter passphrase for /home/hacker/.ssh/id_bitbucket_rsa: 
  Identity added: /home/hacker/.ssh/id_bitbucket_rsa (/home/hacker/.ssh/id_bitbucket_rsa)
  hacker@kali:~/local/pentest-meetup-heroku$ ssh-add -l
  4096 5f:c5:bb:dc:00:5e:a8:e3:1f:38:a1:be:32:70:19:b7 /home/hacker/.ssh/id_bitbucket_rsa (RSA)

Finally, perform repository actions over ssh:

.. code-block:: console

  hacker@kali:~/local/pentest-meetup-heroku$ git pull
  The authenticity of host 'bitbucket.org (131.103.20.167)' can't be established.
  RSA key fingerprint is 97:8c:1b:f2:6f:14:6b:5c:3b:ec:aa:46:46:74:7c:40.
  Are you sure you want to continue connecting (yes/no)? yes
  Warning: Permanently added 'bitbucket.org,131.103.20.167' (RSA) to the list of known hosts.
  Already up-to-date.

Config Files Changes
--------------------

Now that ssh identity files are set up there are 2 :file:`/etc/ssh/sshd_config` options to consider:

PasswordAuthentication no
  Default is "yes" but can be disabled with ssh keys distributed to users and entered in the :file:`~/.ssh/authorized_keys` files.

PermitRootLogin no
  Default is "yes" but can be set to one of "without-password" (password authentication disabled for root), "forced-commands-only" (public key authentication allowed, but only when the command option is enabled), or "no".

For more information see `OpenSSH/Client Configuration Files <http://en.wikibooks.org/wiki/OpenSSH/Client_Configuration_Files>`_ or the man pages.

ssh Key Exchange, Encryption, and MAC
=====================================

See `Understanding the SSH Encryption and Connection Process <https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process>`_ for a detailed overview of SSH encryption. SSH encryption involves:

* public/private keys for both authentication & the key exchange

* symmetrical encryption with MACs for data exchange

See `The Secure Shell (SSH) Transport Layer Protocol <https://tools.ietf.org/html/rfc4253>`_ for tranport details. `6. Binary Packet Protocol <https://tools.ietf.org/html/rfc4253#section-6>`_ describes the required algorithms for compression, encryption, data integrity, key exchange, and public key algorithms. More interesting is `7.1 Algorithm Negotiation <https://tools.ietf.org/html/rfc4253#section-7.1>`_ which gives the data exchanged at the start of the key exchange::

  kex_algorithms (key exchange)
  server_host_key_algorithms (algorithms supported for the server host key)
  encryption_algorithms_client_to_server (symmetric encryption)
  encryption_algorithms_server_to_client (symmetric encryption)
  mac_algorithms_client_to_server (message authentication code)
  mac_algorithms_server_to_client (message authentication code)
  compression_algorithms_client_to_server
  compression_algorithms_server_to_client

The client and server exchange the above algorithm lists. To see what algorithms are supported by a host run:

.. code-block:: bash

  # key exchange algorithms
  ssh -Q kex
  # key types
  ssh -Q key
  # supported symmetric ciphers
  ssh -Q cipher
  # above ciphers that support authenticated encryption
  # ssh -Q cipher-auth
  # supported message integrity codes
  ssh -Q mac

For example, on Debian Jessie this gives:

.. code-block:: console
  :emphasize-lines: 1,2,12,13,28,29,46-49

  hacker@kali:~$ # key exchange algorithms
  hacker@kali:~$ ssh -Q kex
  diffie-hellman-group1-sha1
  diffie-hellman-group14-sha1
  diffie-hellman-group-exchange-sha1
  diffie-hellman-group-exchange-sha256
  ecdh-sha2-nistp256
  ecdh-sha2-nistp384
  ecdh-sha2-nistp521
  diffie-hellman-group1-sha1
  curve25519-sha256@libssh.org
  hacker@kali:~$ # key types
  hacker@kali:~$ ssh -Q key
  ssh-ed25519
  ssh-ed25519-cert-v01@openssh.com
  ssh-rsa
  ssh-dss
  ecdsa-sha2-nistp256
  ecdsa-sha2-nistp384
  ecdsa-sha2-nistp521
  ssh-rsa-cert-v01@openssh.com
  ssh-dss-cert-v01@openssh.com
  ecdsa-sha2-nistp256-cert-v01@openssh.com
  ecdsa-sha2-nistp384-cert-v01@openssh.com
  ecdsa-sha2-nistp521-cert-v01@openssh.com
  ssh-rsa-cert-v00@openssh.com
  ssh-dss-cert-v00@openssh.com
  hacker@kali:~$ # supported symmetric ciphers
  hacker@kali:~$ ssh -Q cipher
  3des-cbc
  blowfish-cbc
  cast128-cbc
  arcfour
  arcfour128
  arcfour256
  aes128-cbc
  aes192-cbc
  aes256-cbc
  rijndael-cbc@lysator.liu.se
  aes128-ctr
  aes192-ctr
  aes256-ctr
  aes128-gcm@openssh.com
  aes256-gcm@openssh.com
  chacha20-poly1305@openssh.com
  hacker@kali:~$ # above ciphers that support authenticated encryption
  hacker@kali:~$ # ssh -Q cipher-auth
  hacker@kali:~$ # supported message integrity codes
  hacker@kali:~$ ssh -Q mac
  hmac-sha1
  hmac-sha1-96
  hmac-sha2-256
  hmac-sha2-512
  hmac-md5
  hmac-md5-96
  hmac-ripemd160
  hmac-ripemd160@openssh.com
  umac-64@openssh.com
  umac-128@openssh.com
  hmac-sha1-etm@openssh.com
  hmac-sha1-96-etm@openssh.com
  hmac-sha2-256-etm@openssh.com
  hmac-sha2-512-etm@openssh.com
  hmac-md5-etm@openssh.com
  hmac-md5-96-etm@openssh.com
  hmac-ripemd160-etm@openssh.com
  umac-64-etm@openssh.com
  umac-128-etm@openssh.com

The client has a number of ways of influencing the selected algorithm:

.. code-block:: bash

  # To influence the kex algorithm
  ssh -o KexAlgorithms=KEXALGS ...
  # To influence host key algorithm
  ssh -o HostKeyAlgorithms=KEYALGS ...
  # To influence cipher algorithm
  ssh -c CIPHER ...
  ssh -o Ciphers=CIPHERS ...
  # To influence MAC
  ssh -m MAC ...
  ssh -o MACs=MACALGS ...

Once the key negotiation selects an encryption key the SSH user will be authenticated and the session data exchange begins.

