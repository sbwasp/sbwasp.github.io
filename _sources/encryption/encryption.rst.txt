.. include:: /pentest_links.txt


.. _encryption:

**********
Encryption
**********

.. todo::

  This section is not at even an alpha state; it's one, big todo. The outline needs to be expanded in both scope and depth.

Background
==========

Asymmetric vs symmetric encryption
----------------------------------

For more information than this summary, see:

Asymmetric or `Public-key cryptography`_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From `Public-key cryptography`_:

  Public-key cryptography, also known as asymmetric cryptography, is a class of cryptographic protocols based on algorithms that require two separate keys, one of which is secret (or private) and one of which is public. Although different, the two parts of this key pair are mathematically linked. The public key is used, for example, to encrypt plaintext or to verify a digital signature; whereas the private key is used for the opposite operation, in these examples to decrypt ciphertext or to create a digital signature. The term "asymmetric" stems from the use of different keys to perform these opposite functions, each the inverse of the other – as contrasted with conventional ("symmetric") cryptography which relies on the same key to perform both. ...

  Because of the computational complexity of asymmetrical encryption, it is typically used only to transfer a symmetrical encryption key by which the message (and usually the entire conversation) is encrypted. The symmetrical encryption/decryption is based on simpler algorithms and is much faster.

  Message authentication involves hashing the message to produce a "digest," and encrypting the digest with the private key to produce a digital signature. Thereafter anyone can verify this signature by (1) computing the hash of the message, (2) decrypting the signature with the signer's public key, and (3) comparing the computed digest with the decrypted digest. Equality between the digests confirms the message is unmodified since it was signed, and that the signer, and no one else, intentionally performed the signature operation — presuming the signer's private key has remained secret to the signer. ...

  Public-key algorithms are fundamental security ingredients in cryptosystems, applications and protocols. They underpin various Internet standards, such as Transport Layer Security (TLS), S/MIME, PGP, and GPG. Some public key algorithms provide key distribution and secrecy (e.g., Diffie–Hellman key exchange), some provide digital signatures (e.g., Digital Signature Algorithm), and some provide both (e.g., RSA).

Common `Public-key cryptography`_:

  Diffie-Hellman key exchange, DSS, ElGamal, elliptic curve algorithms, RSA

These protocols use asymmetric key algorithms: S/MIME, OpenPGP, SSL/TLS, SSH, ... .

`Symmetric-key algorithm`_ or secret key encryption
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From `Symmetric-key algorithm`_:

  Symmetric-key algorithms are algorithms for cryptography that use the same cryptographic keys for both encryption of plaintext and decryption of ciphertext. The keys may be identical or there may be a simple transformation to go between the two keys. The keys, in practice, represent a shared secret between two or more parties that can be used to maintain a private information link. This requirement that both parties have access to the secret key is one of the main drawbacks of symmetric key encryption, in comparison to public-key encryption.

  Symmetric-key encryption can use either stream ciphers or block ciphers.[4]

  * Stream ciphers encrypt the digits (typically bytes) of a message one at a time.

  * Block ciphers take a number of bits and encrypt them as a single unit, padding the plaintext so that it is a multiple of the block size. Blocks of 64 bits have been commonly used. The Advanced Encryption Standard (AES) algorithm approved by NIST in December 2001 uses 128-bit blocks.

Note that the key size (in terms of bits) is not comparable, with the asymmetric keys needing many more bits for equivalent strength.

Common `Symmetric-key algorithm`_:

* Common `Block cipher <http://en.wikipedia.org/wiki/Block_cipher>`_:

  AES, Blowfish, Triple DES, Serpent, Twofish

* Widely used `Stream cipher <http://en.wikipedia.org/wiki/Stream_cipher>`_:

  RC4, block ciphers in stream mode, HC-256, Rabbit, Salsa20, SOSEMANUK


MAC, Hash, and Digital Signature
--------------------------------

MAC vs hash vs digital signature

MAC = message authentication code
  public function of message and shared (symmetric) key that produces a fixed-length value that authenticates the message. Differs from digital signature by using symmetric key.

  MACs based on hash: HMAC-SHA256 HMAC-SHA1 HMAC-MD5 UMAC VMAC
  MACs based on block cipher: CMAC, OMAC, PMAC Poly1305-AES

hash
  public function of message that produces a fixed-length value that authenticates the message (everyone can compute) (attackers fight against math). A cryptographic hash function = hash function "impossible" to invert.

  hash examples: SHA256 SHA1 MD5

  block cipher or hash (==> HMAC) can be basis for a MAC

digital signature
  a public function of message and a private key that produces a fixed-length value that authenticates the message. Differs from MAC by using public/private keys.


Certificates
------------

TBD

Encryption software
===================

OpenSSL
-------

Using OpenSSL
^^^^^^^^^^^^^

Getting help.

.. code-block:: bash

  man openssl
  openssl list-standard-commands
  openssl list-message-digest-commands
  openssl list-cipher-commands
  openssl list-cipher-algorithms
  openssl list-message-digest-algorithms
  openssl list-public-key-algorithms

Generating keys
^^^^^^^^^^^^^^^

Symmetric encryption
^^^^^^^^^^^^^^^^^^^^

OpenGPG
-------


