.. include:: /pentest_links.txt

.. _firewalls:

***********************
Firewalls
***********************



ERLite-3 firewall
=================


IPv6 `dnsmasq`_, SLAAC, and stateless DHCPv6
--------------------------------------------

Want to implement IPv6? Here the `Ubiquiti EdgeRouter Lite <https://www.ubnt.com/edgemax/edgerouter-lite/>`_ firewall is configured to accept a /56 IPv6 `Prefix delegation`_ from Spectrum Internet and distribute the addresses across 2 internal networks using SLAAC. `dnsmasq`_ (a caching DNS/DHCP server) is configured to provide DHCPv6 options via stateless DHCPv6. From a client perspective, IPv6-capable clients automatically get IPv6 addresses via SLAAC, and get DNS/NTP server options from stateless DHCPv6 via dnsmasq.


Firewall overview
-----------------

ERLite-3 firewall
^^^^^^^^^^^^^^^^^

The ERL3 runs `EdgeOS <https://dl.ubnt.com/guides/edgemax/EdgeOS_UG.pdf>`_ which supports Cavium Octeon and MIPs chips. Both EdgeOS and `VyOS <https://wiki.vyos.net/wiki/Main_Page>`_ were forked from `Vyatta <https://wiki.vyos.net/wiki/Vyatta>`_. The OS is currently based on Debian 7 (Wheezy) running a Linux 3.x kernel. The current Debian release is Debian 9 (Stretch) with Linux kernel 4.9.

For more information consult the `EdgeMAX Help Center <https://help.ubnt.com/hc/en-us/categories/200321064-EdgeMAX>`_, `Ubiquiti EdgeRouter Lite Setup Part 1: The Basics <http://www.forshee.me/2016/03/01/ubiquiti-edgerouter-lite-setup-part-1-the-basics.html>`_  (a 6-part series, especially the Key-Based SSH Login instructions), and `My Home Router – EdgeRouter Lite <https://networkjutsu.com/my-home-router-edgerouter-lite/>`_ (another multi-part series).

The command line has 2 modes: normal mode ("$" prompt) and configuration mode ("#" prompt), entered via the ``configure`` command and exited via the ``exit`` command.

There are 2 versions of the configuration: running and boot. After ``configure`` and typing in some configuration commands, the configuration changes can be saved to the running configuration via ``commit`` (or ``discard`` to not save). To make those changes persist after boot issue the ``save`` command.


Zone vs interface-based firewall
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Our example will be a zone-based firewall and we explain the difference with the more popular interface-based firewall rulesets.

EdgeOS supports both the traditional per-interface (ACL-based in EdgeOS documentation) and zone-based firewalls. See `Per Interface vs. Zone Based Firewall <https://www.nnbfn.net/2011/06/per-interface-vs-zone-based-firewall/>`_. The EdgeOS GUI only supports per-interface firewall, and thus most organizations use per-interface. However, there are some configuration options that are only available via the CLI. In many cases the CLI can be used alongside the GUI, but in the case of zones only the CLI can be used for configuration.

To make clear the difference, if you have 3 interfaces eth0, eth1, and eth2 then you have 4 zones: WAN (eth0), LAN (eth1), GUEST (eth2) (or call it DMZ or WIFI or ...), and LOCAL (the firewall itself). For each pair, say WAN=>GUEST, 2 rulesets (IPv4 and IPv6) are created for the allowed traffic from the WAN zone to the GUEST zone. This makes it very easy to determine the traffic permitted between zones. The ERL has 2x4x3 = 24 zone rulesets.

In contrast, an interface-based firewall has 4 rulesets per interface, actually 2 IPv4 and 2 IPv6. Take the WAN interface, then 1 ruleset WAN_LOCAL lists the traffic allowed from the WAN to the firewall itself. The ruleset WAN_IN lists the traffic allowed from the WAN to the other interfaces (LAN and GUEST). That means 2x2x3 = 12 rulesets. It's a little harder to determine what traffic goes from WAN=>LAN as the WAN_IN ruleset lists both WAN=>LAN and WAN=>GUEST traffic.


Firewall backup
^^^^^^^^^^^^^^^

While it's best to save the configuration, you can also save the commands required to create that configuration. Having the commands makes it easier to explore modification (and learning) of the EdgeOS configuration. Here's the backup for both the configuration (which can be restored) and the commands (which can be re-executed).

.. code-block:: bash
  :emphasize-lines: 4-5

  # /config/user-data persists between boots
  CONFIG=`date +%Y%m%d%H%M`-firewall-config.eos
  COMMANDS=${CONFIG/config/commands}
  show configuration all > /config/user-data/$CONFIG
  show configuration commands > /config/user-data/$COMMANDS
  ## To load a saved config:
  # configure
  # load /config/user-data/$CONFIG

The backups can easily be ``scp`` copied to/from another host.


Firewall rulesets
-----------------

ISP prefix delegation
^^^^^^^^^^^^^^^^^^^^^

We'll start with commands for ISP prefix delegation (the heart of IPv6 address allocation).

`RFC 3633`_ IPv6 Prefix Options for Dynamic Host Configuration Protocol (DHCP) version 6 defines a mechanism by which `DHCPv6 <https://en.wikipedia.org/wiki/DHCPv6>`_ can be used to delegate a network address prefix to a network. This is known as `prefix delegation <https://en.wikipedia.org/wiki/Prefix_delegation>`_. The router can then assign addresses to clients within the network using either DHCPv6 or `stateless address autoconfiguraton <https://en.wikipedia.org/wiki/IPv6_address#Stateless_address_autoconfiguration>`_ (SLAAC). With SLAAC the router advertises a prefix to clients, and clients pick their own address within that network. This example will use dhcpv6-stateless, which uses SLAAC for address assignment but also allows the DHCPv6 server to pass other information to the clients.

.. code-block:: text
  :emphasize-lines: 4-5,7-8,10-11,15,17,20-22,24-26

  # Configure all interfaces for IPv6 automatic configuration.
  # Use only 1 NS (neighbor solicitation) message for DAD (duplicate address detection).

  set interfaces ethernet eth0 ipv6 address autoconf
  set interfaces ethernet eth0 ipv6 dup-addr-detect-transmits 1

  set interfaces ethernet eth1 ipv6 address autoconf
  set interfaces ethernet eth1 ipv6 dup-addr-detect-transmits 1

  set interfaces ethernet eth2 ipv6 address autoconf
  set interfaces ethernet eth2 ipv6 dup-addr-detect-transmits 1


  # Use IA_NA (non-temporary address) with /56 IA_PD (prefix delegation) on eth0
  set interfaces ethernet eth0 dhcpv6-pd pd 0 prefix-length 56
  # DHCPv6 option 14 = Rapid Commit (DHCPv6 client uses a 2 message exchange, not 4).
  set interfaces ethernet eth0 dhcpv6-pd rapid-commit enable

  # For eth1, eth2: create subnet, give i/f the '::1' address, turn on dhcpv6-stateless.
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 prefix-id ':0'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 host-address '::1'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 service dhcpv6-stateless

  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 prefix-id ':1'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 host-address '::1'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 service dhcpv6-stateless


Firewall DNS & IPv4 DHCP
^^^^^^^^^^^^^^^^^^^^^^^^

`ISC DHCP <https://www.isc.org/downloads/dhcp/>`_ is the default DHCP server with `dnsmasq`_ being a relatively new alternative. (See `EdgeRouter - Using dnsmasq for DHCP Server <https://help.ubnt.com/hc/en-us/articles/115002673188-EdgeRouter-Using-dnsmasq-for-DHCP-Server>`_.) dnsmasq combines both caching DNS and DHCP allowing DHCP client names to appear in DNS.


ISC DHCP IPv4
"""""""""""""

Here's the configuration for ISC DHCP:

.. code-block:: text
  :emphasize-lines: 2-3,5-9,12,15-16,18-22,24-25,28-30,33,35,38-47,50-57

  # Set hostname and domain for firewall
  set system host-name fw
  set system domain-name home.local
  # Make lookup of firewall's address return the one on the client's interface.
  set service dns forwarding options localise-queries
  set system ip override-hostname-ip 192.168.1.1
  set system static-host-mapping host-name fw inet 192.168.1.1
  set system static-host-mapping host-name fw inet 192.168.2.1
  set system static-host-mapping host-name fw inet 192.168.3.1

  # DNSMASQ not enabled by default (ISC DHCPD default, but doesn't update DNS)
  set service dhcp-server use-dnsmasq disable

  # Set system name-server to itself, which will cache and forward to list below
  set system name-server 127.0.0.1
  set system name-server ::1
  # Forwarding for system name-server (it's a caching server so needs real DNS)
  set service dns forwarding name-server 8.8.8.8
  set service dns forwarding name-server 8.8.4.4
  set service dns forwarding name-server '2001:4860:4860::8888'
  set service dns forwarding name-server '2001:4860:4860::8844'
  set service dns forwarding cache-size 400
  # DNS listen on eth1 & eth2 (forwarded to localhost, then list above)
  set service dns forwarding listen-on eth1
  set service dns forwarding listen-on eth2

  # Get IP, default route, but not DNS from ISP
  set interfaces ethernet eth0 dhcp-options default-route update
  set interfaces ethernet eth0 dhcp-options default-route-distance 210
  set interfaces ethernet eth0 dhcp-options name-server no-update

  # ISC DHCP not disabled
  set service dhcp-server disabled false
  # DHCP server updates /etc/hosts for client leases.
  set service dhcp-server hostfile-update enable

  # GUEST DHCP configuration (unifi-controller is DHCP option 43 to locate unifi controller)
  set service dhcp-server shared-network-name GUEST authoritative enable
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 default-router 192.168.2.1
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 dns-server 192.168.2.1
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 ntp-server 192.168.2.1
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 domain-name bitbender.org
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 lease 86400
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 start 192.168.2.38 stop 192.168.2.243
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 static-mapping ubiquiti ip-address 192.168.2.2
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 static-mapping ubiquiti mac-address '44:d9:e7:f6:48:f2'
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 unifi-controller 192.168.1.29

  # LAN DHCP configuration (unifi-controller is DHCP option 43 to locate unifi controller)
  set service dhcp-server shared-network-name LAN authoritative enable
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 default-router 192.168.1.1
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 dns-server 192.168.1.1
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 ntp-server 192.168.1.1
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 domain-name bitbender.org
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 lease 86400
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 start 192.168.1.101 stop 192.168.1.200
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 unifi-controller 192.168.1.29


dnsmasq DHCP IPv4
"""""""""""""""""

`dnsmasq`_ combines both DHCP and DNS for IPv4 & IPv6 in a single daemon that registers DHCP leases in DNS. You'll be lost without the `dnsmasq manpage`_ and the commands ``dnsmasq --help dhcp`` & ``dnsmasq --help dhcp6`` listing the availble DHCP options.

Each time you make a dnsmasq configuration change you must remember to restart dnsmasq:

.. code-block:: bash

  sudo service dnsmasq force-reload

To change the above ISC DHCP configuration to use `dnsmasq`_ requires these changes:

.. code-block:: text
  :emphasize-lines: 2-3,6-8,10-11,13,15,17,19-22,24,27-31,33,35-36,39-48,51-

  # Remove the existing DHCP configuration (and more).
  delete service dns forwarding
  delete service dhcp-server

  # Disable ISC DHCP
  set service dhcp-server disabled false
  set service dhcp-server hostfile-update disable
  set service dhcp-server use-dnsmasq enable
  # Don't bind to all interfaces, skip eth0
  set service dns forwarding options bind-interfaces
  set service dns forwarding except-interface eth0
  # Add domain to simple names in /etc/hosts
  set service dns forwarding options expand-hosts
  # Do not forward reverse lookups for private addresses
  set service dns forwarding options bogus-priv
  # Return DNS lookups matching the interface's IP
  set service dns forwarding options localise-queries
  # Change firewall's IP in /etc/hosts from 127.0.0.1
  set system ip override-hostname-ip 192.168.1.1
  set system static-host-mapping host-name fw inet 192.168.1.1
  set system static-host-mapping host-name fw inet 192.168.2.1
  set system static-host-mapping host-name fw inet 192.168.3.1
  # DHCP server is only DHCP on network.
  set service dns forwarding options dhcp-authoritative

  # dnsmasq is caching server so needs to forward to real DNS
  set service dns forwarding name-server 8.8.8.8
  set service dns forwarding name-server 8.8.4.4
  set service dns forwarding name-server '2001:4860:4860::8888'
  set service dns forwarding name-server '2001:4860:4860::8844'
  set service dns forwarding cache-size 400
  # DNS requests for plain names (without dots) are never forwarded
  set service dns forwarding options domain-needed
  # Add dns names matching the interface IPv4/v6 addresses
  set service dns forwarding options 'interface-name=lan.bitbender.org,eth1'
  set service dns forwarding options 'interface-name=guest.bitbender.org,eth2'

  # guest subnet
  set service dhcp-server shared-network-name guest authoritative enable
  set service dhcp-server shared-network-name guest subnet 192.168.2.0/24 default-router 192.168.2.1
  set service dhcp-server shared-network-name guest subnet 192.168.2.0/24 dns-server 192.168.2.1
  set service dhcp-server shared-network-name guest subnet 192.168.2.0/24 domain-name home.local
  set service dhcp-server shared-network-name guest subnet 192.168.2.0/24 lease 86400
  set service dhcp-server shared-network-name guest subnet 192.168.2.0/24 ntp-server 192.168.2.1
  set service dhcp-server shared-network-name guest subnet 192.168.2.0/24 start 192.168.2.38 stop 192.168.2.243
  set service dhcp-server shared-network-name guest subnet 192.168.2.0/24 static-mapping ubiquiti ip-address 192.168.2.2
  set service dhcp-server shared-network-name guest subnet 192.168.2.0/24 static-mapping ubiquiti mac-address '44:d9:e7:f6:48:f2'
  set service dhcp-server shared-network-name guest subnet 192.168.2.0/24 unifi-controller 192.168.1.10

  # lan subnet
  set service dhcp-server shared-network-name lan authoritative enable
  set service dhcp-server shared-network-name lan subnet 192.168.1.0/24 default-router 192.168.1.1
  set service dhcp-server shared-network-name lan subnet 192.168.1.0/24 dns-server 192.168.1.1
  set service dhcp-server shared-network-name lan subnet 192.168.1.0/24 domain-name home.local
  set service dhcp-server shared-network-name lan subnet 192.168.1.0/24 lease 86400
  set service dhcp-server shared-network-name lan subnet 192.168.1.0/24 ntp-server 192.168.1.1
  set service dhcp-server shared-network-name lan subnet 192.168.1.0/24 start 192.168.1.101 stop 192.168.1.200
  set service dhcp-server shared-network-name lan subnet 192.168.1.0/24 static-mapping backup ip-address 192.168.1.10
  set service dhcp-server shared-network-name lan subnet 192.168.1.0/24 static-mapping backup mac-address '00:30:67:bc:41:d0'
  set service dhcp-server shared-network-name lan subnet 192.168.1.0/24 static-mapping printer ip-address 192.168.1.3
  set service dhcp-server shared-network-name lan subnet 192.168.1.0/24 static-mapping printer mac-address '30:05:5c:13:9b:e5'


dnsmasq DHCP IPv6
"""""""""""""""""

Finally we get to Stateless DHCPv6 using dnsmasq, relying on SLAAC for IPv6 and default gateway settings, with dnsmasq giving the DNS and NTP servers. From `DHCPv6 and RA with dnsmasq <https://weirdfellow.wordpress.com/2014/09/05/dhcpv6-and-ra-with-dnsmasq/>`_, dnsmasq option combination ``ra-names`` means "DNS will try to guess the auto-configured addresses." According to the article Microsoft doesn't follow IEEE EUI-64 so the "ra-names option will have no effect – DNS will not guess correctly the IPv6 address of those machines, so no entry in DNS will be populated." This behaviour can be changed and reverted to IEEE EUI-64 by executing these commands on the Windows client:"

.. code-block:: bat

  netsh interface ipv6 set global randomizeidentifiers=disabled
  netsh advfirewall firewall add rule name="ICMPv4 8" protocol=icmpv4:8,any dir=in action=allow
  netsh advfirewall firewall add rule name="ICMPv6 128" protocol=icmpv6:128,any dir=in action=allow

The additional configuration modifications to enable SLAAC, ra-stateless, and ra-names plus pass on the IPv6 DNS and NTP addresses are:

.. code-block:: text
  :emphasize-lines: 2-3,6-8,10-12

  # dnsmasq provides dhcpv6-stateless (DHCP options only - SLAAC provides address & gateway).
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 service dhcpv6-stateless
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 service dhcpv6-stateless

  # Turn on ra-stateless providing IPv6 DNS & NTP servers
  set service dns forwarding options 'dhcp-range=set:eth1v6,::,constructor:eth1,ra-stateless,ra-names,12h'
  set service dns forwarding options 'dhcp-option=tag:eth1v6,option6:dns-server,[::]'
  set service dns forwarding options 'dhcp-option=tag:eth1v6,option6:ntp-server,[::]'

  set service dns forwarding options 'dhcp-range=set:eth2v6,::,constructor:eth2,ra-stateless,ra-names,12h'
  set service dns forwarding options 'dhcp-option=tag:eth2v6,option6:dns-server,[::]'
  set service dns forwarding options 'dhcp-option=tag:eth2v6,option6:ntp-server,[::]'


Firewall system configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here are the general configuration options:

.. code-block:: text

  set firewall all-ping enable
  set firewall broadcast-ping disable
  set firewall receive-redirects disable
  set firewall send-redirects enable
  set firewall source-validation disable
  set firewall syn-cookies enable
  set interfaces ethernet eth0 address dhcp
  set interfaces ethernet eth0 description Internet

  set interfaces ethernet eth0 duplex auto
  set interfaces ethernet eth0 mac '00:24:54:57:8e:55'
  set interfaces ethernet eth0 speed auto
  set interfaces ethernet eth1 address 192.168.1.1/24
  set interfaces ethernet eth1 description Local
  set interfaces ethernet eth1 duplex auto
  set interfaces ethernet eth1 speed auto
  set interfaces ethernet eth2 address 192.168.2.1/24
  set interfaces ethernet eth2 description 'Local 2'
  set interfaces ethernet eth2 duplex auto
  set interfaces ethernet eth2 speed auto
  set interfaces loopback lo

  set service gui http-port 80
  set service gui https-port 443
  set service gui older-ciphers disable
  set service nat rule 5010 description 'masquerade for WAN'
  set service nat rule 5010 outbound-interface eth0
  set service nat rule 5010 type masquerade
  set service ssh port 22
  set service ssh protocol-version v2
  set system domain-name home.local
  set system host-name fw
  set system ip override-hostname-ip 192.168.1.1
  set system login banner pre-login '********************************************************************\n*                                                                  *\n* * * *                      bitbender                       * * * *\n* * * *                   WARNING NOTICE:                    * * * *\n*   This system is restricted solely to bitbender authorized       *\n*   users for legitimate business purposes only. The actual or     *\n*   attempted unauthorized access, use, or modification of this    *\n*   system is strictly prohibited by bitbender. Unauthorized       *\n*   users are subject to disciplinary proceedings and/or           *\n*   criminal and civil penalties under state, federal, or other    *\n*   domestic and foreign laws. The use of this system may be       *\n*   monitored and recorded for administrative and security reasons.*\n*   Anyone accessing this system expressly consents to such        *\n*   monitoring and is advised that if monitoring reveals possible  *\n*   evidence of criminal activity, bitbender may provide the       *\n*   evidence of such activity to law enforcement officials. All    *\n*   users must comply with bitbender instructions regarding the    *\n*   protection of bitbender information assets.                    *\n*                                                                  *\n********************************************************************\n'
  set system login user someone authentication encrypted-password '$6$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
  set system login user someone authentication plaintext-password ''
  set system login user someone full-name ''
  set system login user someone level admin

  set system ntp server 0.ubnt.pool.ntp.org
  set system ntp server 1.ubnt.pool.ntp.org
  set system ntp server 2.ubnt.pool.ntp.org
  set system ntp server 3.ubnt.pool.ntp.org
  set system offload hwnat disable
  set system offload ipsec enable
  set system offload ipv4 forwarding enable
  set system offload ipv6 forwarding enable
  set system syslog global facility all level notice
  set system syslog global facility protocols level debug
  set system time-zone UTC
  set system traffic-analysis dpi enable
  set system traffic-analysis export enable


zone configurations
^^^^^^^^^^^^^^^^^^^

Here is boilerplate for applying the zone configurations. Zone ruleset lan-guest-6 is for IPv6 traffic from zone lan to zone guest (with "-6" dropped for IPv4). Each zone is associated with an interface (eth0, eth1, eth2, and local for the firewall itself).

.. code-block:: text
  :emphasize-lines: 1,9,17,25

  set zone-policy zone GUEST default-action drop
  set zone-policy zone GUEST from LAN firewall ipv6-name lan-guest-6
  set zone-policy zone GUEST from LAN firewall name lan-guest
  set zone-policy zone GUEST from WAN firewall ipv6-name wan-guest-6
  set zone-policy zone GUEST from WAN firewall name wan-guest
  set zone-policy zone GUEST from local firewall ipv6-name local-guest-6
  set zone-policy zone GUEST from local firewall name local-guest
  set zone-policy zone GUEST interface eth2
  set zone-policy zone LAN default-action drop
  set zone-policy zone LAN from GUEST firewall ipv6-name guest-lan-6
  set zone-policy zone LAN from GUEST firewall name guest-lan
  set zone-policy zone LAN from WAN firewall ipv6-name wan-lan-6
  set zone-policy zone LAN from WAN firewall name wan-lan
  set zone-policy zone LAN from local firewall ipv6-name local-lan-6
  set zone-policy zone LAN from local firewall name local-lan
  set zone-policy zone LAN interface eth1
  set zone-policy zone WAN default-action drop
  set zone-policy zone WAN from GUEST firewall ipv6-name guest-wan-6
  set zone-policy zone WAN from GUEST firewall name guest-wan
  set zone-policy zone WAN from LAN firewall ipv6-name lan-wan-6
  set zone-policy zone WAN from LAN firewall name lan-wan
  set zone-policy zone WAN from local firewall ipv6-name local-wan-6
  set zone-policy zone WAN from local firewall name local-wan
  set zone-policy zone WAN interface eth0
  set zone-policy zone local default-action drop
  set zone-policy zone local from GUEST firewall ipv6-name guest-local-6
  set zone-policy zone local from GUEST firewall name guest-local
  set zone-policy zone local from LAN firewall ipv6-name lan-local-6
  set zone-policy zone local from LAN firewall name lan-local
  set zone-policy zone local from WAN firewall ipv6-name wan-local-6
  set zone-policy zone local from WAN firewall name wan-local
  set zone-policy zone local local-zone

We're not providing all the firewall rules as they generally differ too much. But as an example, if you wanted to allow all IPv4 traffic in a given zone:

.. code-block:: text

  set firewall name allow-all default-action accept
  set firewall name allow-all description 'IPv4 allow all, drop invalid'
  set firewall name allow-all rule 1 action accept
  set firewall name allow-all rule 1 state established enable
  set firewall name allow-all rule 1 state related enable
  set firewall name allow-all rule 2 action drop
  set firewall name allow-all rule 2 log enable
  set firewall name allow-all rule 2 state invalid enable

Another snippet is to drop traffic except for continuation of already allowed traffic.

.. code-block:: text

  set firewall name allow-est-drop-inv default-action drop
  set firewall name allow-est-drop-inv description 'IPv4 allow established, drop invalid'
  set firewall name allow-est-drop-inv enable-default-log
  set firewall name allow-est-drop-inv rule 1 action accept
  set firewall name allow-est-drop-inv rule 1 state established enable
  set firewall name allow-est-drop-inv rule 1 state related enable
  set firewall name allow-est-drop-inv rule 2 action drop
  set firewall name allow-est-drop-inv rule 2 log enable
  set firewall name allow-est-drop-inv rule 2 state invalid enable


.. _lede-project:

LEDE Project firewalls
======================


LEDE Project
------------

From `LEDE <https://lede-project.org/>`_ (Linux Embedded Development Environment):

  The LEDE Project (“Linux Embedded Development Environment”) is a Linux operating system based on OpenWrt. It is a complete replacement for the vendor-supplied firmware of a wide range of wireless routers and non-network devices. See the `Table of Hardware <https://lede-project.org/toh/start>`_ for supported devices. For more information about LEDE Project organization, see the `About LEDE <https://lede-project.org/about>`_ pages.

It's a fork of OpenWRT but the 2 organizations intent to remerge (`[LEDE-DEV] LEDE call for vote on remerge proposal V3 <http://lists.infradead.org/pipermail/lede-adm/2017-June/000552.html>`_).

There is a list of `LEDE Project - Packages <https://lede-project.org/packages/start>`_ and since it's open source you can view the `LEDE source code <https://git.lede-project.org/>`_.

Users can start with `LEDE User Guide <https://lede-project.org/docs/user-guide/start>`_ and developers with `LEDE Developer Guide <https://lede-project.org/docs/guide-developer/start>`_.

For initial flashing see `Factory install: First-time installation of LEDE on a device <https://lede-project.org/docs/guide-quick-start/factory_installation>`_ and for updates see `Sysupgrading an existing LEDE device from the web admin GUI <https://lede-project.org/docs/guide-quick-start/sysupgrade.luci>`_. 

For questions there's the `LEDE Project Forum <https://forum.lede-project.org/>`_.


LEDE Linux is not standard Linux
--------------------------------

While LEDE is a Linux-based distribution, it is very different from Debian and fedora.


LEDE uses musl libc
^^^^^^^^^^^^^^^^^^^

From `Command not found <https://lede-project.org/faq/after_installation#command_not_found>`_, LEDE uses `musl libc <https://www.musl-libc.org/>`_.


BusyBox shell
^^^^^^^^^^^^^

LEDE uses the `Wikipedia - BusyBox <https://en.wikipedia.org/wiki/BusyBox>`_ shell: "**BusyBox** is software that provides several stripped-down Unix tools in a single executable file." See `BusyBox Command Help  <https://busybox.net/downloads/BusyBox.html>`_ for documentation and `BusyBox in VM <https://busybox.net/live_bbox/live_bbox.html>`_ for a live running :program:`BusyBox`. :program:`BusyBox` provides a list of `External Tiny Utilities <https://busybox.net/tinyutils.html>`_ not provided by :program:`BusyBox`.

Here are commands illustrating virtually all shell commands are merely links to :program:`BusyBox`:

.. code-block:: bash
  :emphasize-lines: 1,6

  ls -l /bin   # most executables are links to busybox
  ls -l /sbin
  ls -l /usr/bin
  ls -l /usr/sbin

  ls -l /bin/busybox   # busybox is small (378,437 bytes)


LEDE boots with U-Boot
^^^^^^^^^^^^^^^^^^^^^^

LEDE's boot loader is `Das U-Boot <https://en.wikipedia.org/wiki/Das_U-Boot>`_:

  Das U-Boot (subtitled "the Universal Boot Loader" and often shortened to U-Boot) is an open source, primary boot loader used in embedded devices to package the instructions to boot the device's operating system kernel. It is available for a number of computer architectures, including 68k, ARM, Blackfin, MicroBlaze, MIPS, Nios, SuperH, PPC, RISC-V and x86.

  U-Boot is both a first-stage and second-stage bootloader. It is loaded by the system's ROM or BIOS from a supported boot device, such as an SD card, SATA drive, NOR flash (e.g. using SPI or I²C), or NAND flash. If there are size constraints, U-Boot may be split into stages: the platform would load a small SPL (Secondary Program Loader), which is a stripped-down version of U-Boot, and the SPL would do initial hardware configuration and load the larger, fully featured version of U-Boot.

  Regardless of whether the SPL is used, U-Boot performs both first-stage (e.g., configuring memory controllers and SDRAM) and second-stage booting (performing multiple steps to load a modern operating system from a variety of devices that must be configured, presenting a menu for users to interact with and control the boot process, etc.).

The code can be found at GitHub `u-boot/u-boot <https://github.com/u-boot/u-boot>`_.


BusyBox runs ``init`` with :file:`/etc/init.d/`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Latest Kali's ``/sbin/init`` is a link to ``/lib/systemd/systemd``. In contrast, LEDE uses the more traditional startup with :file:`init` and  :file:`/etc/inittab`.

.. code-block:: console
  :emphasize-lines: 1

  root@LEDE:/# cat /etc/inittab
  ::sysinit:/etc/init.d/rcS S boot
  ::shutdown:/etc/init.d/rcS K shutdown
  ttyAMA0::askfirst:/usr/libexec/login.sh
  ttyS0::askfirst:/usr/libexec/login.sh
  hvc0::askfirst:/usr/libexec/login.sh

Boot is comparatively simple:

.. code-block:: console
  :emphasize-lines: 1

  root@LEDE:/# cat /etc/init.d/boot
  #!/bin/sh /etc/rc.common
  # Copyright (C) 2006-2011 OpenWrt.org

  START=10
  STOP=98

  uci_apply_defaults() {
          . /lib/functions/system.sh

          cd /etc/uci-defaults || return 0
          files="$(ls)"
          [ -z "$files" ] && return 0
          mkdir -p /tmp/.uci
          for file in $files; do
                  ( . "./$(basename $file)" ) && rm -f "$file"
          done
          uci commit
  }

  boot() {
          [ -f /proc/mounts ] || /sbin/mount_root
          [ -f /proc/jffs2_bbc ] && echo "S" > /proc/jffs2_bbc
          [ -f /proc/net/vlan/config ] && vconfig set_name_type DEV_PLUS_VID_NO_PAD

          mkdir -p /var/run
          mkdir -p /var/log
          mkdir -p /var/lock
          mkdir -p /var/state
          mkdir -p /var/tmp
          mkdir -p /tmp/.uci
          chmod 0700 /tmp/.uci
          touch /var/log/wtmp
          touch /var/log/lastlog
          touch /tmp/resolv.conf.auto
          ln -sf /tmp/resolv.conf.auto /tmp/resolv.conf
          grep -q debugfs /proc/filesystems && /bin/mount -o noatime -t debugfs debugfs /sys/kernel/debug
          [ "$FAILSAFE" = "true" ] && touch /tmp/.failsafe

          /sbin/kmodloader

          [ ! -f /etc/config/wireless ] && {
                  # compat for brcm47xx and mvebu
                  sleep 1
          }

          /bin/config_generate
          uci_apply_defaults

          # temporary hack until configd exists
          /sbin/reload_config
  }


BusyBox service management
^^^^^^^^^^^^^^^^^^^^^^^^^^

See `Managing system services <https://lede-project.org/docs/user-guide/services>`_.

On the CLI ``service`` manages services:

.. code-block:: bash
  :emphasize-lines: 1-3

  service   # list available services
  service dropbear   # list available actions for a service
  service dropbear reload   # check/start/stop/restart/reload/enable/disable

The Luci web interface option :menuselection:`System --> Startup` also manages services.


Configuring LEDE with :program:`uci`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

See `How configuring LEDE works <https://lede-project.org/docs/user-guide/introduction_to_lede_configuration>`_. Then see `LEDE User Guide <https://lede-project.org/docs/user-guide/start>`_ configuration sections. Of particular interest for a firewall is `Firewall configuration <https://lede-project.org/docs/user-guide/firewall_configuration>`_ which describes the zone-based firewall configuration.

The configuration files are in :file:`/etc/config/` and are manipulated using :program:`uci`:

.. code-block:: bash
  :emphasize-lines: 1-2,4

  uci   # see options
  uci show   # see current settings

  # Change LAN interface IP
  uci set network.lan.ipaddr='192.168.200.1'   # change IP
  uci changes   # see what changed
  uci commit network   # save changes to files
  reload_config   # apply changes to system


:program:`opkg` package manager
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here's an example of the :program:`opkg` package manager:

.. code-block:: bash
  :emphasize-lines: 1-

  opkg   # opkg options
  opkg list-installed
  opkg list-upgradable
  opkg remove pppoe
  opkg list
  opkg list-changed-conffiles


Emulating a LEDE virtual image
------------------------------

Here we follow `Testing LEDE with a virtual image using the armvirt target <https://lede-project.org/docs/guide-developer/test-virtual-image-using-armvirt>`_.


LEDE downloads, zImage, and rootfs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The `Index of /releases/17.01.4/targets/armvirt/generic/ <http://lede-project.tetaneutral.net/releases/17.01.4/targets/armvirt/generic/>`_ show a variety of of downloads. The following will help sort them out.

zImage
  compressed self-extracting Linux kernel

  may also contain initial file system initramfs (formerly initrd), used by the kernel before bringing up the root fs

rootfs
  root filesystem, available in a variety of formats: cpio, squashfs, ext4, tar

Later we show using the zImage-initramfs, then zImage + root.ext4.

Here we download the demonstrated files:

.. code-block:: bash
  :emphasize-lines: 6-8

  # Download LEDE zImage* and root.ext4
  RELEASE=17.01.4
  STORAGE=/media/$USER/STORAGE
  VMS=${STORAGE}/vm
  ( cd ${VMS};
    curl -O http://lede-project.tetaneutral.net/releases/${RELEASE}/targets/armvirt/generic/lede-${RELEASE}-armvirt-zImage-initramfs
    curl -O http://lede-project.tetaneutral.net/releases/${RELEASE}/targets/armvirt/generic/lede-${RELEASE}-armvirt-zImage
    curl -O http://lede-project.tetaneutral.net/releases/${RELEASE}/targets/armvirt/generic/lede-${RELEASE}-armvirt-root.ext4.gz
    gunzip lede-${RELEASE}-armvirt-root.ext4.gz
  )


armvirt zImage-initramfs
^^^^^^^^^^^^^^^^^^^^^^^^

The zImage-initramfs file contains the kernel and rootfs in one file:

.. code-block:: bash
  :emphasize-lines: 5,7,9,29,34,51

  # Download LEDE initramfs
  RELEASE=17.01.4
  STORAGE=/media/$USER/STORAGE
  VMS=${STORAGE}/vm
  VM=${VMS}/lede-${RELEASE}-armvirt-zImage-initramfs

  sudo apt install qemu-system-arm -y

  qemu-system-arm -nographic -M virt -m 64 -kernel ${VM}
  # System prompt looks like:

  BusyBox v1.25.1 () built-in shell (ash)

       _________
      /        /\      _    ___ ___  ___
     /  LE    /  \    | |  | __|   \| __|
    /    DE  /    \   | |__| _|| |) | _|
   /________/  LE  \  |____|___|___/|___|                      lede-project.org
   \        \   DE /
    \    LE  \    /  -----------------------------------------------------------
     \  DE    \  /    Reboot (17.01.4, r3533-d0bf257c46)
      \________\/    -----------------------------------------------------------

  === WARNING! =====================================
  There is no root password defined on this device!
  Use the "passwd" command to set up a new password
  in order to prevent unauthorized SSH logins.
  --------------------------------------------------
  root@LEDE:/# df -h
  Filesystem                Size      Used Available Use% Mounted on
  rootfs                   27.2M      6.3M     20.9M  23% /
  tmpfs                    29.5M     52.0K     29.5M   0% /tmp
  tmpfs                   512.0K         0    512.0K   0% /dev
  root@LEDE:/# ip addr show
  1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1
      link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
      inet 127.0.0.1/8 scope host lo
         valid_lft forever preferred_lft forever
      inet6 ::1/128 scope host 
         valid_lft forever preferred_lft forever
  2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel master br-lan state UP qlen 1000
      link/ether 52:54:00:12:34:56 brd ff:ff:ff:ff:ff:ff
  3: br-lan: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP qlen 1000
      link/ether 52:54:00:12:34:56 brd ff:ff:ff:ff:ff:ff
      inet 192.168.1.1/24 brd 192.168.1.255 scope global br-lan
         valid_lft forever preferred_lft forever
      inet6 fd5f:a2de:a603::1/60 scope global 
         valid_lft forever preferred_lft forever
      inet6 fe80::5054:ff:fe12:3456/64 scope link 
         valid_lft forever preferred_lft forever
  root@LEDE:/# poweroff

This lacks local network connectivity, so use the slow ``-net user`` networking. Note: the VM's local 192.168.1.0/24 network collided with the host's network range, so mods were made to change VM's network to 192.168.200.0/24:

.. code-block:: bash
  :emphasize-lines: 5,7,13-21,25-27,29-32,34

  # If host local network collides with 192.168.1.0/24
  RELEASE=17.01.4
  STORAGE=/media/$USER/STORAGE
  VMS=${STORAGE}/vm
  VM=${VMS}/lede-${RELEASE}-armvirt-zImage-initramfs

  # Create TAP adapter
  LAN=lede-tap0
  sudo ip tuntap add mode tap $LAN
  sudo ip link set dev $LAN up

  # Run VM
  sudo qemu-system-arm \
      -device virtio-net-pci,netdev=lan \
      -netdev tap,id=lan,ifname=$LAN,script=no,downscript=no \
      -device virtio-net-pci,netdev=wan \
      -netdev user,id=wan,hostfwd=tcp::5555-:80 \
      -M virt \
      -nographic \
      -m 64 \
      -kernel $VM

  # On the running server:
  # If host local network collides with 192.168.1.0/24
  uci set network.lan.ipaddr='192.168.200.1'
  uci commit network
  reload_config

  ping lede-project.org
  ping6 lede-project.org
  wget -O /dev/null http://www.example.com/
  wget -6 -O /dev/null http://www.example.com/

  poweroff


armvirt zImage + root.ext4
^^^^^^^^^^^^^^^^^^^^^^^^^^

Here we combine a zImage and persistent ext4-formatted root partition:

.. code-block:: bash
  :emphasize-lines: 1,6,10-11,12,16-18,20,22,25-27,29-32,34,36,38-

  # If TAP not created previously:
  LAN=lede-tap0
  sudo ip tuntap add mode tap $LAN
  sudo ip link set dev $LAN up

  # zImage (no initramfs) + root.ext4
  STORAGE=/media/$USER/STORAGE
  VMS=${STORAGE}/vm
  RELEASE=17.01.4
  EXT4=${VMS}/lede-${RELEASE}-armvirt-root.ext4
  ZIMAGE=${VMS}/lede-${RELEASE}-armvirt-zImage
  sudo qemu-system-arm \
       -nographic \
       -M virt \
       -m 64 \
       -kernel ${ZIMAGE} \
       -drive file=${EXT4},format=raw,if=virtio \
       -append 'root=/dev/vda rootwait' \
       -device virtio-net-pci,netdev=lan \
       -netdev tap,id=lan,ifname=$LAN,script=no,downscript=no \
       -device virtio-net-pci,netdev=wan \
       -netdev user,id=wan,hostfwd=tcp::5555-:80

  # If host local network collides with 192.168.1.0/24
  uci set network.lan.ipaddr='192.168.200.1'
  uci commit network
  reload_config

  ping lede-project.org
  ping6 lede-project.org
  wget -O /dev/null http://www.example.com/
  wget -6 -O /dev/null http://www.example.com/

  poweroff

  # ... after restart see that changes persist

  ip addr show
  ping lede-project.org
  ping6 lede-project.org
  wget -O /dev/null http://www.example.com/
  wget -6 -O /dev/null http://www.example.com/

Here's a better configuration. We'll start by preparing the required networking:

.. code-block:: bash
  :emphasize-lines: 1,24-27

  # Move existing host adapter enp5s0 behind a bridge br0
  cat > br_up.sh <<'EOF'
  #!/usr/bin/env bash
  
  BRIDGE=br0
  DEV=enp5s0
  # nmcli networking off
  nmcli device set $DEV managed no
  sudo ip addr flush dev $DEV
  sudo ip -6 route flush table all
  # Create bridge and slave DEV
  if ! ip link show ${BRIDGE} &>/dev/null; then
    sudo ip link add name ${BRIDGE} type bridge
  fi
  sudo ip link set ${BRIDGE} up
  sudo ip link set ${DEV} master ${BRIDGE}
  sudo ip link set ${DEV} up
  sudo dhclient -6 -S
  sudo dhclient ${BRIDGE}
  EOF
  chmod +x br_up.sh
  sudo ./br_up.sh

  # Create extra LEDE interfaces to allow for:
  #   LEDE firewall LAN and WAN interfaces
  #   LEDE bridge for network behind the firewall
  #   Two client interfaces for LEDE bridge
  cat > lede_up.sh <<'EOF'
  #!/usr/bin/env bash

  BRIDGE=br0
  DEV=enp5s0
  LEDE_BRIDGE=lede-br0
  LEDE_BRIDGE_IP=192.168.200.254/24
  LAN=lede-tap0
  LAN_IP=192.168.200.1/24
  WAN=lede-tap1
  GUEST=lede-tap2
  GUEST_IP=192.168.200.100/24
  GUEST2=lede-tap3
  GUEST2_IP=192.168.200.101/24
  ip link add name ${LEDE_BRIDGE} type bridge
  ip addr add ${LEDE_BRIDGE_IP} dev ${LEDE_BRIDGE}
  ip link set ${LEDE_BRIDGE} up
  for tap in ${LAN} ${GUEST} ${GUEST2}; do
    ip tuntap add dev ${tap} mode tap
    ip link set dev ${tap} master ${LEDE_BRIDGE}
    ip link set dev ${tap} up
  done
  ip tuntap add dev ${WAN} mode tap
  ip link set dev ${WAN} master ${BRIDGE}
  ip link set dev ${WAN} up
  # ip addr add ${LAN_IP} dev ${LAN}
  # ip addr add ${GUEST_IP} dev ${GUEST}
  # ip addr add ${GUEST2_IP} dev ${GUEST2}
  EOF
  chmod +x lede_up.sh
  sudo ./lede_up.sh

Now we use the above network for the LEDE firewall:

.. code-block:: bash
  :emphasize-lines: 1,10,18,20

  # LEDE network created above
  LAN=lede-tap0
  WAN=lede-tap1

  STORAGE=/media/$USER/STORAGE
  VMS=${STORAGE}/vm
  RELEASE=17.01.4
  EXT4=${VMS}/lede-${RELEASE}-armvirt-root.ext4
  ZIMAGE=${VMS}/lede-${RELEASE}-armvirt-zImage
  sudo qemu-system-arm \
       -nographic \
       -M virt \
       -m 64 \
       -kernel ${ZIMAGE} \
       -drive file=${EXT4},format=raw,if=virtio \
       -append 'root=/dev/vda rootwait' \
       -device virtio-net-pci,netdev=lan \
       -netdev tap,id=lan,ifname=$LAN,script=no,downscript=no \
       -device virtio-net,netdev=wan \
       -netdev tap,id=wan,ifname=$WAN,script=no,downscript=no

  ping lede-project.org
  ping6 lede-project.org
  wget -O /dev/null http://www.example.com/
  wget -6 -O /dev/null http://www.example.com/

Tearing down the network involves:

.. code-block:: bash
  :emphasize-lines: 1,21

  # Tear down the LEDE network
  cat > lede_down.sh <<'EOF'
  #!/usr/bin/env bash

  BRIDGE=br0
  DEV=enp5s0
  # Create guest networking
  LEDE_BRIDGE=lede-br0
  LAN=lede-tap0
  WAN=lede-tap1
  GUEST=lede-tap2
  GUEST2=lede-tap3
  for tap in ${LAN} ${GUEST} ${GUEST2} ${WAN}; do
    ip tuntap del dev ${tap} mode tap
  done
  ip link del dev ${LEDE_BRIDGE}
  EOF
  chmod +x lede_down.sh
  sudo ./lede_down.sh

  # Remove br0
  cat > br_down.sh <<'EOF'
  #!/usr/bin/env bash

  BRIDGE=br0
  DEV=enp5s0
  # Delete bridge and slave eth i/f
  dhclient -r ${BRIDGE}
  ip link set dev ${DEV} nomaster
  ip link delete dev ${BRIDGE} type bridge
  # NetworkManager manage DEV
  nmcli device set $DEV managed yes
  EOF
  chmod +x br_down.sh
  sudo ./br_down.sh


Initial configuration
^^^^^^^^^^^^^^^^^^^^^

What's missing from the configuration? No root password or ssh keys enforced, no external access to firewall, no HTTPS configured, no IPv6 on internal network, ... . We fix a few of them here: 

.. code-block:: bash
  :emphasize-lines: 1,4,9,15,24

  # Set root password
  passwd

  # If host local network collides with 192.168.1.0/24
  uci set network.lan.ipaddr='192.168.200.1'
  uci commit network
  reload_config

  # Replace internal VM switch with external switch
  uci get network.lan.type
  uci delete network.lan.type
  uci commit network
  reload_config

  # Configure dhcp
  uci show dhcp
  # dhcp.@dnsmasq[0].rebind_protection='0'
  uci set dhcp.@dnsmasq[0].local='/bitbender.org/'
  uci set dhcp.@dnsmasq[0].domain='bitbender.org'
  uci set dhcp.wan.hostname='lede'
  uci commit network
  reload_config

  # Setup HTTPS web interface
  opkg update
  opkg install luci-ssl
  service uhttpd restart
  netstat -tanl | grep 443
  wget -O /dev/null https://lede
  wget -6 -O /dev/null https://localhost


Firewall and IPv6 inadequacies
==============================


Firewalls trying to hide complexity
-----------------------------------


Friendly web and CLI interfaces
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Firewalls try to make configuration easy for users. EdgeRouter products configure EdgeOS though its CLI and web interfaces, while LEDE is configured using the `UCI CLI <https://lede-project.org/docs/guide-developer/uci-defaults>`_ or web-based `LuCI <https://lede-project.org/docs/guide-quick-start/webadmingui>`_. The idea is to hide the implementation details. Then several comparatively high level statements can be used to configure several services and the user need not know about the service details.


Example of hiding ISP DHCP configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

An example is ERLite-3 configuration of the DHCP client: the DHCP4 client is implemented by the `ISC DHCP <https://www.isc.org/downloads/dhcp/>`_ ``dhclient``, while DHCPv6 client is handled by WIDE-DHCP6 ``dhcp6c``. Similarly, for LEDE: DHCP4 client is implemented by ``udhcpc`` (part of BusyBox), while DHCPv6 client is handled by ``odhcpc6c`` (an OpenWrt package). Having the user choose and configure these packages would be more difficult.

Nothing in the configuration of the ERLite-3 or LEDE firewalls would hint at the actual packages involved in getting IPv4 and IPv6 addresses from their ISP.


But where's the documentation? Where are the examples?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The weak point in all this is that two referenced firewall's documentation is not complete nor does it have extensive examples. Contrast that with the Red Hat Linux documentation.

In particularly difficult cases the user must use forums and Internet searching to solve their problem. It can be very frustrating to not know the list of configuration options or their meaning.


What if you're forced to dig beneath the friendly layer?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For example, ERLite-3's use of :program:`dnsmasq` involves pass-thru commands like this:

.. code-block:: text
  :emphasize-lines: 1

  set service dns forwarding options 'dhcp-range=set:eth2v6,::,constructor:eth2,ra-stateless,ra-names,12h'

The quoted text is actually a :program:`dnsmasq` configuration option. So much for hiding the underlying application.

Right now this author is struggling to configure passing an ISP's prefix delegations to internal subnets. Configuration documentation is lacking, as are examples. Given how long IPv6 has been around, it's amazing the lack of comprehensive documentation and examples. That forces the author to learn the underlying packages and try to guess how the friendly interface can be manipulated to get the underlying configuration files configured to hand out prefix delegations.

And after the prefix delegation problem gets solved, how do the routing tables get updated to reflect the new prefix delegation? Or does the firewall do that automatically?


IPv6 standard inadequacies
--------------------------


RFC 3633
^^^^^^^^

And many of the standards are not complete, forcing vendor-specific software or network admins to fill the void. Consider `RFC 3633 14. Relay agent behavior`_:

  If a delegating router communicates with a requesting router through a relay agent, the delegating router may need a protocol or other out-of-band communication to add routing information for delegated prefixes into the provider edge router.

"out-of-band communication to add routing information" means routing changes are not handled by DHCP. That means that as prefix delegations are provided throughout the network, the routing information must be update accordingly.

While IPv6 can use SLAAC to pick up addresses, how does IPv6 prefix distribution get the ISP-allocated address ranges to hosts throughout the network? And how are the routing tables updated?


`Route Problem at Relay during DHCPv6 Prefix Delegation draft-petrescu-relay-route-pd-problem-00.txt <https://tools.ietf.org/html/draft-petrescu-relay-route-pd-problem-00>`_
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From `Route Problem at Relay during DHCPv6 Prefix Delegation draft-petrescu-relay-route-pd-problem-00.txt <https://tools.ietf.org/html/draft-petrescu-relay-route-pd-problem-00>`_:

  In practice, some topologies may accommodate easily the deployment of Prefix Delegation, yet other topologies may pose problems with respect to PD.  A topology where the Requesting Router is a neighbor to the Delegating Router, and the Requesting Router's default route is the Delegating Router, may easily accommodate the Prefix Delegation operation (in this case too, the delegating router needs the operation of route set-up for network reachability).

  .. code-block:: text

    .                         /----------\
                              | Internet |
                              \----------/
                                    |
                              +------------+
                              | Delegating |
                              |   Router   |
                              +------------+
                                    |
                              +------------+
                              | Requesting |
                              |   Router   |
                              +------------+
                                   |            +--------+
                                   \------------| Host PC|
                                                +--------+



  On another hand, a topology where the Requesting Router is not an immediate IP neighbor to the Delegating Router, and/or RR's default route is not the DR, the operation of allocating a prefix must necessarily involve an operation of route set up.  This topology is illustrated below.

  .. code-block:: text

    .                        /----------\
                             | Internet |
                             \----------/
                                   |
                                   |         +------------+
                                  ...--------| Delegating |
                                   |         |   Router   |
                                   |         +------------+
                                   |
                            +------------+
                            | DHCP Relay |
                            +------------+
                                   |
                            +------------+
                            | Requesting |
                            |   Router   |
                            +------------+
                                   |            +--------+
                                   \------------| Host PC|
                                                +--------+

Here is the problem from the ISP's perspective:

  .. code-block:: text

    .             +------+------+  DHCPv6 Server
                  |    DHCPv6   |
                  |    Server   |
                  |             |
                  +------+------+
                         |
                _________|_________
               /                   \
              |  ISP Core Network   |
               \___________________/
                         |  Network-facing interface
                         |
                  +------+------+
                  |   Provider  |
                  |     Edge    |  DHCPv6 Relay Agent, DHCPv6 Requestor
                  |    Router   |
                  +------+------+
                         |  Customer-facing interface
                _________|_________
               /                   \
              |   Access Network    |
               \___________________/
                         |
                         |
                  +------+------+
                  |   Customer  |  DHCPv6 Client
                  |     Edge    |  DHCPv6-PD Requesting Router
                  |    Router   |
                  +------+------+
                         |
                _________|_________
               /                   \
              |  Customer Network   |
               \___________________/


Perimeter firewall addressing
=============================

We'll take the example of a perimeter ERLite-3 firewall (connected to the ISP) with a LEDE (OpenWrt) firewall somewhere on an internal network. How do the firewalls get their IPv6 address and participate in allocating the ISP's /56 prefix distribution?


External interface address
--------------------------


``dhclient`` (ISC DHCP) for DHCPv4, ``dhcp6c`` (WIDE-DHCPv6) for DHCPv6
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ERLite-3 firewall get's each of ``eth0``, ``eth1``, and ``eth2``'s IPv6 address from the following configurations.

Here is ``eth0`` configuration:

.. code-block:: text
  :emphasize-lines: 1,7-8
  :caption: ``eth0`` configuration for DHCP

  set interfaces ethernet eth0 address dhcp
  set interfaces ethernet eth0 description Internet
  set interfaces ethernet eth0 dhcp-options default-route update
  set interfaces ethernet eth0 dhcp-options default-route-distance 210
  set interfaces ethernet eth0 dhcp-options name-server no-update
  set interfaces ethernet eth0 duplex auto
  set interfaces ethernet eth0 ipv6 address autoconf
  set interfaces ethernet eth0 ipv6 dup-addr-detect-transmits 1
  set interfaces ethernet eth0 mac '00:11:22:33:44:55'
  set interfaces ethernet eth0 speed auto

``eth0`` configuration results in:

.. code-block:: text
  :emphasize-lines: 1,4,6
  :caption: ``ip addr show dev eth0``

  ubnt@fw:~$ ip addr show dev eth0
  2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default 
      link/ether 00:11:22:33:44:55 brd ff:ff:ff:ff:ff:ff
      inet 172.250.252.135/19 brd 255.255.255.255 scope global eth0
         valid_lft forever preferred_lft forever
      inet6 2605:e000:9fc0:e:2440:b0b2:69eb:ba0b/128 scope global 
         valid_lft forever preferred_lft forever
      inet6 fe80::224:54ff:fe57:8e55/64 scope link 
         valid_lft forever preferred_lft forever

DHCP IPv4 uses ``dhclient``, IPv6 uses ``dhcp6c``:

.. code-block:: console
  :emphasize-lines: 2-3
  :caption: DHCP clients``dhclient`` & ``dhcp6c``

  ubnt@fw:~$ ps -ef | grep dh
  root      3886     1  0 Oct16 ?        00:00:00 /usr/sbin/dhcp6c -c /var/run/dhcp6c-eth0-pd.conf -p /var/run/dhcp6c-eth0-pd.pid -df eth0
  root      4086     1  0 Oct16 ?        00:00:00 /sbin/dhclient -q -nw -cf /var/run/dhclient_eth0.conf -pf /var/run/dhclient_eth0.pid -lf /var/run/dhclient_eth0.leases eth0

``dhclient``
  IPv4 uses the `ISC DHCP <https://www.isc.org/downloads/dhcp/>`_ client configured via :file:`/var/run/dhclient_eth0.conf` (see `dhclient.conf <https://www.isc.org/wp-content/uploads/2017/08/dhcp41clientconf.html>`_):

.. code-block:: text
  :emphasize-lines: 7-8
  :caption: /var/run/dhclient_eth0.conf

  #
  # autogenerated by vyatta-interfaces.pl on Mon Oct 16 20:27:29 UTC 2017
  #
  option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;

  interface "eth0" {
          send host-name "fw";
          request subnet-mask, broadcast-address, routers, domain-name-servers, interface-mtu;
  }

``dhcp6c``
  IPv6 uses the `WIDE-DHCPv6 <https://github.com/jinmei/wide-dhcpv6>`_ client configured via :file:`/var/run/dhcp6c-eth0-pd.conf` (see `jinmei/wide-dhcpv6 <https://github.com/jinmei/wide-dhcpv6/blob/master/dhcp6c.conf.sample>`_):

.. code-block:: text
  :emphasize-lines: 1-2,5-6,9,11-13,18,23
  :name: dhcp6c.conf
  :caption: /var/run/dhcp6c-eth0-pd.conf

  interface eth0 {
          send ia-na 0;
          request domain-name-servers, domain-name;
          send rapid-commit;
          send ia-pd 0;
          script "/opt/vyatta/sbin/ubnt-dhcp6c-script";
  };

  id-assoc na 0 {};

  id-assoc pd 0 {
          prefix ::/56 infinity;
          prefix-interface eth1 {
                  sla-id 0;
                  sla-len 8;
                  ifid 1;
          };
          prefix-interface eth2 {
                  sla-id 1;
                  sla-len 8;
                  ifid 1;
          };
          prefix-interface eth2.3 {
                  sla-id 2;
                  sla-len 8;
                  ifid 1;
          };
  };


``dhcpv6c`` hook ``dhcpv6-pd-response.pl``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

There's a lot going on in the :ref:`dhcp6c.conf` file. The wan interface uses DHCPv6 (not SLAAC) and requests both an IA_NA (Identity Association for Non-temporary Address (IA_NA)) and IA_PD ("Identity Association for Prefix Delegation (IA_PD)). First **id-na** is .

The IA_NA is the wan IPv6 address and the configuration is as follows:

.. code-block:: text
  :emphasize-lines: 1

  # Request a stateful DHCPv6 address along with DNS server list and domain name
  { send ia-na 0;  request domain-name-servers, domain-name; }
  id-assoc na 0 {};


Request a /56 prefix delegation.

.. code-block:: text
  :emphasize-lines: 1

  { send ia-pd 0; }
  id-assoc pd 0 { prefix ::/56 infinity; ... }

And finally a hook :program:`/opt/vyatta/sbin/ubnt-dhcp6c-script` that calls :program:`/opt/vyatta/sbin/dhcpv6-pd-response.pl` which processes the information received from WIDE-DHCPv6:

* Internal DNS

  Create :file:`/etc/pd-resolv-INTERFACE.conf` and possibly update :file:`/etc/resolv.conf`.

* Internal DHCPv6

  Create/update :file:`/var/run/dhcpv6-INTERFACE-pd.conf` files for each interface. For DHCPv6, :program:`start_dhcpv6_daemon` (in Perl module :program:`/opt/vyatta/share/perl5/Vyatta/DhcpPd.pm`) tries to run ``/usr/sbin/dhcpd3`` (vyos-modified  `vyos/vyatta-dhcp3 <https://github.com/vyos/vyatta-dhcp3>`_) as a daemon, which will fail when running ``dnsmasq`` for DHCPv6.  

* Internal Router Advertisements

  Create the :file:`/var/un/pd-radvd-INTERFACE.conf` file to update :file:`/etc/radvd.conf` and possibly restart ``radvd``.


Prefix delegation and addressing non-wan interfaces
---------------------------------------------------


Prefix delegation
^^^^^^^^^^^^^^^^^

The prior section ended with the WIDE-DHCP6 (``dhcp6c``) configuration file :ref:`dhcp6c.conf` implementing some of the following ERLite-3 configuration lines:

.. code-block:: bash
  :emphasize-lines: 2-3,5-6,8-10
  :caption: ERLite-3 prefix delegation configuration

  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 host-address '::1'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 prefix-id ':0'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 service dhcpv6-stateless
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 host-address '::1'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 prefix-id ':1'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 service dhcpv6-stateless
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2.3 host-address '::1'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2.3 prefix-id ':2'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2.3 service dhcpv6-stateless
  set interfaces ethernet eth0 dhcpv6-pd pd 0 prefix-length 56
  set interfaces ethernet eth0 dhcpv6-pd rapid-commit enable

``dhcp6c`` requests the prefix delegations but does not do the IP address assignments: neither the ``host-address '::1'`` above nor the handing out of the IPv6 addresses from the prefixes. Again, the hook :program:`ubnt-dhcp6c-script` funnels the WIDE-DHCP6 data to scripts that set up dhcpv6_stateless and dhcpv6_stateful configuration.


``radvd``
^^^^^^^^^

Here is the resulting :program:`radvd` configuration file:

.. code-block:: text
  :emphasize-lines: 1,5,8-10,12-13,16,20,23-25,27-28,31,35,38-40,42-43
  :caption: :file:`/etc/radvd.conf`

  interface eth1 {
  #   This section was automatically generated by the Vyatta
  #   configuration sub-system.  Do not edit it.
  #
  #   service type [dhcpv6-stateless]
  #
      IgnoreIfMissing on;
      AdvSendAdvert on;
      AdvManagedFlag off;
      AdvOtherConfigFlag on;
      prefix ::/64 {
            AdvOnLink on;
            AdvAutonomous on;
      };
  };
  interface eth2.3 {
  #   This section was automatically generated by the Vyatta
  #   configuration sub-system.  Do not edit it.
  #
  #   service type [dhcpv6-stateless]
  #
      IgnoreIfMissing on;
      AdvSendAdvert on;
      AdvManagedFlag off;
      AdvOtherConfigFlag on;
      prefix ::/64 {
            AdvOnLink on;
            AdvAutonomous on;
      };
  };
  interface eth2 {
  #   This section was automatically generated by the Vyatta
  #   configuration sub-system.  Do not edit it.
  #
  #   service type [dhcpv6-stateless]
  #
      IgnoreIfMissing on;
      AdvSendAdvert on;
      AdvManagedFlag off;
      AdvOtherConfigFlag on;
      prefix ::/64 {
            AdvOnLink on;
            AdvAutonomous on;
      };
  };

For more information on :program:`radvd`, see `Linux IPv6 Router Advertisement Daemon (radvd) <http://www.litech.org/radvd/>`_ and `reubenhwk/radvd <https://github.com/reubenhwk/radvd>`_.


Internal firewall addressing
============================


External interface address
--------------------------

The LEDE 17.01.4 firewall configures the ``eth1`` (wan) and ``eth0`` (lan) interface addresses like this:

.. code-block:: console
  :emphasize-lines: 1,16-

  root@LEDE:/# uci show network
  network.loopback=interface
  network.loopback.ifname='lo'
  network.loopback.proto='static'
  network.loopback.ipaddr='127.0.0.1'
  network.loopback.netmask='255.0.0.0'
  network.globals=globals
  network.globals.ula_prefix='fd29:4dc4:ebc1::/48'
  network.lan=interface
  network.lan.ifname='eth0'
  network.lan.proto='static'
  network.lan.netmask='255.255.255.0'
  network.lan.ip6assign='60'
  network.lan.ipaddr='192.168.200.1'
  network.wan=interface
  network.wan.ifname='eth1'
  network.wan.proto='dhcp'
  network.wan6=interface
  network.wan6.ifname='eth1'
  network.wan6.proto='dhcpv6'

The key wan(6) configuration lines are:

network.wan.proto='dhcp'
  ``udhcpc`` assigns address and netmask by DHCP

network.wan6.proto='dhcpv6'
  ``odhcpc6c`` obtains address and netmask by DHCP6

Here are the addressing related processes:

.. code-block:: console
  :emphasize-lines: 1-

  root@LEDE:/# ps -w
    858 root      1028 S    udhcpc -p /var/run/udhcpc-eth1.pid -s /lib/netifd/dhcp.script -f -t 0 -i eth1 -C -O 121
    860 root       796 S    odhcp6c -s /lib/netifd/dhcpv6.script -P0 -t120 eth1
   3581 dnsmasq    864 S    /usr/sbin/dnsmasq -C /var/etc/dnsmasq.conf.cfg02411c -k -x /var/run/dnsmasq/dnsmasq.cfg02411c.pid


``udhcpc`` is the wan IPv4 DHCP client. It's actually BusyBox. See `udhcpc <https://en.wikipedia.org/wiki/Udhcpc>`_.

``odhcp6c`` is the wan IPv6 DHCPv6 client. It's actually an embedded system DHCPv6 client. See `openwrt/odhcp6c <https://github.com/openwrt/odhcp6c>`_.

``dnsmasq`` is the lan DHCP server.
