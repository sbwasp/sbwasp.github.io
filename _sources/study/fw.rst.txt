.. include:: /pentest_links.txt

.. _firewalls:

***********************
Firewalls
***********************



ERLite-3 firewall
=================


IPv6 `dnsmasq`_, SLAAC, and stateless DHCPv6
--------------------------------------------

Want to implement IPv6? Here the `Ubiquiti EdgeRouter Lite <https://www.ubnt.com/edgemax/edgerouter-lite/>`_ firewall is configured to accept a /56 IPv6 `Prefix delegation`_ from Spectrum Internet and distribute the addresses across 2 internal networks using SLAAC. `dnsmasq`_ (a caching DNS/DHCP server) is configured to provide DHCPv6 options via stateless DHCPv6. From a client perspective, IPv6-capable clients automatically get IPv6 addresses via SLAAC, and get DNS/NTP server options from stateless DHCPv6 via dnsmasq.


Firewall overview
-----------------

ERLite-3 firewall
^^^^^^^^^^^^^^^^^

The ERL3 runs `EdgeOS <https://dl.ubnt.com/guides/edgemax/EdgeOS_UG.pdf>`_ which supports Cavium Octeon and MIPs chips. Both EdgeOS and `VyOS <https://wiki.vyos.net/wiki/Main_Page>`_ were forked from `Vyatta <https://wiki.vyos.net/wiki/Vyatta>`_. The OS is currently based on Debian 7 (Wheezy) running a Linux 3.x kernel. The current Debian release is Debian 9 (Stretch) with Linux kernel 4.9.

For more information consult the `EdgeMAX Help Center <https://help.ubnt.com/hc/en-us/categories/200321064-EdgeMAX>`_, `Ubiquiti EdgeRouter Lite Setup Part 1: The Basics <http://www.forshee.me/2016/03/01/ubiquiti-edgerouter-lite-setup-part-1-the-basics.html>`_  (a 6-part series, especially the Key-Based SSH Login instructions), and `My Home Router â€“ EdgeRouter Lite <https://networkjutsu.com/my-home-router-edgerouter-lite/>`_ (another multi-part series).

The command line has 2 modes: normal mode ("$" prompt) and configuration mode ("#" prompt), entered via the ``configure`` command and exited via the ``exit`` command.

There are 2 versions of the configuration: running and boot. After ``configure`` and typing in some configuration commands, the configuration changes can be saved to the running configuration via ``commit`` (or ``discard`` to not save). To make those changes persist after boot issue the ``save`` command.


Zone vs interface-based firewall
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Our example will be a zone-based firewall and we explain the difference with the more popular interface-based firewall rulesets.

EdgeOS supports both the traditional per-interface (ACL-based in EdgeOS documentation) and zone-based firewalls. See `Per Interface vs. Zone Based Firewall <https://www.nnbfn.net/2011/06/per-interface-vs-zone-based-firewall/>`_. The EdgeOS GUI only supports per-interface firewall, and thus most organizations use per-interface. However, there are some configuration options that are only available via the CLI. In many cases the CLI can be used alongside the GUI, but in the case of zones only the CLI can be used for configuration.

To make clear the difference, if you have 3 interfaces eth0, eth1, and eth2 then you have 4 zones: WAN (eth0), LAN (eth1), GUEST (eth2) (or call it DMZ or WIFI or ...), and LOCAL (the firewall itself). For each pair, say WAN=>GUEST, 2 rulesets (IPv4 and IPv6) are created for the allowed traffic from the WAN zone to the GUEST zone. This makes it very easy to determine the traffic permitted between zones. The ERL has 2x4x3 = 24 zone rulesets.

In contrast, an interface-based firewall has 4 rulesets per interface, actually 2 IPv4 and 2 IPv6. Take the WAN interface, then 1 ruleset WAN_LOCAL lists the traffic allowed from the WAN to the firewall itself. The ruleset WAN_IN lists the traffic allowed from the WAN to the other interfaces (LAN and GUEST). That means 2x2x3 = 12 rulesets. It's a little harder to determine what traffic goes from WAN=>LAN as the WAN_IN ruleset lists both WAN=>LAN and WAN=>GUEST traffic.


Firewall backup
^^^^^^^^^^^^^^^

While it's best to save the configuration, you can also save the commands required to create that configuration. Having the commands makes it easier to explore modification (and learning) of the EdgeOS configuration. Here's the backup for both the configuration (which can be restored) and the commands (which can be re-executed).

.. code-block:: bash
  :emphasize-lines: 4-5

  # /config/user-data persists between boots
  CONFIG=`date +%Y%m%d%H%M`-firewall-config.eos
  COMMANDS=${CONFIG/config/commands}
  show configuration all > /config/user-data/$CONFIG
  show configuration commands > /config/user-data/$COMMANDS
  ## To load a saved config:
  # configure
  # load /config/user-data/$CONFIG

The backups can easily be ``scp`` copied to/from another host.


Firewall rulesets
-----------------

ISP prefix delegation
^^^^^^^^^^^^^^^^^^^^^

We'll start with commands for ISP prefix delegation (the heart of IPv6 address allocation).

`RFC 3633`_ IPv6 Prefix Options for Dynamic Host Configuration Protocol (DHCP) version 6 defines a mechanism by which `DHCPv6 <https://en.wikipedia.org/wiki/DHCPv6>`_ can be used to delegate a network address prefix to a network. This is known as `prefix delegation <https://en.wikipedia.org/wiki/Prefix_delegation>`_. The router can then assign addresses to clients within the network using either DHCPv6 or `stateless address autoconfiguraton <https://en.wikipedia.org/wiki/IPv6_address#Stateless_address_autoconfiguration>`_ (SLAAC). With SLAAC the router advertises a prefix to clients, and clients pick their own address within that network. This example will use SLAAC.

.. code-block:: text
  :emphasize-lines: 4-5,7-8,10-11,15,17,20-22,24-26

  # Configure all interfaces for IPv6 automatic configuration.
  # Use only 1 NS (neighbor solicitation) message for DAD (duplicate address detection).

  set interfaces ethernet eth0 ipv6 address autoconf
  set interfaces ethernet eth0 ipv6 dup-addr-detect-transmits 1

  set interfaces ethernet eth1 ipv6 address autoconf
  set interfaces ethernet eth1 ipv6 dup-addr-detect-transmits 1

  set interfaces ethernet eth2 ipv6 address autoconf
  set interfaces ethernet eth2 ipv6 dup-addr-detect-transmits 1


  # Use SLAAC with /56 PD (prefix delegation) on eth0
  set interfaces ethernet eth0 dhcpv6-pd pd 0 prefix-length 56
  # DHCPv6 option 14 = Rapid Commit (DHCPv6 client uses a 2 message exchange, not 4).
  set interfaces ethernet eth0 dhcpv6-pd rapid-commit enable

  # For eth1, eth2: create subnet, give i/f the '::1' address, turn on SLAAC.
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 prefix-id ':0'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 host-address '::1'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 service slaac

  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 prefix-id ':1'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 host-address '::1'
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 service slaac


Firewall DNS & IPv4 DHCP
^^^^^^^^^^^^^^^^^^^^^^^^

`ISC DHCP <https://www.isc.org/downloads/dhcp/>`_ is the default DHCP server with `dnsmasq`_ being a relatively new alternative. (See `EdgeRouter - Using dnsmasq for DHCP Server <https://help.ubnt.com/hc/en-us/articles/115002673188-EdgeRouter-Using-dnsmasq-for-DHCP-Server>`_.) dnsmasq combines both caching DNS and DHCP allowing DHCP client names to appear in DNS.


ISC DHCP IPv4
"""""""""""""

Here's the configuration for ISC DHCP:

.. code-block:: text
  :emphasize-lines: 2-3,5-7,10,13-14,16-20,22-23,26-28,31,33,36-45,48-55

  # Set hostname and domain for firewall
  set system host-name fw
  set system domain-name bitbender.org
  # Make lookup of firewall's address return the one on the client's interface.
  set service dns forwarding options localise-queries
  set system ip override-hostname-ip 192.168.1.1
  set system static-host-mapping host-name fw inet 192.168.2.1

  # DNSMASQ not enabled by default (ISC DHCPD default, but doesn't update DNS)
  set service dhcp-server use-dnsmasq disable

  # Set system name-server to itself, which will cache and forward to list below
  set system name-server 127.0.0.1
  set system name-server ::1
  # Forwarding for system name-server (it's a caching server so needs real DNS)
  set service dns forwarding name-server 8.8.8.8
  set service dns forwarding name-server 8.8.4.4
  set service dns forwarding name-server '2001:4860:4860::8888'
  set service dns forwarding name-server '2001:4860:4860::8844'
  set service dns forwarding cache-size 400
  # DNS listen on eth1 & eth2 (forwarded to localhost, then list above)
  set service dns forwarding listen-on eth1
  set service dns forwarding listen-on eth2

  # Get IP, default route, but not DNS from ISP
  set interfaces ethernet eth0 dhcp-options default-route update
  set interfaces ethernet eth0 dhcp-options default-route-distance 210
  set interfaces ethernet eth0 dhcp-options name-server no-update

  # ISC DHCP not disabled
  set service dhcp-server disabled false
  # DHCP server updates /etc/hosts for client leases.
  set service dhcp-server hostfile-update enable

  # GUEST DHCP configuration (unifi-controller is DHCP option 43 to locate unifi controller)
  set service dhcp-server shared-network-name GUEST authoritative enable
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 default-router 192.168.2.1
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 dns-server 192.168.2.1
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 ntp-server 192.168.2.1
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 domain-name bitbender.org
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 lease 86400
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 start 192.168.2.38 stop 192.168.2.243
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 static-mapping ubiquiti ip-address 192.168.2.2
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 static-mapping ubiquiti mac-address '44:d9:e7:f6:48:f2'
  set service dhcp-server shared-network-name GUEST subnet 192.168.2.0/24 unifi-controller 192.168.1.29

  # LAN DHCP configuration (unifi-controller is DHCP option 43 to locate unifi controller)
  set service dhcp-server shared-network-name LAN authoritative enable
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 default-router 192.168.1.1
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 dns-server 192.168.1.1
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 ntp-server 192.168.1.1
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 domain-name bitbender.org
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 lease 86400
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 start 192.168.1.101 stop 192.168.1.200
  set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 unifi-controller 192.168.1.29


dnsmasq DHCP IPv4
"""""""""""""""""

`dnsmasq`_ combines both DHCP and DNS for IPv4 & IPv6 in a single daemon that registers DHCP leases in DNS. You'll be lost without the `dnsmasq manpage`_ and the commands ``dnsmasq --help dhcp`` & ``dnsmasq --help dhcp6`` listing the availble DHCP options.

Each time you make a dnsmasq configuration change you must remember to restart dnsmasq:

.. code-block:: bash

  sudo service dnsmasq force-reload

To change the above ISC DHCP configuration to use `dnsmasq`_ requires these changes:

.. code-block:: text
  :emphasize-lines: 2-3,6,8-9,11,13,15,17,19-20,22,24,27-31,33-35,37,39,41-42,45,48,53-56,59-62

  # Remove the existing DHCP configuration (and more).
  delete service dns forwarding
  delete service dhcp-server

  # Disable ISC DHCP
  set service dhcp-server disabled true
  # These options are strangely enough disable
  set service dhcp-server use-dnsmasq disable
  set service dhcp-server hostfile-update disable
  # Don't bind to all interfaces, only those specifically identified.
  set service dns forwarding options bind-interfaces
  # Add domain to simple names in /etc/hosts
  set service dns forwarding options expand-hosts
  # Do not forward reverse lookups for private addresses.
  set service dns forwarding options bogus-priv
  # Return DNS lookups matching the interface's IP
  set service dns forwarding options localise-queries
  # Change firewall's IP in /etc/hosts from 127.0.0.1
  set system ip override-hostname-ip 192.168.1.1
  set system static-host-mapping host-name fw inet 192.168.2.1
  # DHCP server is only DHCP on network.
  set service dns forwarding options dhcp-authoritative
  # bitbender.org is the domain.
  set service dns forwarding options domain=bitbender.org

  # dnsmasq is caching server so needs to forward to real DNS.
  set service dns forwarding name-server 8.8.8.8
  set service dns forwarding name-server 8.8.4.4
  set service dns forwarding name-server '2001:4860:4860::8888'
  set service dns forwarding name-server '2001:4860:4860::8844'
  set service dns forwarding cache-size 400
  # DNS listen on eth1 & eth2 (forwarded to localhost, then list above)
  set service dns forwarding listen-on eth1
  set service dns forwarding listen-on eth2
  set service dns forwarding options 'interface=eth1,eth2'
  # DHCP domain name option set to bitbender.org
  set service dns forwarding options 'dhcp-option=option:domain-name,bitbender.org'
  # DNS requests for plain names (without dots) are never forwarded.
  set service dns forwarding options 'domain-needed'
  # Add dns names matching the interface IPv4/v6 addresses.
  set service dns forwarding options 'interface-name=lan.bitbender.org,eth1'
  set service dns forwarding options 'interface-name=guest.bitbender.org,eth2'
  
  # Give unifi AP the second address in subnet
  set service dns forwarding options 'dhcp-host=set:unifi,44:d9:e7:f6:48:f2,ubiquiti,192.168.2.2'

  # DHCP option 43 to specify unifi-controller 
  set service dns forwarding options 'dhcp-option=tag:unifi,43,192.168.1.29'
  # The above replaces the following:
  # set service dhcp-server shared-network-name LAN subnet 192.168.1.0/24 unifi-controller 

  # 192.168.1.0 subnet
  set service dns forwarding options 'dhcp-range=set:eth1,192.168.1.101,192.168.1.200,255.255.255.0,12h'
  set service dns forwarding options 'dhcp-option=tag:eth1,option:dns-server,192.168.1.1'
  set service dns forwarding options 'dhcp-option=tag:eth1,option:ntp-server,192.168.1.1'
  set service dns forwarding options 'dhcp-option=tag:eth1,option:router,192.168.1.1'

  # 192.168.2.0 subnet
  set service dns forwarding options 'dhcp-range=set:eth2,192.168.2.38,192.168.2.243,255.255.255.0,12h'
  set service dns forwarding options 'dhcp-option=tag:eth2,option:dns-server,192.168.2.1'
  set service dns forwarding options 'dhcp-option=tag:eth2,option:ntp-server,192.168.2.1'
  set service dns forwarding options 'dhcp-option=tag:eth2,option:router,192.168.2.1'


dnsmasq DHCP IPv6
"""""""""""""""""

Finally we get to Stateless DHCPv6 using dnsmasq, relying on SLAAC for IPv6 and default gateway settings, with dnsmasq giving the DNS and NTP servers. From `DHCPv6 and RA with dnsmasq <https://weirdfellow.wordpress.com/2014/09/05/dhcpv6-and-ra-with-dnsmasq/>`_, dnsmasq option combination ``ra-names`` means "DNS will try to guess the auto-configured addresses." According to the article Microsoft doesn't follow IEEE EUI-64 so the "ra-names option will have no effect â€“ DNS will not guess correctly the IPv6 address of those machines, so no entry in DNS will be populated." This behaviour can be changed and reverted to IEEE EUI-64 by executing these commands on the Windows client:"

.. code-block:: bat

  netsh interface ipv6 set global randomizeidentifiers=disabled
  netsh advfirewall firewall add rule name="ICMPv4 8" protocol=icmpv4:8,any dir=in action=allow
  netsh advfirewall firewall add rule name="ICMPv6 128" protocol=icmpv6:128,any dir=in action=allow

The additional configuration modifications to enable SLAAC, ra-stateless, and ra-names plus pass on the IPv6 DNS and NTP addresses are:

.. code-block:: text
  :emphasize-lines: 2-3,6-8,10-12

  # dnsmasq provides dhcpv6-stateless (DHCP options only - SLAAC provides address & gateway).
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth1 service dhcpv6-stateless
  set interfaces ethernet eth0 dhcpv6-pd pd 0 interface eth2 service dhcpv6-stateless

  # Turn on ra-stateless providing IPv6 DNS & NTP servers
  set service dns forwarding options 'dhcp-range=set:eth1v6,::,constructor:eth1,ra-stateless,ra-names,12h'
  set service dns forwarding options 'dhcp-option=tag:eth1v6,option6:dns-server,[::]'
  set service dns forwarding options 'dhcp-option=tag:eth1v6,option6:ntp-server,[::]'

  set service dns forwarding options 'dhcp-range=set:eth2v6,::,constructor:eth2,ra-stateless,ra-names,12h'
  set service dns forwarding options 'dhcp-option=tag:eth2v6,option6:dns-server,[::]'
  set service dns forwarding options 'dhcp-option=tag:eth2v6,option6:ntp-server,[::]'

Firewall system configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here are the general configuration options:

.. code-block:: text

  set firewall all-ping enable
  set firewall broadcast-ping disable
  set firewall receive-redirects disable
  set firewall send-redirects enable
  set firewall source-validation disable
  set firewall syn-cookies enable
  set interfaces ethernet eth0 address dhcp
  set interfaces ethernet eth0 description Internet

  set interfaces ethernet eth0 duplex auto
  set interfaces ethernet eth0 mac '00:24:54:57:8e:55'
  set interfaces ethernet eth0 speed auto
  set interfaces ethernet eth1 address 192.168.1.1/24
  set interfaces ethernet eth1 description Local
  set interfaces ethernet eth1 duplex auto
  set interfaces ethernet eth1 speed auto
  set interfaces ethernet eth2 address 192.168.2.1/24
  set interfaces ethernet eth2 description 'Local 2'
  set interfaces ethernet eth2 duplex auto
  set interfaces ethernet eth2 speed auto
  set interfaces loopback lo

  set service gui http-port 80
  set service gui https-port 443
  set service gui older-ciphers disable
  set service nat rule 5010 description 'masquerade for WAN'
  set service nat rule 5010 outbound-interface eth0
  set service nat rule 5010 type masquerade
  set service ssh port 22
  set service ssh protocol-version v2
  set system domain-name bitbender.org
  set system host-name fw
  set system ip override-hostname-ip 192.168.1.1
  set system login banner pre-login '********************************************************************\n*                                                                  *\n* * * *                      bitbender                       * * * *\n* * * *                   WARNING NOTICE:                    * * * *\n*   This system is restricted solely to bitbender authorized       *\n*   users for legitimate business purposes only. The actual or     *\n*   attempted unauthorized access, use, or modification of this    *\n*   system is strictly prohibited by bitbender. Unauthorized       *\n*   users are subject to disciplinary proceedings and/or           *\n*   criminal and civil penalties under state, federal, or other    *\n*   domestic and foreign laws. The use of this system may be       *\n*   monitored and recorded for administrative and security reasons.*\n*   Anyone accessing this system expressly consents to such        *\n*   monitoring and is advised that if monitoring reveals possible  *\n*   evidence of criminal activity, bitbender may provide the       *\n*   evidence of such activity to law enforcement officials. All    *\n*   users must comply with bitbender instructions regarding the    *\n*   protection of bitbender information assets.                    *\n*                                                                  *\n********************************************************************\n'
  set system login user someone authentication encrypted-password '$6$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
  set system login user someone authentication plaintext-password ''
  set system login user someone full-name ''
  set system login user someone level admin

  set system ntp server 0.ubnt.pool.ntp.org
  set system ntp server 1.ubnt.pool.ntp.org
  set system ntp server 2.ubnt.pool.ntp.org
  set system ntp server 3.ubnt.pool.ntp.org
  set system offload hwnat disable
  set system offload ipsec enable
  set system offload ipv4 forwarding enable
  set system offload ipv6 forwarding enable
  set system syslog global facility all level notice
  set system syslog global facility protocols level debug
  set system time-zone UTC
  set system traffic-analysis dpi enable
  set system traffic-analysis export enable


zone configurations
^^^^^^^^^^^^^^^^^^^

Here is boilerplate for applying the zone configurations. Zone ruleset lan-guest-6 is for IPv6 traffic from zone lan to zone guest (with "-6" dropped for IPv4). Each zone is associated with an interface (eth0, eth1, eth2, and local for the firewall itself).

.. code-block:: text
  :emphasize-lines: 1,9,17,25

  set zone-policy zone GUEST default-action drop
  set zone-policy zone GUEST from LAN firewall ipv6-name lan-guest-6
  set zone-policy zone GUEST from LAN firewall name lan-guest
  set zone-policy zone GUEST from WAN firewall ipv6-name wan-guest-6
  set zone-policy zone GUEST from WAN firewall name wan-guest
  set zone-policy zone GUEST from local firewall ipv6-name local-guest-6
  set zone-policy zone GUEST from local firewall name local-guest
  set zone-policy zone GUEST interface eth2
  set zone-policy zone LAN default-action drop
  set zone-policy zone LAN from GUEST firewall ipv6-name guest-lan-6
  set zone-policy zone LAN from GUEST firewall name guest-lan
  set zone-policy zone LAN from WAN firewall ipv6-name wan-lan-6
  set zone-policy zone LAN from WAN firewall name wan-lan
  set zone-policy zone LAN from local firewall ipv6-name local-lan-6
  set zone-policy zone LAN from local firewall name local-lan
  set zone-policy zone LAN interface eth1
  set zone-policy zone WAN default-action drop
  set zone-policy zone WAN from GUEST firewall ipv6-name guest-wan-6
  set zone-policy zone WAN from GUEST firewall name guest-wan
  set zone-policy zone WAN from LAN firewall ipv6-name lan-wan-6
  set zone-policy zone WAN from LAN firewall name lan-wan
  set zone-policy zone WAN from local firewall ipv6-name local-wan-6
  set zone-policy zone WAN from local firewall name local-wan
  set zone-policy zone WAN interface eth0
  set zone-policy zone local default-action drop
  set zone-policy zone local from GUEST firewall ipv6-name guest-local-6
  set zone-policy zone local from GUEST firewall name guest-local
  set zone-policy zone local from LAN firewall ipv6-name lan-local-6
  set zone-policy zone local from LAN firewall name lan-local
  set zone-policy zone local from WAN firewall ipv6-name wan-local-6
  set zone-policy zone local from WAN firewall name wan-local
  set zone-policy zone local local-zone

We're not providing all the firewall rules as they generally differ too much. But as an example, if you wanted to allow all IPv4 traffic in a given zone:

.. code-block:: text

  set firewall name allow-all default-action accept
  set firewall name allow-all description 'IPv4 allow all, drop invalid'
  set firewall name allow-all rule 1 action accept
  set firewall name allow-all rule 1 state established enable
  set firewall name allow-all rule 1 state related enable
  set firewall name allow-all rule 2 action drop
  set firewall name allow-all rule 2 log enable
  set firewall name allow-all rule 2 state invalid enable

Another snippet is to drop traffic except for continuation of already allowed traffic.

.. code-block:: text

  set firewall name allow-est-drop-inv default-action drop
  set firewall name allow-est-drop-inv description 'IPv4 allow established, drop invalid'
  set firewall name allow-est-drop-inv enable-default-log
  set firewall name allow-est-drop-inv rule 1 action accept
  set firewall name allow-est-drop-inv rule 1 state established enable
  set firewall name allow-est-drop-inv rule 1 state related enable
  set firewall name allow-est-drop-inv rule 2 action drop
  set firewall name allow-est-drop-inv rule 2 log enable
  set firewall name allow-est-drop-inv rule 2 state invalid enable
