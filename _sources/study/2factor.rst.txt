.. include:: /pentest_links.txt


***********************
2 Factor Authentication
***********************

Pentesters need security, too.

`FIDO`_ `U2F`_
==============

This started with notice of `Google Launches Security Key, Worldâ€™s First Deployment of Fast Identity Online Universal Second Factor (FIDO U2F) Authentication <https://fidoalliance.org/news/item/google-launches-security-key>`_ announcing Google's `Strengthening 2-Step Verification with Security Key <http://googleonlinesecurity.blogspot.com/2014/10/strengthening-2-step-verification-with.html>`_. Basically, Google's 2-step verification added support for the FIDO (Fast IDentity Online) U2F (Universal 2nd Factor) security keys, a simple USB hardware device. Currently only Google supports FIDO U2F and it requires the Google Chrome browser version 38+. For details consult `FIDO technical specifications <https://fidoalliance.org/specifications/download/>`_; the detailed overview `FIDO U2F Architectural Overview <https://fidoalliance.org/specs/fido-u2f-overview-v1.0-rd-20141008.pdf>`_ is freely quoted below without attribution.

What is a security key?
-----------------------

For actual devices see `Amazon FIDO U2F Security Key search <http://www.amazon.com/s/?field-keywords=%22FIDO%20U2F%20Security%20Key%22>`_.

How was the security key set up?
--------------------------------

A pentest-meetup member purchased 2 `Plug-Up International security keys <http://sk.plug-up.com/>`_ and set up their Google account to use 2 factor authentication. Since a security key is a USB device it cannot support devices like smart phones lacking USB ports, but Google  has multiple choices for `Google account 2-factor authentication <https://www.google.com/landing/2step/features.html>`_ that handle desktops, tablets, and mobile phones.

* Google Chrome 38+ is available via standard packages on Debian Jessie but not Kali, requiring uninstalling the official Kali package and manually downloading and installing the latest Chrome browser from Google.

* The security key works out-of-the-box on Windows but on Linux udev had to be configured to allow normal user access to the usb device. On both Debian Jessie and Kali the file /etc/udev/rules.d/10-security-key.rules was added. The file content for Debian Jessie was *SUBSYSTEMS=="usb", ATTRS{idVendor}=="2581", ATTRS{idProduct}=="f1d0", MODE="0660", GROUP="plugdev"* where plugdev should be the group containing the U2F users. On Kali the file content was *SUBSYSTEMS=="usb", ATTRS{idVendor}=="2581", TAG+='uaccess", TAG+="udev-acl"*. After configuring the file run the command ``sudo udevadm trigger`` and Chrome will be able to access the security key. Running ``dmesg | tail`` should verify the security key USB insertion.

* The target account's Google 2-factor authentication was enabled using these options:

  * Security keys: this option was enabled and the 2 keys were registered.

  * Verification codes: the primary option for verification codes was set up to default to Google Authenticator (for the mobile phone), which was installed and configured on the mobile phone. Two backup options were selected: the mobile phone's number was configured as a backup number, and 10 backup one-use codes were generated in case all the other methods failed.

  * Registered computers: when first logging into Google using the security key, an option is presented to register the computer to avoid further security key use on that computer. All such computers will be listed under registered computers (which starts off as an empty list).

The net effect is that Google login from a desktop computer would ask for the security key, but the mobile phone would default to the Google Authenticator app. If these were not available the backup phone or one of the backup codes could be used to login.

Linux KVM virtual machines were not able to access the security key from Google Chrome, forcing use of a verification code (Google Authenticator in this case).

Note that there is a many-to-many mapping between security keys and accounts; multiple security keys can be used with any one account account, and any one security key can be used with multiple accounts. So the 2 purchased security keys can be backups to each other for all of the user's accounts. The first security key usage on a computer will ask if the computer should be registered to not require the security key in the future.


How does it work?
-----------------

Here is an overview of security key functionality:

  The U2F device and protocol need to guarantee user privacy and security. At the core of the protocol, the U2F device has a capability (ideally, embodied in a secure element) which mints an origin-specific public/private key pair. The U2F device gives the public key and a Key Handle to the origin online service or website during the user registration step.

  Later, when the user performs an authentication, the origin online service or website sends the Key Handle back to the U2F device via the browser. The U2F device uses the Key Handle to identify the user's private key, and creates a signature which is sent back to the origin to verify the presence of the U2F device. Thus, the Key Handle is simply an identifier of a particular key on the U2F device.


What are the shortcomings?
--------------------------

The `FIDO Security Reference <https://fidoalliance.org/specs/fido-security-ref-v1.0-rd-20141008.pdf>`_ provides security details including preventing MITM and phishing attacks. Here we add a couple of points:

* Currently it requires a USB interface, but future implementations will address this issue.

* The security key is a tiny, limited computer with much of the actual hardware & software implementation and crypto algorithms unspecified, allowing potentially weak vendor implementations.

  The actual security key implementations are unknown and unspecified. What crypto algorithms does the key use? What is done in software vs. hardware? Can the firmware/software be updated? (There's no winning answer to that question: yes implies a security risk for malware updating the security key, no implies bugs can't be fixed without buying a new security key.) Can you verify the security key has not been tampered with?

  And since organizations have obtained certificates to impersonate legitimate sites, there exists the distinct possibility of such organizations issuing fake security keys that not only don't provide good security, but actually are attack vectors into the user's computers. Additionally, malware on the computer can freely access the security key when inserted, creating further attack opportunities (though having such malware is itself a "game over" problem).

* Additionally, to allow for cheap devices with fixed, limited storage, the Key Handle issued by a U2F device:

    "can 'store' (i.e., contain) the private key for the origin and the hash of the origin encrypted with a 'wrapping' key known only to the U2F device secure element. When the Key Handle goes back to the secure element it 'unwraps' it to 'retrieve' the private key and the origin that it was generated for.

  So cheap devices can actually hand the encoded private key to authenticating web sites. Done poorly, this provides an attack vector.

* Should a web site want to discriminate between "good" and "bad" security keys, the standard allows the following:

    Every U2F device device has a shared 'Attestation' key pair which is present on it -- this key is shared across a large number of U2F device units made by the same vendor (this is to prevent individual identifiability of the U2F device). Every public key output by the U2F device during the registration step is signed with the attestation private key.

    The intention is that the public keys of all the 'Attestation' key pairs used by each vendor will be available in the public domain -- this could be implemented by certificates chaining to a root public key or literally as a list. We will work within FIDO to decide the details on how certified vendors can publish their attestation public keys.

    When such an infrastructure is available, a particular relying party -- say, a bank -- might choose to accept only U2F devices from certain vendors which have the appropriate published certifications. To enforce this policy, it can verify that the public key from a U2F device presented by the user is from a vendor it trusts.


Will it be near-universally adopted?
------------------------------------

The big question is will it be near-universally adopted with a smart phone implementation? If so, it may strenghten user identification to the pint that the biggest weak point might be social engineering the account recovery process.
