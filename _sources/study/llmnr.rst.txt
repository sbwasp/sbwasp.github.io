.. include:: /pentest_links.txt


*********************************
Windows broadcast name resolution
*********************************


The protocols
=============

NBT-NS
------

From `NetBIOS over TCP/IP <http://en.wikipedia.org/wiki/NetBIOS_over_TCP/IP>`_:

  NetBIOS over TCP/IP (NBT, or sometimes NetBT) is a networking protocol that allows legacy computer applications relying on the NetBIOS API to be used on modern TCP/IP networks.

  NetBIOS was developed in the early 1980s, targeting very small networks (about a dozen computers). Some applications still use NetBIOS, and do not scale well in today's networks of hundreds of computers when NetBIOS is run over NBF. When properly configured, NBT allows those applications to be run on large TCP/IP networks (including the whole Internet, although that is likely to be subject to security problems) without change.

  NBT is defined by the RFC 1001 and RFC 1002 standard documents.

  NetBIOS provides four distinct services:

    * Name service for name registration and resolution (port: 137/udp)
    * Name service for name registration and resolution (port: 137/tcp)
    * Datagram distribution service for connectionless communication (port: 138/udp)
    * Session service for connection-oriented communication (port: 139/tcp)

  ...

  In relation to post-MS Windows 2000 / NT, client-server based networks, NetBIOS is effectively becoming a legacy protocol. NetBIOS was also developed for non-routable LANs. In most post year 2000 networks operating Windows 2000 or later, NetBIOS effectively offers backwards compatibility for network devices that predate compatibility with DNS.

LLMNR
-----

From `Link-Local Multicast Name Resolution <http://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution>`_:

  The Link-Local Multicast Name Resolution (LLMNR) is a protocol based on the Domain Name System (DNS) packet format that allows both IPv4 and IPv6 hosts to perform name resolution for hosts on the same local link. It is included in Windows Vista, Windows Server 2008, Windows 7 and Windows 8. LLMNR is defined in `RFC 4795 <http://tools.ietf.org/html/rfc4795>`_.

  In responding to queries, responders listen on UDP port 5355 on the following link-scope Multicast address:

		IPv4 - 224.0.0.252, MAC address of 01-00-5E-00-00-FC

		IPv6 - FF02:0:0:0:0:0:1:3 (this notation can be abbreviated as FF02::1:3), MAC address of 33-33-00-01-00-03

	The responders also listen on TCP port 5355 on the unicast address that the host uses to respond to queries.

A short but detailed article is `Wikipedia Link-Local Multicast Name Resolution <https://technet.microsoft.com/library/bb878128>`_.

mDNS
----

From `Multicast DNS <http://en.wikipedia.org/wiki/Multicast_DNS>`_:

  The multicast Domain Name System (mDNS) resolves host names to IP addresses within small networks that do not include a local name server. ...

  When an mDNS client needs to resolve a host name, it sends an IP multicast query message that asks the host having that name to identify itself. That target machine then multicasts a message that includes its IP address. All machines in that subnet can then use that information to update their mDNS caches. ...

  By default, mDNS only and exclusively resolves host names ending with the .local top-level domain (TLD).


Rules for resorting to broadcast name resolution vary
=====================================================

Clients can default to local broadcast, but the exact reason and rules can be quite complex and will vary based on configuration and software version. Name resolution policy varies depending on the OS, configuration, and network conditions in effect. For example, Windows 7 & Window Server 2008 R2 and beyond include a Name Resolution Policy Table (NRPT) while earlier Windows versions do not. From `The Name Resolution Policy Table <https://technet.microsoft.com/en-us/magazine/ff394369.aspx>`_:

  In Query Failure, you can enable query failure options and then configure whether to use local name resolution (Link-Local Multicast Name Resolution [LLMNR] and NetBIOS broadcasts) only if the DNS name query response indicates that the name does not exist; to use local name resolution if the name does not exist or the DNS servers are unreachable when located on a network with private IPv4 addresses; or to use local name resolution for any type of name resolution failure or error.

And the behavior of a Windows domain client will differ depending on whether it can reach its configured domain controllers, ... . So specifying a correct and complete set of rules is really difficult and will change over time. The main point is that regardless of the reasons for broadcast name resolution, tools like `Responder`_ can wait for clients to resort to LLMNR, NBT-NS, and mDNS.


WPAD as an example
==================

From `Owning Windows Networks With Responder Part 2 <http://blog.spiderlabs.com/2013/02/owning-windows-network-with-responder-part-2.html>`_:

  How WPAD works:

  WPAD in a corporate Windows environment is used to automatically configure Internet Explorer proxy settings. This functionality is enabled by default on all Windows release since Windows 2000. 

  WPAD setup can be boiled down like this:

  * If no wpad file was specified in a DHCP-INFORM packet (opcode 252), a DNS type A query will be issued for wpad, if DNS fail, then Link-local Multicast Name Resolution (LLMNR) will be used on Windows >= Vista, if it fail again then NetBIOS Name Service (NBT-NS) will be used. 

  * Once the WPAD server is found, the client will initiate an HTTP GET request and retrieve /wpad.dat file which is a javascript like file. This file is meant to contain basic or advanced proxy usage directives. 

  * Once this file is retrieved, Internet Explorer will use the retrieved settings and connect to the proxy server for all HTTP requests. 

Continuing on in the article:

  In this release, responder takes care of Web Proxy Autodiscovery Protocol (WPAD) requests. Responder will answer to WPAD LLMNR, NBT-NS queries and provide a wpad.dat file. The javascript payload used is pretty simple:

      function FindProxyForURL(url, host) { return 'PROXY wpadwpadwpad:3141; DIRECT'; }  

  This function contains the following directives:

  * Use a proxy server for all connections.

  * Responder proxy server is set to wpadwpadwpad:3141

  * If this proxy server fails for whatever reason, then access the website directly.

  Once Internet Explorer retrieves this file, all connections will be redirected to Responder proxy server. It can be noted that no IP address is specified for this proxy but a local name (wpadwpadwpad) and there's a reason for that:

  * We want to have this local name to be queried via LLMNR or NBT-NS, which Responder will resolve.

  * Once this Local Intranet Zone (LIZ) name is resolved, Internet Explorer will connect to Responder and send its NTLM hashes transparently with no password prompt.

  The second trick is to abruptly reset the HTTP connection upon receiving Internet Explorer's last NTLM packet exchange (NTLMSSP_AUTH) which contains the NTLM credentials. This allows us to fake a proxy failure so IE will simply connect directly to the website it requested.

  The cool catch in this is that for each connection IE will try to reuse the proxy even if it failed before. This means that Responder is able to catch the cookies for each web request transparently.
