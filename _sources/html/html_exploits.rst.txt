.. include:: /pentest_links.txt


*************
HTML exploits
*************


Perhaps the biggest threat from stealing cookies is due to the fact that cookies are involved in authentication and authorization. Getting access to such cookies allows accessing web resources as that user.


Clickjacking
============

From `Clickjacking`_:

  A clickjacked page tricks a user into performing undesired actions by clicking on a concealed link. On a clickjacked page, the attackers load another page over it in a transparent layer. The users think that they are clicking visible buttons, while they are actually performing actions on the hidden page. The hidden page may be an authentic page; therefore, the attackers can trick users into performing actions which the users never intended. There is no way of tracing such actions to the attackers later, as the users would have been genuinely authenticated on the hidden page.

For prevention, see `OWASP Clickjacking Defense Cheat Sheet` and `Clickjacking prevention <https://en.wikipedia.org/wiki/Clickjacking#Prevention>`_.

Note that the server side the ``X-Frame-Options`` is deprecated in favor of :ref:`Content_Security_Policy`. From `Clickjacking`_:

.. code-block:: text

  # Disallow embedding. All iframes etc. will be blank, or contain a browser specific error page.
  Content-Security-Policy: frame-ancestors 'none'

  # Allow embedding of [[same-origin policy|own content]] only.
  Content-Security-Policy: frame-ancestors 'self'

  # Allow specific origins to embed this content
  Content-Security-Policy: frame-ancestors example.com wikipedia.org


CSRF
====

`Cross-site request forgery`_ involves two sites: the attacking site has a link or script to a victim site where the user already has been authenticated and/or authorized. From Wikipedia, suppose Alice is already logged into bank.example.com, then visits a chat site with the following posting.

.. code-block:: html

  Mallory: Hello Alice! Look here:

  <img src="http://bank.example.com/withdraw?account=Alice&amount=1000000&for=Mallory">

Note the use of the <img> tag which is often allowed in Internet forums while JavaScript is not allowed. Depending on the configuration of bank.example.com and the browser, if Alice were to click on the "image" her cookies might be used to authenticate the bank transaction.

Another old & real example is `Google YouTube crossdomain security flaw <https://www.youtube.com/watch?v=h6Y0LXsQ8V8>`_. Although the video is a "little" fuzzy, the video starts with 4 browser tabs: (1) google.com not logged in, (2) youtube.com logged into the victim's account, (3) youtube's cross-domain policy showing google.com is allowed, and (4) the attackers site with a link to a SWF file on google.com. When the user clicks on the attackers site to run the video, the user is logged into google.com using the attacker's credentials, runs the video from google.com, the SWF code connects to youtube.com and by policy is allowed to use the victim's credentials. The victim's user id and youtube viewing history are displayed. Finally, the first tab at google.com is refreshed to show that the user was logged in using the attacker's credentials.

The above example illustrates *login CSRF*, where an attacker can login the victim to some sites using the attacker's credentials. Later the attacker can login that same site using their credentials to view the victim's activities.

For more CSRF attack examples see `DEFCON 17: CSRF: Yeah, It Still Works <https://www.youtube.com/watch?v=5Np8PrSctuM>`_.

See `OWASP Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet`_ for CSRF prevention.

XSS
===

`Cross-site scripting`_ is a large topic covered more in greater depth in :ref:`XSS_Tutorial`. For prevention see `OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet`_ (which also recommends using `Content Security Policy`_.

Session hijacking attack
========================

From `Session hijacking attack <https://www.owasp.org/index.php/Session_hijacking_attack>`_:

  The Session Hijacking attack consists of the exploitation of the web session control mechanism, which is normally managed for a session token.

  Because http communication uses many different TCP connections, the web server needs a method to recognize every userâ€™s connections. The most useful method depends on a token that the Web Server sends to the client browser after a successful client authentication. A session token is normally composed of a string of variable width and it could be used in different ways, like in the URL, in the header of the http requisition as a cookie, in other parts of the header of the http request, or yet in the body of the http requisition.

  The Session Hijacking attack compromises the session token by stealing or predicting a valid session token to gain unauthorized access to the Web Server.

  The session token could be compromised in different ways; the most common are::

      Predictable session token;
      Session Sniffing;
      Client-side attacks (XSS, malicious JavaScript Codes, Trojans, etc);
      Man-in-the-middle attack
      Man-in-the-browser attack

