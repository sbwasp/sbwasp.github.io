.. include:: /pentest_links.txt


******************
HTML Web Messaging
******************

`OWASP HTML5 Security Cheat Sheet`_ has security suggestions for HTML web messaging.

XMLHttpRequest2 (XHR2)
======================

Note: for additional changes in XMLHttpRequest2, see `New Tricks in XMLHttpRequest2 <http://www.html5rocks.com/en/tutorials/file/xhr2/>`_.

Recent updates to `XMLHttpRequest`_ have added CORS (`Cross-origin resource sharing`_) support which helps overcome the restrictions of the `Same-origin policy`_. What does this mean?

From `XMLHttpRequest`_:

  XMLHttpRequest (XHR) is an API available to web browser scripting languages such as JavaScript. It is used to send HTTP or HTTPS requests to a web server and load the server response data back into the script.

  For security reasons, XMLHttpRequest requests follow the browser's same-origin policy, and will therefore only succeed if they are made to the host that served the original web page.

  The CORS protocol has several restrictions, with two models of support. The simple model does not allow setting custom request headers and omits cookies. Further, only the GET and POST request methods are supported, and POST only allows the following MIME types: "text/plain", "application/x-www-urlencoded" and "multipart/form-data". Only "text/plain" was initially supported. The other model detects when one of the non-simple features are requested and sends a pre-flight request to the server to negotiate the feature.

The point is that the latest XHR allows using CORS (`Cross-origin resource sharing`_) to circumvent the `Same-origin policy`_. From the `Same-origin policy`_:

  The policy permits scripts running on pages originating from the same site – a combination of scheme, hostname, and port number – to access each other's DOM with no specific restrictions, but prevents access to DOM on different sites. The same-origin policy also applies to XMLHttpRequests unless the server provides an Access-Control-Allow-Origin (CORS) header.

  The same-origin policy restricts which network messages one origin can send to another. For example, the same-origin policy allows inter-origin HTTP requests with GET and POST methods but denies inter-origin PUT and DELETE requests. Additionally, origins can use custom HTTP headers when sending requests to themselves but cannot use custom headers when sending requests to other origins. 

.. _Web_Messaging:

Web Messaging (MessageEvent)
============================

The MessageEvent interface is the foundation of HTML web messaging. From `MessageEvent <https://html.spec.whatwg.org/multipage/comms.html#messageevent>`_:

  event.data
    Returns the data of the message.

  event.origin
    Returns the origin of the message, for server-sent events and cross-document messaging.
      
  event.lastEventId
    Returns the last event ID string, for server-sent events.

  event.source
    Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects.

  event.ports
    Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging.

From `An Introduction to HTML5 Web Messaging <https://dev.opera.com/articles/window-postmessage-messagechannel/>`_:

  Before we get into the nitty-gritty of web messaging, let’s take a look at the message event object. Cross-document messaging, channel messaging, server-sent events and web sockets all fire message events, so understanding it is helpful. Message events, defined by the MessageEvent interface, contain five read-only attributes ...

  In the case of cross-document messaging events and channel messaging, the value of lastEventId is always an empty string; lastEventId applies to server-sent events. If no ports are sent with the message, the value of the ports attribute will be an array whose length is zero.


Server-sent events
==================

This section is based on `Server-sent events <https://html.spec.whatwg.org/multipage/comms.html#server-sent-events>`_. See `HTML5 Server-Sent Events <http://www.w3schools.com/html/html5_serversentevents.asp>`_ for an example.

Server-sent events are one-way messages from the server to the client. Let's suppose a server generates two different event types: add and remove. The actual message is a text/event-stream MIME type::

  event: add
  data: something

  event: remove
  data: somethingelse

The client side would register listeners to receive & process the server-sent events:

.. code-block:: javascript

  var source = new EventSource('updates.cgi');
  source.addEventListener('add', addHandler, false);
  source.addEventListener('remove', removeHandler, false);


Web sockets
===========

For an online WebSockets example see `Python WebSockets Chat Demo <http://flask-chat.herokuapp.com/>`_.

From `Introducing WebSockets: Bringing Sockets to the Web <http://www.html5rocks.com/en/tutorials/websockets/basics/>`_:

  The WebSocket specification defines an API establishing "socket" connections between a web browser and a server. In plain words: There is an persistent connection between the client and the server and both parties can start sending data at any time.

  ...

  Being a modern protocol, cross origin communication is baked right into WebSocket. While you should still make sure only to communicate with clients and servers that you trust, WebSocket enables communication between parties on any domain. The server decides whether to make its service available to all clients or only those that reside on a set of well defined domains.

From `WebSocket`_:

  WebSocket is a protocol providing full-duplex communications channels over a single TCP connection. The WebSocket protocol was standardized by the IETF as RFC 6455 in 2011, and the WebSocket API in Web IDL is being standardized by the W3C.

  WebSocket is designed to be implemented in web browsers and web servers, but it can be used by any client or server application. The WebSocket Protocol is an independent TCP-based protocol. Its only relationship to HTTP is that its handshake is interpreted by HTTP servers as an Upgrade request. The WebSocket protocol makes more interaction between a browser and a web site possible, facilitating live content and the creation of real-time games. This is made possible by providing a standardized way for the server to send content to the browser without being solicited by the client, and allowing for messages to be passed back and forth while keeping the connection open. In this way a two-way (bi-directional) ongoing conversation can take place between a browser and the server.

From `WebSocket`_ the client request looks like:

.. code-block:: http

  GET /chat HTTP/1.1
  Host: server.example.com
  Upgrade: websocket
  Connection: Upgrade
  Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
  Sec-WebSocket-Protocol: chat, superchat
  Sec-WebSocket-Version: 13
  Origin: http://example.com

and the server response would look like:

.. code-block:: http

  HTTP/1.1 101 Switching Protocols
  Upgrade: websocket
  Connection: Upgrade
  Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
  Sec-WebSocket-Protocol: chat

For more details consult `Introducing WebSockets: Bringing Sockets to the Web <http://www.html5rocks.com/en/tutorials/websockets/basics/>`_, `WebSocket.org <https://www.websocket.org/>`_, and `Web sockets <https://html.spec.whatwg.org/multipage/comms.html#network>`_.


Web Messaging
=============

`W3C HTML5 Web Messaging`_ section defines both cross-document messaging and channel messaging. WHATWG skips web messaging and separately defines `Cross-document messaging <https://html.spec.whatwg.org/multipage/comms.html#web-messaging>`_ and `Channel messaging <https://html.spec.whatwg.org/multipage/comms.html#channel-messaging>`_. Wikipedia equates web messaging with cross-document messaging and does not cover channel messaging.

The difference for sending messages is that cross-document messaging uses ``window.postMessage()`` while channel messaging use a MessageChannel via ``channel.port1.postMessage()``


Cross-document messaging
------------------------

See `CODEPEN's Receiver Window <http://codepen.io/matt-west/pen/lpExI>`_ (or `Receiver Window <http://codepen.io/matt-west/full/lpExI>`_ without the code) for an example of cross-document messaging.

 So `Web Messaging`_ is the WHATWG `Cross-document messaging <https://html.spec.whatwg.org/multipage/comms.html#web-messaging>`_ and `W3C Cross-document messaging`_. From `Web Messaging`_ (relating to cross-document messaging):

  Web Messaging or cross-document messaging, is an API introduced in the WHATWG HTML5 draft specification, allowing documents to communicate with one another across different origins, or source domains. Prior to HTML5, web browsers disallowed cross-site scripting, to protect against security attacks. This practice barred communication between non-hostile pages as well, making document interaction of any kind difficult. Cross-document messaging allows scripts to interact across these boundaries, while providing a rudimentary level of security.

The example from `Web Messaging`_:

  Consider we want document A located on example.net to communicate with document B located on example.com, which is contained within an iframe or popup window.[1] The JavaScript for document A will look as follows:

  .. code-block:: javascript

    var o = document.getElementsByTagName('iframe')[0];
    o.contentWindow.postMessage('Hello B', 'http://example.com/');

  The origin of our contentWindow object is passed to postMessage. It must match the origin of the document we wish to communicate with (in this case, document B). Otherwise, a security error will be thrown and the script will stop. The JavaScript for document B will look as follows:

  .. code-block:: javascript

    function receiver(event) {
	    if (event.origin == 'http://example.net') {
		    if (event.data == 'Hello B') {
			    event.source.postMessage('Hello A, how are you?', event.origin);
		    }
		    else {
			    alert(event.data);
		    }
	    }
    }
    window.addEventListener('message', receiver, false);

  An event listener is set up to receive messages from document A. Using the origin property, it then checks that the domain of the sender is the expected domain. Document B then looks at the message, either displaying it to the user, or responding in turn with a message of its own for document A.


Channel messaging
-----------------

There are 2 good examples of channel messaging: `mdn/channel-messaging-basic-demo <https://github.com/mdn/channel-messaging-basic-demo>`_ (`Channel messaging basic demo <http://mdn.github.io/channel-messaging-basic-demo/>`_) and `mdn/channel-messaging-multimessage <https://github.com/mdn/channel-messaging-multimessage>`_ (`Channel messaging multi-message demo <http://mdn.github.io/channel-messaging-multimessage/>`_).

From `W3C Channel messaging`_:

  To enable independent pieces of code (e.g. running in different browsing contexts) to communicate directly, authors can use channel messaging.

  Communication channels in this mechanisms are implemented as two-ways pipes, with a port at each end. Messages sent in one port are delivered at the other port, and vice-versa. Messages are asynchronous, and delivered as DOM events.

  To create a connection (two "entangled" ports), the MessageChannel() constructor is called:

  .. code-block:: javascript

    var channel = new MessageChannel();

  One of the ports is kept as the local port, and the other port is sent to the remote code, e.g. using postMessage():

  .. code-block:: javascript

      otherWindow.postMessage('hello', 'http://example.com', [channel.port2]);

  To send messages, the postMessage() method on the port is used:

  .. code-block:: javascript

    channel.port1.postMessage('hello');

  To receive messages, one listens to message events:

  .. code-block:: javascript

    channel.port1.onmessage = handleMessage;
    function handleMessage(event) {
      // message is in event.data
      // ...
    }

  Data sent on a port can be structured data; for example here an array of strings is passed:

  port1.postMessage(['hello', 'world'], 'http://example.com');

Broadcast messaging
-------------------

From `Broadcasting to other browsing contexts <https://html.spec.whatwg.org/multipage/comms.html#broadcasting-to-other-browsing-contexts>`_:

  Pages on a single origin opened by the same user in the same user agent but in different unrelated browsing contexts sometimes need to send notifications to each other, for example "hey, the user logged in over here, check your credentials again".

  For elaborate cases, e.g. to manage locking of shared state, to manage synchronisation of resources between a server and multiple local clients, to share a WebSocket connection with a remote host, and so forth, shared workers are the most appropriate solution.

  For simple cases, though, where a shared worker would be an unreasonable overhead, authors can use the simple channel-based broadcast mechanism described in this section.

.. code-block:: javascript

  var authChannel = new BroadcastChannel('auth');
  authChannel.onmessage = function (event) {
    if (event.data == 'logout')
      showLogout();
  }

  function logoutRequested() {
    // called when the user asks us to log them out
    doLogout();
    showLogout();
    authChannel.postMessage('logout');
  }

  function doLogout() {
    // actually log the user out (e.g. clearing cookies)
    // ...
  }

  function showLogout() {
    // update the UI to indicate we're logged out
    // ...
  }
