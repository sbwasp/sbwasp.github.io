.. include:: /pentest_links.txt


******************
Kali Configuration
******************

Post-install configuration
==========================

Top 10 post install tips
------------------------

See `Kali Linux 2.0 Top 10 Post Install Tips <https://www.offensive-security.com/kali-linux/top-10-post-install-tips/>`_. The author of this section currently uses Kali as their main desktop environment and therefore adds the non-root user "hacker".

Missing firmware and video drivers
----------------------------------

If you get an error message about missing firmware during boot:

.. code-block:: bash

  # missing firmware if this produces non-empty output
  dmesg | grep firmware | grep failed

In this case read and follow `Missing firmware in Debian? Learn how to deal with the problem <http://raphaelhertzog.com/2011/03/14/missing-firmware-in-debian-learn-how-to-deal-with-the-problem/>`_.

To see what video driver you might have to use:

.. code-block:: bash

   lspci -knn | grep -A2 VGA


Wordlists
=========

A number of dictionary files can be found in directory */usr/share/wordlists/*. The ``crunch`` utility can be used to generate wordlists based on input patterns. ``cewl`` can crawl a webserver to generate a dictionary file from words on the website.  ``john`` the ripper can generate mutations of a dictionary file based on the input :file:`john.conf` configuration file. And `Mebus/cupp <https://github.com/Mebus/cupp>`_ can generate a password list based on information known about the target user.

`danielmiessler/SecLists <https://github.com/danielmiessler/SecLists>`_ contains a number of good lists including password lists. It contains the old `darkc0de.txt <https://github.com/danielmiessler/SecLists/blob/master/Passwords/darkc0de.txt>`_ and new `Ashley Madison <https://github.com/danielmiessler/SecLists/blob/master/Passwords/Ashley_Madison.txt>`_ password lists. For some older exploits `Ultimate Password List <http://area51archives.com/index.php?title=Ultimate_Password_List>`_ has been useful.

`fuzzdb-project/fuzzdb <https://github.com/fuzzdb-project/fuzzdb>`_ "is the most comprehensive Open Source database of malicious inputs, predictable resource names, greppable strings for server response messages, and other resources like web shells. It's like an application security scanner, without the scanner." Browse the contents to learn what it offers.

On a side note, if you have a hash value the tool ``hash-identifier`` can make a guess at the hash algorithm.

