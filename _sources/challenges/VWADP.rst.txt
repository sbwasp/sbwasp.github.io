.. include:: /pentest_links.txt


******************************
Finding and running challenges
******************************


.. _VWAD:

OWASP Vulnerable Web Applications Directory Project
===================================================

The `OWASP Vulnerable Web Applications Directory Project <https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project>`_ (VWAD) "is a comprehensive and well maintained registry of all known vulnerable web applications currently available for legal security and vulnerability testing of various kinds." The GitHub site `OWASP/OWASP-VWAD <https://github.com/OWASP/OWASP-VWAD>`_ contains links to the 3 classes of web apps:

* `VWAD Online <https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project/Pages/Online>`_

* `VWAD Offline <https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project/Pages/Offline>`_

* `VWAD VMs <https://www.owasp.org/index.php/OWASP_Vulnerable_Web_Applications_Directory_Project/Pages/VMs>`_


Running challenges
==================

.. _challenge_setup_advancing:

Challenge setup advancing
-------------------------

The `OWASP Juice Shop Project <https://www.owasp.org/index.php/OWASP_Juice_Shop_Project>`_ illustrates the changing technology being used for challenges. The previously VM images, usually VMware, have expanded to running in the cloud, Docker containers, packaged distributions, Amazon EC2 instances, or build instructions. GitHub code repositories encourage community participation in challenge development.


OWASP Juice Shop Project
------------------------

`OWASP Juice Shop Project <https://www.owasp.org/index.php/OWASP_Juice_Shop_Project>`_ is an example of this changing technology.

GitHub `bkimminich/juice-shop <https://github.com/bkimminich/juice-shop/>`_ contains the `Juice Shop - Setup <https://github.com/bkimminich/juice-shop#setup>`_ instructions (Heroku, Docker Container, Packaged Distributions, Amazone EC2 Instance, and Vagrant setup. We'll walk through a few of these.


Manual install
^^^^^^^^^^^^^^

Using GitHub, installing Juice Shop on Kali Linux is actually quite easy:

.. code-block:: bash
  :emphasize-lines: 1,8,12,18

  # Install/configure git
  sudo apt install git -y
  GIT_NAME='bitbender'
  GIT_EMAIL='bitbender@bitbender.org'
  git config --global user.name "${GIT_NAME}"
  git config --global user.email "${GIT_EMAIL}"

  # Install nodejs
  curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
  sudo apt install -y nodejs

  # Install juice-shop app
  git clone https://github.com/bkimminich/juice-shop.git
  cd juice-shop
  # Following needs TCP port 9418 open
  npm install
  npm start
  # firefox via http://localhost:3000

So the complete process involves creating a Kali VM and running the install. The GitHub repository really simplifies this installation process.


Heroku install
^^^^^^^^^^^^^^

Currently, verified Heroku accounts (provide a credit card) get 1000 free dyno hours (over 41 days) while unverified accounts get 550 free dyno hours (over 22 days). The Juice Store app only needs 1 dyno to run, so there are many hours of testing available.

First, log into Heroku then visit `Juice Shop - Setup <https://github.com/bkimminich/juice-shop#setup>`_ a click on :guilabel:`Deploy to Heroku` then:

#. On :guilabel:`Create New App`

   :guilabel:`Provide App name`: sbwasp-juice-shop

   :guilabel:`Choose a region`: United States

   :guilabel:`Add to pipeline...`: N/A

   then click :guilabel:`Deploy app`

#. When app is successfully deployed, select ether

   :guilabel:`Manage App` (https://dashboard.heroku.com/apps/sbwasp-juice-shop)

   or :guilabel:`View` (https://sbwasp-juice-shop.herokuapp.com/).

#. To stop the application

   visit `Manage App <https://dashboard.heroku.com/apps/sbwasp-juice-shop>`_

   select :guilabel:`Resources`

   then click the pencil icon in :guilabel:`Web Dyno Autoscaling`

   move the slider to the left, then select :guilabel:`Confirm`

#. To delete the application

   visit `Manage App <https://dashboard.heroku.com/apps/sbwasp-juice-shop>`_

   select :guilabel:`Settings`

   then scroll down and select :guilabel:`Delete app...`


Docker container install
^^^^^^^^^^^^^^^^^^^^^^^^

The local container approach uses `Get Docker CE for Debian <https://docs.docker.com/engine/installation/linux/docker-ce/debian/>`_:

.. code-block:: bash
  :emphasize-lines: 1,4,14,27,31,35

  # Remove existing docker installation
  sudo apt-get remove docker docker-engine docker.io -y

  # Set up repository
  sudo apt update
  sudo apt-get install \
       apt-transport-https \
       ca-certificates \
       curl \
       gnupg2 \
       software-properties-common \
       -y

  # Add Docker GPG key
  # On debian (not kali) add the GPG key:
  curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | sudo apt-key add -
  # On kali add the GPG key:
  curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
  # Verify key fingerprint matched website page:
  sudo apt-key fingerprint 0EBFCD88

  # On debian (not kali) add docker repo:
  sudo add-apt-repository \
     "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
     $(lsb_release -cs) \
     stable"
  # On kali add docker repo:
  echo "deb https://download.docker.com/linux/debian stretch stable" | \
      sudo tee  /etc/apt/sources.list.d/docker.list

  # Install the package
  sudo apt update
  sudo apt install docker-ce -y

  # Verify correct install
  sudo docker run hello-world

.. _juice_shop_docker_setup:

Then to run Juice Shop:

.. code-block:: bash
  :emphasize-lines: 1,4,6

  # Download then run container
  sudo docker pull bkimminich/juice-shop
  sudo docker run -d -p 3000:3000 bkimminich/juice-shop
  # firefox http://localhost:3000/

  # Stop container
  sudo docker stop \
      $(sudo docker ps | grep 'juice-shop' | cut -d' ' -f1)


.. _VMSetup:

Traditional VM challenge setup
------------------------------

Many of the challenges provide a VM as either an ISO image, a VMware VM, or a VirtualBox VM. How can these be run on `VMware Player`_, `VirtualBox`_, and `libvirt`_/`KVM`_?


ISO
^^^

The easiest is an ISO image: using any of VMware, VirtualBox, or KVM, create a VM like you normally would using an ISO (specifying the OS type). The VM will boot into the vulnerable target host much like if you were running a "live" ISO directly on your PC. That's it.


VMware VM
^^^^^^^^^

Next consider the VMware VM. Of course it should run easily using VMware.

Using the VMware VM's vmdk file in VirtualBox is quite easy: create a new VM with the option "Use an existing virtual hard drive file" using the vmdk file. Alternatively, you can convert the VMware vmdk to a VirtualBox vdi file one of two ways: (1) use the VirtualBox utility ``VBoxManage`` via ``VBoxManage clonehd --format VDI target.vmdk target.vdi``; (2) use ``qemu-img`` via ``qemu-img convert -f vmdk target.vmdk -O vdi target.vdi``.

KVM can directly use the vmdk file or convert it to qemu format via ``qemu-img convert -f vmdk target.vmdk -O qcow2 target.qcow2``. Then create a new VM importing an exising disk image; use either of 2 disk images (vmdk or qcow2).

If you'd like to use a backing store to allow easy rollback to the original, you can use the vmdk or it's converted qcow2/raw image as the backing store as follows:

.. code-block:: bash
  :emphasize-lines: 4-5,7-8,11-12

  USE_VMDK=1
  VM_DISK=vm-changes.qcow2

  # Use vmdk or create a qcow2 backing file
  BACKING=target.vmdk
  if [[ $USE_VMDK != "1" ]]; then
    sudo qemu-img convert -f vmdk target.vmdk -O qcow2 target.qcow2
    BACKING=target.qcow2
  fi

  # Create disk for VM backed by backing file
  sudo qemu-img create -f qcow2 -o backing_file=$BACKING  $VM_DISK
  sudo qemu-img info $BACKING
  sudo qemu-img info $VM_DISK

Then you can create a new VM as above, selecting the VM_DISK image. To revert to the original target, the VM_DISK image can simply be recreated.


VirtualBox VM
^^^^^^^^^^^^^

Next consider the VirtualBox VM. Of course it should run easily using VirtualBox.

Using the VirtualBox VM's vdi file in VMware is quite easy: convert the VirtualBox vdi to a VMware vmdk file using ``qemu-img`` via ``qemu-img convert -f vdi target.vdi -O vmdk target.vmdk``.

KVM can directly use the vmdk file or convert it to qemu format via ``qemu-img convert -f vdi target.vdi -O qcow2 target.qcow2``. Then create a new VM importing an exising disk image; use either of 2 disk images (vdi or qcow2).


.. _Metasploitable2Setup:

Metasploitable2 Setup - VMware vmdk to VirtualBox and KVM
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Metasploitable`_'s 64-bit Ubuntu 8.04 LTS (Hardy Heron) intentionally insecure VMware VM. `Metasploitable 2 Exploitability Guide <http://r-7.co/Metasploitable2>`_ describes the vulnerable services. Remember you can login using msfadmin/msfadmin, then ``sudo -i`` to become root. The DVWA Security page at http://VULNERABLE/dvwa/security.php can set the security level to one of low (no protection), medium (inadequate protection), or high (secure).

From the above you can see that no conversion of the VMware vmdk file is necessary to run the vmdk in all three of VMware (obviously), VirtualBox, or KVM. But we can use ``qemu-img`` to convert if we'd like to: ``qemu-img`` via ``qemu-img convert -f vmdk Metasploitable2.vmdk -O vdi Metasploitable2.vdi`` or ``qemu-img convert -f vmdk Metasploitable2.vmdk -O qcow2 Metasploitable2.qcow2``.

We'll illustrate the conversion to KVM using a backing store (keeping the original disk image intact and recording changes to a separate, erasable disk), and solving a powerdown problem. First convert the VMware VM to a qcow2 backing file, then create the writable main disk:

.. code-block:: bash
  :emphasize-lines: 1-2

  sudo qemu-img convert -f vmdk Metasploitable.vmdk -O qcow2 Metasploitable.qcow2
  sudo qemu-img create -f qcow2 -o backing_file=Metasploitable.qcow2 meta-changes.qcow2
  sudo qemu-img info Metasploitable.qcow2
  sudo qemu-img info meta-changes.qcow2

Next create a new 64-bit VM importing an exising disk image; use the disk meta-changes.qcow2, OS type Linux, Version “Show all OS options”, again select OS type Linux, then Version Ubuntu 8.04 LTS (Hardy Heron); take default memory & CPU; customize configuration before install, making sure the “Disk bus” is SCSI. The KVM VM does not completely power off; to fix this, boot up the VM and as root execute ``echo "apm power_off=1" >> /etc/modules; modprobe apm power_off=1``.
