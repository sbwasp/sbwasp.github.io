.. include:: /pentest_links.txt


*******************************
Pentest engagement organization
*******************************

Organization
============

Pentest engagements are usually of very short duration so the pentester must be highly organized and have a road map for the work & subsequent reporting. Pentest-meetup is working over time to come up with a checklist containing command prototypes making approaching new challenges much easier.

Directory structure
-------------------

Create a directory structure similar to BASE_DIRECTORY/LOCATION/JOB/TOOL to make finding data easy. For example :file:`$HOME/local/pentest/phouse/vulnix/{nmap,nfspysh,exploit}`.

BASE_DIRECTORY
  Starting point in your directory hierarchy. For example :file:`local/pentest`.

LOCATION
  The organization and/or location where the work is done. For example :file:`phouse` for out current meeting place (The Pitcher House Upper Deck).

JOB
  The specific pentest job/contract. For example :file:`vulnix` for the vulnix challenge.

TOOL
  This can be a directory per tool and additional directories to collect reports and other information. For example :file:`nmap` to collect all :program:`nmap` runs, :file:`nfspysh` for :program:`nfspysh` output, and :file:`exploit` for the specific exploit steps.

.. code-block:: bash

  # Start in some subdirectory
  BASE=$HOME/local/pentest
  LOCATION=$BASE/phouse
  JOB=$LOCATION/vulnix
  TOOLS=nmap,nfspysh,exploit
  eval mkdir -p $JOB/{$TOOLS}

Capture tool output for reporting & further exploitation
--------------------------------------------------------

Often tools produce output that can readily be transformed into report-ready format or a target host list. For example, :program:`nmap` produces both xml & grep-able output files. Here's how to use the grep-able output to get a target list and xml output to produce a target report:

.. code-block:: bash

  # install xsltproc
  SUDO=$(which sudo)
  [[ "$USER" == "root" ]] && SUDO=
  $SUDO apt-get install xsltproc -y

  # quickly map the network
  NMOUT=nmap-phouse
  SN='192.168.1.0/24'
  TARGETS=targets.txt
  nmap -sn -PE -oA $NMOUT $SN
  # use the grep-able output to get a list of target hosts
  grep Up $NMOUT.gnmap | cut -d" " -f2 > $TARGETS
  # use the xml output to get an html report
  xsltproc $NMOUT.xml -o $NMOUT.html

With very little extra effort $TARGETS is your list of hosts for further exploration and $NMOUT.html is part of your reporting.


Basic network mapping
=====================

Starting with :program:`nmap`
-----------------------------

:program:`nmap` should be used both for network mapping and its scripts found in :file:`/usr/share/nmap/scripts/`. Assume the exploit :ref:`Vulnix` with directory structure :file:`$HOME/local/pentest/phouse/vulnix/nmap`.

:program:`nmap` quick network scan
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

First do a quick network scan to get the 

.. code-block:: bash

  SUDO=$(which sudo)
  [[ "$USER" == "root" ]] && SUDO=
  NMOUT=nmap-phouse
  SN='192.168.1.0/24'
  TARGETS=targets.txt
  nmap -sn -PE -oA ${NMOUT}_sn $SN
  # use the grep-able output to get a list of target hosts
  grep Up ${NMOUT}_sn.gnmap | cut -d" " -f2 > $TARGETS
  # use the xml output to get an html report
  xsltproc ${NMOUT}_sn.xml -o ${NMOUT}_sn.html

At this point you have $TARGETS and inspecting the host names will show which one is the vulnix host. Next you determine the open ports:

.. code-block:: bash

  nmap -A -vv -T5 --max-retries 0 -Pn -iL $TARGETS -oA ${NMOUT}_A
  xsltproc ${NMOUT}_A.xml -o ${NMOUT}_A.html

vulnix is T=192.168.1.103 here.

:program:`nmap` script - no arguments
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Suppose we wish to investigate nfs further. At this point we could use the nfs script nfs-showmount:

.. code-block:: bash

  T=192.168.1.103
  nmap --script nfs-showmount -oA ${NMOUT}_nfs-showmount $T
  xsltproc ${NMOUT}_nfs-showmount.xml -o ${NMOUT}_nfs-showmount.html
  nmap --script nfs-ls -oA ${NMOUT}_nfs-ls $T
  xsltproc ${NMOUT}_nfs-ls.xml -o ${NMOUT}_nfs-ls.html
  nmap --script nfs-statfs -oA ${NMOUT}_nfs-statfs $T
  xsltproc ${NMOUT}_nfs-statfs.xml -o ${NMOUT}_nfs-statfs.html

This gives us the output:

.. code-block:: console
  :emphasize-lines: 13,14

  hacker@kali:~/local/pentest/phouse/vulnix/nmap$ nmap --script nfs-showmount -oA ${NMOUT}_nfs-showmount $T

  Starting Nmap 6.47 ( http://nmap.org ) at 2015-04-29 14:27 PDT
  Nmap scan report for 192.168.1.103
  Host is up (0.00020s latency).
  Not shown: 988 closed ports
  PORT     STATE SERVICE
  22/tcp   open  ssh
  25/tcp   open  smtp
  79/tcp   open  finger
  110/tcp  open  pop3
  111/tcp  open  rpcbind
  | nfs-showmount: 
  |_  /home/vulnix *
  143/tcp  open  imap
  512/tcp  open  exec
  513/tcp  open  login
  514/tcp  open  shell
  993/tcp  open  imaps
  995/tcp  open  pop3s
  2049/tcp open  nfs

  Nmap done: 1 IP address (1 host up) scanned in 0.11 seconds
  ###################### SNIP ######################



